/** (C) Copyright 1998-2004 Hewlett-Packard Development Company, LP

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

For more information: www.smartfrog.org

*/

#include "/org/smartfrog/services/assertions/components.sf"
#include "/org/smartfrog/test/system/assertions/components.sf"
#include "/org/smartfrog/sfcore/workflow/conditional/components.sf"
#include "/org/smartfrog/sfcore/workflow/combinators/sequence.sf"
#include "/org/smartfrog/sfcore/workflow/conditional/conditions/components.sf"

BaseWait extends FailingWaitFor {
    interval 100;
    timeout 200;
    message "waitfor failed";
}

BaseIf extends If {

    else extends Terminator {

    }
}


BaseTestCompound extends ExpectTerminate {

    sfShouldTerminate false;

}

BaseFailingCompound extends FailingTestCompound {

    sfShouldTerminate false;
}

NotFalse extends Not {
    condition extends False;
}

StringsEqual extends StringEquals {
    left "one";
    right "one";
}

StringsUnequal extends StringEquals {
    left "BIG";
    right "big";
}


StringsEqualCI extends StringsUnequal {
    caseSensitive false;
}

NotStringsUnequal extends Not {
  condition extends StringsUnequal;
}

// -> true
AndTT extends And {
 -- extends True;
 -- extends True;
}

// -> false
AndTF extends And {
 -- extends True;
 -- extends False;
}
// -> true
AndFT extends And {
 -- extends False;
 -- extends True;
}

// -> false
AndFF extends And {
 -- extends False;
 -- extends False;
}

// -> true
OrTT extends Or {
 -- extends True;
 -- extends True;
}

// -> true
OrTF extends Or {
 -- extends True;
 -- extends False;
}


// -> true
OrFT extends Or {
 -- extends False;
 -- extends True;
}

//-> false
OrFF extends Or {
 -- extends False;
 -- extends False;
}



// -> f
XorTT extends Xor {
 -- extends True;
 -- extends True;
}

// -> true again
XorTTT extends Xor {
 -- extends True;
 -- extends True;
 -- extends True;
}

// -> true
XorTF extends Xor {
 -- extends True;
 -- extends False;
}


// -> true
XorFT extends Xor {
 -- extends False;
 -- extends True;
}

//-> false
XorFF extends Xor {
 -- extends False;
 -- extends False;
}
