/* (C) Copyright 2008 Hewlett- Packard Development Company, LP


This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

For more information: www.smartfrog.org

*/
#include "/org/smartfrog/services/assertions/components.sf"

//this should be an empty string
should.be.empty OPTIONAL("") PROPERTY name.of.undefined.property;
not.equal.works IF (should.be.empty != "") THEN false ELSE true FI;
equal.works IF (should.be.empty == "") THEN true ELSE false FI;


IsNotEqualSet extends BooleanValue {
  value not.equal.works;
}

NotConditionSet extends Not {
  condition IsNotEqualSet;
}

WorkflowAssert extends Assert {
  sfShouldTerminate true;
}

testAssertIsEmpty extends ExpectDeploy {
  action extends Compound { }

  tests extends Sequence {
    assertEmptyString extends WorkflowAssert {
      equalsString1 "";
      equalsString2 should.be.empty;
    }
  }
}


testAssertIsEmpty extends ExpectDeploy {
  action extends Compound { }

  tests extends Sequence {
    assertEmptyString extends WorkflowAssert {
      equalsString1 "";
      equalsString2 should.be.empty;
    }
  }
}

testNotEqualWorks extends ExpectDeploy {
  action extends Compound { }

  tests extends Sequence {
    assertNEWorks extends WorkflowAssert {
      isTrue not.equal.works;
    }
  }
}

testEqualWorks extends ExpectDeploy {
  action extends Compound { }

  tests extends Sequence {
    assertNEWorks extends WorkflowAssert {
      isTrue equal.works;
    }
  }
}



testConditionEvaluated extends ExpectDeploy {
  description "run this test and do not expect a skip";
  condition IsNotEqualSet;
  action extends Compound { }
  tests extends Sequence {

  }
}


testAbnormalRun extends ExpectTerminate {
  description "this is expected to fail with an error";
  //condition NotConditionSet;
  action extends FailAbnormal {
    normal false;
    message "oops!";
  }
}

testConditionSkipped extends testAbnormalRun {
  description "run this test expect a skip";
  condition NotConditionSet;
}

