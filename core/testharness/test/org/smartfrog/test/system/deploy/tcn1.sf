/** (C) Copyright 1998-2004 Hewlett-Packard Development Company, LP

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

For more information: www.smartfrog.org

*/

#include "/org/smartfrog/components.sf"
#include "/org/smartfrog/test/system/deploy/netComponents.sf"

/*
Error Tested:
OUT >Warning: SmartFrog security is NOT active
ERR >Error during deployment of URL:org/smartfrog/test/system/deploy//test1.sf, for component:ex1.
SmartFrogLifecycleException:: sfDeploy:
     cause: SmartFrogResolutionException:: notFound, Unresolved Reference: outpu
ts1
*/

Example1 extends Compound {
     // there are two components, generator and printer, both defined in netComponents.sf
     // the output (value) of the generator is linked to the input (printVal) of the printer
     generator extends Generator {
       outputs:value:to LAZY ATTRIB printer:inputs:printVal;
       interval 1; // speed it up a bit,a number every second
       min 1;
       max 10;
     }
     printer extends Printer;         // Printer is defined in netComponents.sf
}

/*
 * sfConfig is the special attribute that is deployed by SFSystem
 * here it is defined to contain Example1
 */

sfConfig extends Compound {
    sfProcessComponentName "test_case_tcn1"; // this will normally be set as part of the sfStart, it is
                                        // the name by which it will be known to the SF system (if not
                                        // provided a new unique name is generated

    test extends Example1;            // add the example itself as a component
}
