<?xml version="1.0"?>
<project name="cddlm" default="default">

    <!--
    /** (C) Copyright 1998-2004 Hewlett-Packard Development Company, LP

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

    For more information: www.smartfrog.org

    */
    -->

    <description>
     Build file for CDDLM.
     
     After deploying, get the WSDL From
     http://localhost:5050/axis/services/cddlm?wsdl
     
     Then deploy demos like
     org/smartfrog/examples/subprocesses/subprocess.sf
     org/smartfrog/examples/counter/example.sf

    </description>

    <!-- override point -->
    <property file="build.properties"/>


    <property name="root.dir" location="../.."/>
    <!-- Import common stuff -->
    <import file="${root.dir}/common.xml"/>


    <!-- ========================================================== -->
    <!-- ========================================================== -->
    <target name="init" depends="init-standard-output-dirs,use-smartfrog-tasks">

        <property name="deploy.sf" 
          value="org/smartfrog/services/cddlm/cddlm_on_jetty.sf"/>

        <property name="default.ini" location="test/files/default.ini"/>
        <property name="default.sf" location="test/files/default.sf"/>

        <property name="generated.dir" location="build/generated"/>

        <!-- the compile time path includes everything in the lib directory. 
          that must include jdom and axis-->
<!--         <path id="compile.classpath">
            <path refid="smartfrog.classpath"/>

            <fileset dir="${lib.dir}">
              <include name="**/*.jar"/>
            </fileset>
        </path> -->



        <!-- set up the runtime path -->
<!--         <path id="run.classpath">
            <path refid="compile.classpath"/>
            <path location="${target.jar}"/>
        </path>

        <path id="test.classpath">
            <path refid="run.classpath"/>
            <pathelement location="${test.classes.dir}"/>
        </path> -->
        
    </target>
    
    
  <!-- ========================================================== -->
  <!-- import all our axis tasks -->
  <!-- ========================================================== -->
  <target name="import-axis-tasks" depends="assert-prerequisites">
        <!-- import Axis tasks-->
    <taskdef resource="axis-tasks.properties"
        classpathref="compile.classpath"/>
  </target>    
    
  <!-- ========================================================== -->
  <!-- this is an override point -->
  <!-- set the verified.ok property if everything needed is present -->
  <!-- Do Not Fail. This test is used to control conditional builds -->
  <!-- NB, set property verify.fail.message to something meaningful
       for better diagnostic messages on failure (see assert-prerequisites) 
       -->
  <!-- ========================================================== -->
  <target name="verify-prerequisites" depends="init">
        <!-- check for axis. Because we pull in system classes too (the default),
             if axis is on the classpath it gets used, even if axis.lib.dir is unset
             -->
        <available property="verified.ok"
            classname="org.apache.axis.transport.http.SimpleAxisServer"
            classpathref="compile.classpath"
            ignoresystemclasses="false"/>
        <property name="verify.fail.message"
          value="No Axis found in ${lib.dir}"/>    
  </target>
  
  <!-- ========================================================== -->
  <!-- utility method for anyone keeping lib up to date wrt axis
      files; this copies them if they have any byte-for-byte differences
      -->
  <!-- ========================================================== -->
    <target name="fetch-axis-files" if="axis.home"
    depends="init"
        description="fetch the latest axis distribution">
        <copy todir="${lib.dir}">
          <fileset dir="${axis.home}/build/lib" includes="*.jar">
            <different targetdir="${lib.dir}" ignorefiletimes="true"/>
          </fileset>
        </copy>
        <copy todir="${lib.dir}">
          <fileset dir="${axis.home}/build/" includes="*.war">
            <different targetdir="${lib.dir}"  ignorefiletimes="true" />
          </fileset>
        </copy>
    </target>    
    

    <!-- ========================================================== -->
    <!-- parse the file -->
    <!-- ========================================================== -->
    <target name="parse" depends="init,dist"
        description="parse the cddlm descriptor">
<!-- 
        <sf-parse quiet="true" file="${src.dir}/${deploy.sf}">
            
            <classpath path="${target.jar}"/>
        </sf-parse>
 -->
    </target>

    <!-- ========================================================== -->
    <!-- parse the test files -->
    <!-- ========================================================== -->
    <target name="parse-tests" depends="init,dist"
        description="parse the test descriptor">

        <sf-parse quiet="true">
            <classpath path="${target.jar}"/>
            <source dir="${build.classes.dir}"
                includes="org/cddlm/components/*.sf">
            </source>
        </sf-parse>

    </target>

    <!-- ========================================================== -->
    <!-- run the service inline -->
    <!-- ========================================================== -->
    <target name="run" depends="parse,dist"
        description="run the service inline">
        <sf-run classpathref="run.classpath" includeantruntime="false"
            logStackTraces="true">
            <assertions enableSystemAssertions="true">
                <enable/>
            </assertions>
            <application name="cddlm" descriptor="/${deploy.sf}"/>
            <codebase file="${target.jar}"/>
        </sf-run>
    </target>
    
    <!-- ========================================================== -->
    <!-- start the daemon -->
    <!-- ========================================================== -->
    <target name="start-daemon" depends="parse,dist,start-daemon-if-needed"
        description="start the daemon">
    </target>

    
    <!-- ========================================================== -->
    <!-- set up any properties for deployment -->
    <!-- ========================================================== -->
    <target name="init-deploy-properties" depends="init">
        <property name="deploy.host" value="localhost"/>
        <property name="application.name" value="cddlm"/>
        <property name="axis.port" value="5050"/>
    </target>

    <!-- ========================================================== -->
    <!-- deploy; requires a host -->
    <!-- ========================================================== -->
    <target name="deploy" depends="parse,dist,init-deploy-properties,undeploy"
        description="deploy">
        <sf-tourl property="target.jar.url" file="${target.jar}">
            <fileset dir="${lib.dir}">
                <include name="**/*.jar"/>
            </fileset>
        </sf-tourl>
        <echo> codebase= ${target.jar.url}</echo>
        <sf-deploy classpathref="run.classpath"
            logStackTraces="true"
            host="${deploy.host}"
            >
            <sysproperty key="axis.home" file="${lib.dir}" />
            <codebase url="${target.jar.url}"/>
            
            <application name="${application.name}">
#include "org/smartfrog/services/cddlm/cddlm_on_jetty.sf"
  sfCodeBase PROPERTY org.smartfrog.codebase;         
            </application>
        </sf-deploy>
    </target>

    <!-- ========================================================== -->
    <!-- undeploy the application if it is running -->
    <!-- ========================================================== -->
    <target name="undeploy" depends="init-deploy-properties"
        description="undeploy the application if it is running">
        <sf-undeploy host="${deploy.host}" application="${application.name}"
            failonerror="false"/>
    </target>

    <!-- ========================================================== -->
    <!-- -->
    <!-- ========================================================== -->
    <target name="wsdl" depends="init,init-deploy-properties,import-axis-tasks" 
      description="fetch the WSDL From a deployed service and create test+client classes">
        <mkdir dir="${generated.dir}"/>
        <axis-wsdl2java 
          url="http://localhost:${axis.port}/axis/services/cddlm?wsdl"
          testcase="true"
          typemappingversion="1.2"
          failonnetworkerrors="true"
          output="${generated.dir}"
          />
        <axis-wsdl2java 
          url="http://localhost:${axis.port}/axis/services/AdminService?wsdl"
          testcase="false"
          typemappingversion="1.2"
          failonnetworkerrors="true"
          output="${generated.dir}"
          />          
    </target>


    <!-- ========================================================== -->
    <!-- system tests -->
    <!-- ========================================================== -->
    <target name="system-tests" depends="parse,dist"
        description="run system tests"
        if="system.tests.enabled">
        <parallel>

            <!-- first thread runs the daemon -->
            <sequential>
                <antcall target="start-daemon"/>
            </sequential>

            <!-- this is the next thread -->
            <sequential>

                <!--
                  wait ten seconds for the harness to start
                  without this the first tests will fail as there is no
                  sf daemon around
                -->
                <sf-waitfordaemon maxwait="10" timeoutproperty="daemon.missing"/>
                <fail if="daemon.missing">No daemon</fail>
                <!-- get the WSDL -->

                <!-- conditionally stop the daemon -->
                <antcall target="stop-daemon-if-started"/>
                <!-- end the test thread -->
            </sequential>
        </parallel>
    </target>

    
  <!-- ========================================================== -->
  <!-- this is an override point -->
  <!-- unit tests : anything which does not need deployment to run-->
  <!-- ========================================================== -->
  <target name="unit-tests" depends="compile-tests" if="unit.tests.enabled"
    description="run the unit tests">
   <sf-junit
           errorProperty="test.failed"
           failureProperty="test.failed"
           >
        <sysproperty key="test.classes.dir"
            value="${test.classes.dir}" />
      <classpath>
        <path refid="test.classpath"/>
        <pathelement location="${test.classes.dir}"/>
      </classpath>
      <batchtest todir="${test.data.dir}" if="unit.tests.enabled">
        <!-- bulk test case -->
        <fileset dir="${test.classes.dir}">
          <include name="org/smartfrog/services/cddlm/test/unit/**/*Test.class" />
       </fileset>
      </batchtest>
    </sf-junit>    
    </target>     
</project>
