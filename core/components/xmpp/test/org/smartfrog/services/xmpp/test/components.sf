/** (C) Copyright 2007 Hewlett-Packard Development Company, LP

 This library is free software; you can redistribute it and/or
 modify it under the terms of the GNU Lesser General Public
 License as published by the Free Software Foundation; either
 version 2.1 of the License, or (at your option) any later version.

 This library is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General Public
 License along with this library; if not, write to the Free Software
 Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

 For more information: www.smartfrog.org

 */

#include "/org/smartfrog/services/xmpp/components.sf"
#include "/org/smartfrog/sfcore/workflow/components.sf"
#include "/org/smartfrog/services/assertions/components.sf"

/**
 * There is a secret password to these logins that only team
 * members know
 */

xmpp.password OPTIONAL("") PROPERTY test.xmpp.password;

IsXmppPresent extends BooleanValue {
  value (xmpp.password != "");
}

Settings extends DATA {
  domain "@gmail.com";
  login1 "smartfrog.one";
  password1 xmpp.password;
  address1 (login1 ++ domain);
  login2 "smartfrog.two";
  password2 xmpp.password;
  address2 (login2 ++ domain);
}

  PostMessage extends GoogleChatClientWorkflow {
      to Settings:address2;
      login Settings:login1;
      password Settings:password1;
      message "hello, world";
  }

  listener2 extends GoogleChatListener {
      login Settings:login2;
      password Settings:password2;
  }

  checker extends GoogleChatPresenceChecker {
    login Settings:login1;
    password Settings:password1;
    target Settings:address2;
  }


ExpectXmppTestDeploy extends  ExpectDeploy {
  condition extends IsXmppPresent;
  undeployAfter 60000;
}

ExpectXmppTestFail extends  ExpectDeployFailure {
  condition extends IsXmppPresent;
  undeployAfter ExpectXmppTestDeploy:undeployAfter;
}

testGmailXmpp extends ExpectXmppTestDeploy {

  description "test xmpp deployment -requires test.xmpp.password to be set to the appropriate password";

  action extends Compound {
    Listener extends listener2;
    
    history extends HistoryPacketHandler {
      listener LAZY Listener;
      dumpOnTerminate true;
    }
  }

  undeployAfter 60000;

  tests extends Sequence {
    post1 extends PostMessage;
    post2 extends PostMessage {
      message "second message";
    }
    sleep extends Delay {
      time 2000;
    }
    checkMessage extends HistoryAssertion {
      history LAZY PARENT:PARENT:action:history;
      textRegexp post2:message;
    }
  }
}

/**
 Test the presence over gmail
 */
testGmailRecipientAbsent extends ExpectXmppTestFail {
  description "expect the other account to be absent";
  action extends Compound {
    check extends checker {
      delay 1000;
    }
  }

  exceptions [["",XmppPresenceChecker:ERROR_NOT_PRESENT]];

}

/**
 Test the presence over gmail
 */
testGmailRecipientPresent extends ExpectXmppTestDeploy {
  description "expect the other account to be present";
  action extends Compound {
   Listener extends listener2;

    history extends HistoryPacketHandler {
      listener LAZY Listener;
      dumpOnTerminate true;
    }

    check extends checker {
      delay 1000;
    }
  }


}





