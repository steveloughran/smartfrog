/** (C) Copyright 2005 Hewlett-Packard Development Company, LP

 This library is free software; you can redistribute it and/or
 modify it under the terms of the GNU Lesser General Public
 License as published by the Free Software Foundation; either
 version 2.1 of the License, or (at your option) any later version.

 This library is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General Public
 License along with this library; if not, write to the Free Software
 Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

 For more information: www.smartfrog.org

 */

package org.smartfrog.services.persistence.rcomponent;

import org.smartfrog.services.persistence.storage.Storage;
import org.smartfrog.sfcore.common.SmartFrogRuntimeException;
import org.smartfrog.sfcore.componentdescription.ComponentDescription;


/**
 * this is a simple class used to generate unique names based
 * on an incrementing counter and a construction time time stamp.
 */
public class UniqueNameGenerator {
    
    static private String GEN_NAME_VAL = "generateName";
    
    static private int count = 0;

    static private Object monitor = new Object();

    static private long epoch = System.currentTimeMillis();


    /**
     * Add a unique name to a description. the name is generated by concatenating a string including
     * the construction time stamp for this object, a component prefix, and
     * a number from an incrementing counter. The unique name is added to the storage component
     * of the description and is also returned as the return value.
     * 
     * @param cd the component description containing a storage description
     * @return the unique name
     * @throws SmartFrogRuntimeException fails to find the storage description or fails to add the unique name
     */
    public static String getUniqueName(ComponentDescription cd) throws SmartFrogRuntimeException {
        synchronized (monitor) {
           
            String name = cd.sfResolve(Storage.COMPONENT_NAME_ATTR, GEN_NAME_VAL, false);
            if( GEN_NAME_VAL.equals(name) ) {
                String uniqueName = "component_" + count++ + epoch;  
                cd.sfReplaceAttribute(Storage.COMPONENT_NAME_ATTR, uniqueName);
                return uniqueName;
            } else {
                return name;
            }
        }
    }
}
