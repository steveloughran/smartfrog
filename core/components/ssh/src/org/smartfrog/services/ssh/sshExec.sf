/** (C) Copyright 1998-2004 Hewlett-Packard Development Company, LP

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

For more information: www.smartfrog.org

*/

#include "org/smartfrog/components.sf"
#include "org/smartfrog/services/ssh/password.sf"
/**
 * SSHSession component executes commands on a remote host over SSH. Refer to 
 * ssHExample.sf for sample usage.
 */

 SSHSchema extends SshSchema {
    commands extends Vector;
	logFile extends OptionalString;
  }

 SSHSchemaAuthPubKey extends SSHSchema {
	  keyfile extends String;  	
  }

 BaseSshSessionAuthPass extends SshCompound {
    /*----------------------------Mandatory Parameters --------------------*/
  //  host "localhost";
  //  userId "someuser";
  //  passwordFile "pwdFile";
  //  commands ["cmd1", "cmd2"];

    /*---------------------------Optional Parameters -----------------------*/

    /*---------------------Component's Definition --------------------------*/  
    PasswordProvider TBD;
	
    SSHCmdExec extends Prim{
        sfClass "org.smartfrog.services.ssh.SSHExecAuthPassImpl";
        sshSchema extends SSHSchema;
        /* ========================================================
         * Mandatory attributes 
         *=========================================================
         */
        // reference to password provider
        passwordProvider LAZY PARENT:PasswordProvider;

        // cmdsFailureMsgs [];

        
        /* ========================================================
         * Optional attributes 
         *=========================================================
         */
        // timeout for command execution
        timeout PARENT:ATTRIB timeout;
        port PARENT:ATTRIB port;
        // Required if used in workflows like Sequence etc
        shouldTerminate PARENT:ATTRIB shouldTerminate;
        // terminate if any command fails
        failOnError PARENT:ATTRIB failOnError;
   }
}

 SSHSessionAuthPass extends BaseSshSessionAuthPass {

    PasswordProvider extends FilePassword {
        //passwordFile PARENT:ATTRIB passwordFile;
    }
}

SSHSessionInlinePass extends BaseSshSessionAuthPass {
	password TBD;

	PasswordProvider extends InlinePassword {
		password LAZY PARENT:ATTRIB password;
	}
}


SSHSessionAuthPubKey extends SshCompound {
    /*----------------------------Mandatory Parameters --------------------*/
  //  host "localhost";
  //  userId "someuser";
  //  passwordFile "pwdFile";
  //  commands ["cmd1", "cmd2"];

    /*---------------------------Optional Parameters -----------------------*/


    /*---------------------Component's Definition --------------------------*/  
    PasswordProvider extends FilePassword {
        //passwordFile PARENT:ATTRIB passwordFile;
    }
    SSHCmdExec extends Prim{
        sfClass "org.smartfrog.services.ssh.SSHExecAuthPubKeyImpl";
        sshSchema extends SSHSchemaAuthPubKey;
        /* ========================================================
         * Mandatory attributes 
         *=========================================================
         */
        // reference to password provider
        passwordProvider LAZY PARENT:PasswordProvider;

        // cmdsFailureMsgs [];

        
        /* ========================================================
         * Optional attributes 
         *=========================================================
         */
        // timeout for command execution
        timeout PARENT:ATTRIB timeout;
        port PARENT:ATTRIB port;
        // Required if used in workflows like Sequence etc
        shouldTerminate PARENT:ATTRIB shouldTerminate;
        // terminate if any command fails
        failOnError PARENT:ATTRIB failOnError;
   }
}
