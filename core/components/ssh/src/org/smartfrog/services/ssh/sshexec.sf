/** (C) Copyright 1998-2004 Hewlett-Packard Development Company, LP

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

For more information: www.smartfrog.org

*/

#include "/org/smartfrog/services/ssh/sshcomponent.sf"
/**
 * The SSHSession component executes commands on a remote host over SSH.
 */


/**
 * the base component has no password policy
 */
 SSHExec extends SSHComponent {
    sfClass "org.smartfrog.services.ssh.SSHExecImpl";
    sshSchema extends SSHComponentSchema  {
        commands extends OptionalVector;
        logFile extends OptionalString;
    }
    authentication SSHComponent:authenticate_password;
 }


 SSHExecWithPrivateKey extends SSHExec {
    authentication SSHComponent:authenticate_key;
 }
  
 /**
  * Here are some compounts to let you declare a password provider in the same compound
  * as the execution. This is useful, but not mandatory
  */

 BaseSshSessionAuthPass extends SshCompound {

    PasswordProvider TBD;
    port SSHExec:port;
    timeout SSHExec:timeout;
	
    SSHCmdExec extends SSHExec {

        host PARENT:ATTRIB host;

        username PARENT:ATTRIB username;
        
        // reference to password provider
        passwordProvider LAZY PARENT:PasswordProvider;

           // timeout for command execution
        timeout PARENT:ATTRIB timeout;

        port PARENT:ATTRIB port;
        // terminate if any command fails
        failOnError PARENT:ATTRIB failOnError;
   }

    PasswordProvider extends FilePassword {
    }
}

/**
 * this compound uses a file password provider
  */
SSHSessionPasswordFile extends BaseSshSessionAuthPass {
    passwordFile TBD;
    PasswordProvider:passwordFile PARENT:ATTRIB passwordFile;
}

/**
 * this compound uses an inline password provider
  */
SSHSessionInlinePassword extends BaseSshSessionAuthPass {
	password TBD;

	PasswordProvider extends InlinePassword {
		password LAZY PARENT:ATTRIB password;
	}
}


/**
 * To switch to public key operation, we need a public key and a keyfile
 */

SSHSessionPublicKey extends BaseSshSessionAuthPass {
    keyFile TBD;
    SSHCmdExec:authentication SSHComponent:authenticate_key;
    SSHCmdExec:keyFile keyFile;
}
