/* (C) Copyright 2009 Hewlett-Packard Development Company, LP

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

For more information: www.smartfrog.org

*/

#include "/org/smartfrog/components.sf"

/**
 * Scripting engine;
 *
 * the resource attributes are read before the code ones; if both are empty strings then
 * that specific phase is a no-op
 */
JavaxScripting extends WorkflowPrim {
  sfClass "org.smartfrog.services.scripting.javax.JavaxScriptingImpl";
  language "";

  sfScriptCodeBase "";


  sfDeployResource "";
  sfDeployCode "";

  sfStartResource "";
  sfStartCode "";

  sfPingResource "";
  sfPingCode "";

  sfTerminateWithResource "";
  sfTerminateWithCode "";


  JAVASCRIPT "javascript";
  JAVAFX "fx";
  GROOVY "groovy";
  
}

/**
 * this component will terminate after the start operation
 */
JavaxScriptingWorkflow extends JavaxScripting {
  sfShouldTerminate true;
}

/**
 * The condition component has all the same scripted events as the main scripting component,
 * but also provides a new script that is executed whenever the condition interfaces evaluate() method
 * is called. The return value from this script must be boolean/Boolean, or an error is raised
 */
JavaxScriptingCondition extends JavaxScripting {
  sfClass "org.smartfrog.services.scripting.javax.JavaxScriptingConditionImpl";
  sfConditionResource "";
  sfConditionCode "";
  //this attribute is read to see if the condition succeeded.
  condition false;
}

/**
 * here are some constants
 */
JavaxScriptingErrors extends {

  /**
   * Error in a condition when the return is not a boolean
   */
  ERROR_NOT_BOOLEAN CONSTANT org.smartfrog.services.scripting.javax.JavaxScriptingConditionImpl.ERROR_NOT_BOOLEAN;

  /**
   * text seen when a script would not evaluate
   */
  ERROR_EVAL CONSTANT org.smartfrog.services.scripting.javax.JavaxScriptingImpl.ERROR_EVAL;


}