<?xml version="1.0"?>

<!--!DOCTYPE project [
     <!ENTITY security SYSTEM "${smartfrog.home}/dist/private/buildSecurity.xml"
>
]-->

<project name="arithmetic-testharness" default="default">

  <!--
  /** (C) Copyright 1998-2004 Hewlett-Packard Development Company, LP

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307
  USA

  For more information: www.smartfrog.org

  */
  -->

  <description>
    This executes the system tests
  </description>


  <!-- override point -->
  <property file="executeTest.properties"/>
  <property name="root.dir" location="../.."/>
  <property name="smartfrog.home" location="../../../smartfrog"/>
  <property name="sharedFolder" location="${root.dir}/../"/>
  <property name="arithmetic.dir" location="${sharedFolder}/components/arithmetic-testharness"/>
  <property name="build.dir" location="build"/>
  <property name="build.classes.dir" location="${build.dir}/classes"/>

  <!-- Import common stuff -->
  <!--import file="${root.dir}/common.xml"/-->
  <import file="build.xml"/>
  <!--import file="${smartfrog.home}/dist/private/buildSecurity.xml"/-->
  <!-- Include here the security-related ant file -->
  <!--&security;/-->
  <!-- End of security-related ant file -->

  <target name="init" depends="common.init, use-smartfrog-tasks">
    <property name="releaseName" location="SmartFrog.${Version}"/>
    <!--TODO: need to extract the release file name-->
    <property name="releaseFile" location="SmartFrog.${Version}.20050915_DIST.zip"/>
  </target>

  <!--
     Copy the releasezip In the shared Folder
     Get the shared folder in the driver node
  -->
  <target name="sfExtraction" depends="clean, init, dist">
    <mkdir dir="${sharedFolder}/daemons"/>
    <copy file="${releaseFile}"
          todir="${sharedFolder}/daemons"/>
    <!--   do we need to create machine specific folders -->
  </target>

  <!--
   Start the daemon in all Remote nodes using net Component
   Get the list of nodes from the property file ...
  -->

  <target name="generateHostList" depends="sfExtraction">
    <java classname="org.smartfrog.tools.testharness.templategen.RemoteTemplateGen" failonerror="true" fork="true">
      <arg value="-t" />
      <arg file="src/org/smartfrog/tools/testharness/templategen/Remotehosts.vm" />
      <arg value="-h"/>
      <arg file="src/org/smartfrog/tools/testharness/templategen/Remotehosts.all"/>
      <arg value="-o"/>
      <arg value="startRemoteDaemons.sf"/>
      <arg value="-d"/>
      <arg file="${smartfrog.home}"/>
      <arg value="-s"/>
      <arg file="${sharedFolder}"/>
      <classpath>
        <fileset dir="${dist.lib.dir}">
          <include name="**/*.jar"/>
        </fileset>
        <fileset dir="${lib.dir}">
          <include name="**/*.jar"/>
        </fileset>
      </classpath>
    </java>
  </target>

  <!-- Run doAll -->
  <target name="doAll" depends="generateHostList"
     description="Run doAll script">
    <copy todir="${smartfrog.home}/dist/lib">
      <fileset dir="${arithmetic.dir}/dist/lib"/>
    </copy>
    <exec dir="${arithmetic.dir}/src/org/smartfrog/tools/testharness/templategen" executable="sh">
      <arg value="doAll"/>
      <env key="SFHOME" value="${smartfrog.home}"/>
      <env key="ATH_HOME" value="${arithmetic.dir}"/>
    </exec>
  </target>

  <!-- Run secsetupRelease -->

  <target name="secSetupRelease" depends="doAll" description="Run secSetup Release script">
    <exec dir="${sharedFolder}/daemons" executable="sh">
      <!--arg line="${arithmetic.dir}/bin/setupRelease ${releaseFile} demo
     CA ${hostList}"/-->
      <arg line="${arithmetic.dir}/bin/secSetupRelease ${releaseFile} ${releaseName} demoCA ${hostList}"/>
    </exec>
  </target>


  <!--Build ATH & copy the jar files to ath/dist/lib +
 daemons/hostx/dist/lib -->
  <target name="buildATH" depends="secSetupRelease">
    <antcall target="dist"/>

    <copy todir="${smartfrog.home}/dist/lib">
      <fileset dir="${arithmetic.dir}/dist/lib"/>
    </copy>
    
    <copy todir="${smartfrog.home}/dist/lib">
      <fileset dir="${arithmetic.dir}/lib"/>
    </copy>
    
    <copy todir="${arithmetic.dir}/dist/lib">
      <fileset dir="${arithmetic.dir}/lib"/>
    </copy>

    <exec dir="${sharedFolder}/daemons" executable="sh">
      <arg
          line="${arithmetic.dir}/bin/copylibs ${arithmetic.dir}/dist/lib  ${sharedFolder} ${releaseName} demoCA ${hostList}"/>
    </exec>


    <copy file="security.xml"
          todir="${sharedFolder}/daemons/demoCA/${releaseName}/dist"/>

    <exec dir="${sharedFolder}/daemons" executable="sh">
      <arg
          line="${arithmetic.dir}/bin/copysignedlibs ${sharedFolder}/daemons/demoCA/${releaseName}/dist/signedLib ${sharedFolder} ${releaseName} ${hostList}"/>
    </exec>
  </target>

  <!-- Start the Driver Daemon-->
  <target name="startDriverDaemon" depends="buildATH" description="Starts the Driver node Daemon">
    <!--antcall target="start-daemon-if-needed"/-->
    <sf-startdaemon classpathref="smartfrog.classpath" logStackTraces="true" spawn="true"
                    port="${smartfrog.daemon.port}"/>

  </target>


  <!-- Start the Remote Daemons-->

  <target name="startRemoteDaemons" depends="startDriverDaemon">
    <!--
      wait ten seconds for the harness to start
      without this the first tests will fail as there is no
      sf daemon around
    -->
    <sf-waitfordaemon maxwait="20" timeoutproperty="daemon.missing"/>
    <fail if="daemon.missing">No daemon, or daemon not responding at port ${smartfrog.daemon.port}</fail>

    <sf-deploy classpathref="smartfrog.classpath" logStackTraces="true"
               port="${smartfrog.daemon.port}">
      <application name="startDaemon" descriptor="startRemoteDaemons.sf"/>
    </sf-deploy>
  </target>
  <!--
        Deploy ATH Component
  -->
  <target name="deployATH" depends="startRemoteDaemons">
    <!--waitfor maxwaitunit="second">
            <socket server="lx97120" port="${smartfrog.daemon.port}"/>
    </waitfor-->
    <sleep minutes="15"/>


    <sf-deploy classpathref="smartfrog.classpath" logStackTraces="true"
               port="${smartfrog.daemon.port}">
      <application name="startApp" descriptor="org/smartfrog/regtest/arithmetic/templategen/exampleTH.sf"/>
    </sf-deploy>
  </target>

  <!--
        Generate Report
  -->
  <target name="showReport" depends="deployATH">
    <!-- Wait for the report file to get populated-->
    <!--waitfor maxwait="4" maxwaitunit="minute">
       <not>
                           <socket server="localhost" port="3801"/>
       </not>
            </waitfor-->
    <sleep minutes="5"/>
    <exec dir="${sharedFolder}/daemons" executable="sh">
      <arg line="${arithmetic.dir}/bin/reportgen ${sharedFolder} ${releaseName} ${hostList}"/>
    </exec>
    <exec dir="${sharedFolder}/daemons" executable="cat">
      <arg line="report"/>
    </exec>
    <antcall target="stopDaemons"/>
  </target>

  <target name="test" depends="showReport"/>

  <target name="stopDaemons">
    <exec dir="${sharedFolder}" executable="sh">
      <arg line="${arithmetic.dir}/bin/stopDaemons ${smartfrog.home} ${hostList}"/>
    </exec>
  </target>


  <target name="clean" depends="common.clean,stopDaemons">
    <delete dir="${sharedFolder}/daemons"/>
    <delete file="${arithmetic.dir}/startRemoteDaemons.sf"/>
    <delete>
      <fileset dir="${smartfrog.home}/dist/lib" includes="**/sf-arithmetic*.jar"/>
    </delete>
    <delete>
      <fileset dir="${smartfrog.home}/dist/lib" includes="**/sf-scripting*.jar"/>
    </delete>

    <delete>
      <fileset dir="${arithmetic.dir}" includes="**/*.log"/>
    </delete>
    <delete>
      <fileset dir="${arithmetic.dir}/src/org/smartfrog/tools/testharness/templategen" includes="**/template*.sf"/>
    </delete>
    <delete>
      <fileset dir="${sharedFolder}" includes="**/*.out"/>
    </delete>
  </target>
</project>

