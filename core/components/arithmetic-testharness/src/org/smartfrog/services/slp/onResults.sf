#include "org.smartfrog.sfcore.workflow.components.sf";

/**
 * An 'abstract' component to use generally with a SLPResultsCollector :
 * On each component discovered by the ResultsCollector, trigger an action
 */

OnResults extends EventPrim {
	// the sfClass has to be given by the subtypes!
	// resultsCollector extends LAZY ATTRIB somewhere ;
		// points to wherever the ResultsCollector is. One must also register with it, see example below.
	serviceType ""; // used as a message that the resultsCollector has a new component.
}

/**
 * A component to use with a PrimResultsCollector :
 * On each component discovered by the primResultsCollector, and up to a given number ('count')
 * the component described under 'action' is deployed if possible.
 * The link attribute is resolved and added if provided.
 */
OnPrimResults extends EventPrim {
	sfClass "org.smartfrog.services.slp.OnPrimResults";	
//	resultsCollector extends LAZY ATTRIB ...// wherever the PrimResultsCollector is. One must also register with 						// it, see example below.
	serviceType ""; // used as a message that the resultsCollector has a new component.
//	count X; the number of components you want to deploy
//	link LAZY ...// resolved and added to the context of the action if present
	action extends LAZY{
//		compName extends LAZY compDesc ;
	};
}

/**
 * An example of how to use the former component :
 * Three components form this one:
 * -the slp locator to access the slp utility
 * -the PrimResultsCollector to get the service:url results and convert them back into Prim references
 * -the OnResults component that deploys the same description on every discovered component.
 */ 

LocateAndDeploy extends Compound {
	sfServiceDescription extends LAZY {
		// sfServiceType "serviceType";
		// sfServiceAttributes extends {}  
	}
	onResults extends OnResults {
		count 1;
		serviceType PARENT:ATTRIB sfServiceDescription:sfServiceType;
		resultsCollector LAZY PARENT:ATTRIB resultsCollector;
		link LAZY PARENT:ATTRIB outputLink; // added to the context of the action if present
		action extends LAZY {}
	}
	resultsCollector extends PrimResultsCollector{
		sendTo extends LAZY {
			onResults LAZY PARENT:ATTRIB onResults;
		}
		display true;
		registerWith extends LAZY sendTo;
		threadType "keepLooking";
		locator LAZY PARENT:ATTRIB slpLocator;
	}
	slpLocator extends SLPLocator{
		sfServiceDescription PARENT:ATTRIB sfServiceDescription;
	}
}
