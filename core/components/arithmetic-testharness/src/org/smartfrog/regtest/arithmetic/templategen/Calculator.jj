options
{
    LOOKAHEAD=100;
  STATIC=false;
DEBUG_PARSER=false;
  JAVA_UNICODE_ESCAPE = true;
  FORCE_LA_CHECK=true;          
}

PARSER_BEGIN(Calculator)
package org.smartfrog.regtest.arithmetic.templategen;

public class Calculator 
{

}

PARSER_END(Calculator)

SKIP :
{
    " "
|   "\r"
|   "\t"
|   "\n"
}

TOKEN:
{
    < NUMBER: (<DIGIT>)+ >
|   < DIGIT: ["0"-"9"] >
|   < GENERATOR: "G">
|   <TERMINATOR: "T">
}

NodeElem parseOp():
{
    NodeElem a;
    NodeElem c;
}
{
    a=expr() <TERMINATOR>       { c = new NodeElemImpl(NodeElem.EVALUATOR,
                                                       a,null,null);
                                  return c; }
}

NodeElem expr():
{
    NodeElem a;
    NodeElem b;
    NodeElem c;
}
{
    a=term() [
              "+" b=expr()    { //System.out.println("expr:term()+expr()");
                                  c = new NodeElemImpl(NodeElem.PLUS,
                                                       a,b,null);
                                 return c; }
               ]
                { //System.out.println("expr:term()");
                 return a; } 
}

NodeElem term():
{
    NodeElem a;
    NodeElem b;
    NodeElem c;
}
{
  a=unary() [ "*" b=term()    {  //System.out.println("term():unary() * term()");
                                   c = new NodeElemImpl(NodeElem.TIMES,
                                                        a,b,null);
                                   return c; }
               ]
    { //System.out.println("term():unary()");
                   return a;}
}

NodeElem unary():
{
    NodeElem a;
    NodeElem c;
}
{

    "-" a=element()     { 
      //System.out.println("unary(): - element()");
                         c = new NodeElemImpl(NodeElem.NEGATE,
                                              a,null,null);
                         return c; }
|   a=element()         {
  //System.out.println("unary(): element()");
                         return a; }
}

NodeElem element():
{
    Token t;
    NodeElem a;
    NodeElem c;
}
{
    t=<NUMBER>          { 
      //System.out.println("element(): <NUMBER>");
                        c = new NodeElemImpl(NodeElem.CONSTANT,
                                             null,null,t.toString());
                        return c; }
|   "(" a=expr() ")"    { 
  //System.out.println("element(): ( expr() )");
                         return a; }
|   t=<GENERATOR>       { 
  //System.out.println("element(): <GENERATOR>");
                        c = new NodeElemImpl(NodeElem.GENERATOR,
                                             null,null,null);
                        return c;
                        }
}
