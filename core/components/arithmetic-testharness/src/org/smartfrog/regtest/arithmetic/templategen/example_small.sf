
// include the core smartfrog components and the components for the arithmetic example
#include "org/smartfrog/components.sf"
#include "org/smartfrog/regtest/arithmetic/netComponents.sf"
#include "org/smartfrog/regtest/arithmetic/comparator.sf"



Example1 extends Compound {

// First the end-point...
  sink extends Compound {
    sfProcessHost ATTRIB host29;

    Evaluator29 extends Evaluator {
      inputs:G extends Input;
      operation "((((G+G)+G)+((0+((0)+G))+G)))" ;		// use same variable as input name.
      outputs:value:to LAZY ATTRIB comparator:inputs:target;
    }

    comparator extends Comparator {
      count ATTRIB numMatches;
      outputs:value:to LAZY ATTRIB printer:inputs:printVal;
    }
    printer extends Printer {

    }
  }

// Now all the nodes that implement the logic
  Times28 extends Plus {
        sfProcessHost ATTRIB host28 ;
                      outputs:value:to LAZY ATTRIB   sink:comparator:inputs:candidate;
           }
  Plus19 extends Plus {
        sfProcessHost ATTRIB host19 ;
                      outputs:value:to LAZY ATTRIB Times28:inputs:lhs;
           }
  Times17 extends Plus {
        sfProcessHost ATTRIB host17 ;
                      outputs:value:to LAZY ATTRIB Plus19:inputs:lhs;
           }
  Times27 extends Plus {
        sfProcessHost ATTRIB host27 ;
                outputs:value:to LAZY ATTRIB Times28:inputs:rhs;
     }
  Plus25 extends Plus {
        sfProcessHost ATTRIB host25 ;
                      outputs:value:to LAZY ATTRIB Times27:inputs:lhs;
           }
  Constant20 extends Constant {
        sfProcessHost ATTRIB host20 ;
            constant 0 ;
                      outputs:value:to LAZY ATTRIB Plus25:inputs:lhs;
           }
  Plus24 extends Plus {
        sfProcessHost ATTRIB host24 ;
                outputs:value:to LAZY ATTRIB Plus25:inputs:rhs;
     }
//  Negate22 extends Negate {
//        sfProcessHost ATTRIB host22 ;
//                      outputs:value:to LAZY ATTRIB Plus24:inputs:lhs;
//           }
  Constant21 extends Constant {
        sfProcessHost ATTRIB host21 ;
            constant 0 ;
                      outputs:value:to LAZY ATTRIB Plus24:inputs:lhs;
           }

// Finally the generator with all its outputs

  source extends Compound {
    sfProcessHost ATTRIB host2;

    generator extends Generator {
            outputs:value:to  LAZY ATTRIB  sink:Evaluator29:inputs:G;
            outputs:Generator15  extends  Output;

            outputs:Generator15:to LAZY ATTRIB Times17:inputs:lhs;
            outputs:Generator16  extends  Output;
            outputs:Generator16:to LAZY ATTRIB Times17:inputs:rhs;

            outputs:Generator18  extends  Output;
            outputs:Generator18:to LAZY ATTRIB Plus19:inputs:rhs;

            outputs:Generator23  extends  Output;
            outputs:Generator23:to LAZY ATTRIB Plus24:inputs:rhs;

            outputs:Generator26  extends  Output;
            outputs:Generator26:to LAZY ATTRIB Times27:inputs:rhs;

        interval ATTRIB intervalGen; // speed it up a bit,a number every second
    min 1;
    max ATTRIB maxValueGen;
    }
  }
}

/*
 * sfConfig1 is the special attribute that is deployed by SFSystem
 * here it is defined to contain Example1
 */

sfConfig1 extends Compound {
  sfProcessHost ATTRIB host1;
  //sfRootLocatorPort ATTRIB port;
  numMatches 10;
  maxValueGen 10000;
  intervalGen 5;
  example extends Example1;            // add the example itself as a component
}

