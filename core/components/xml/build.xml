<?xml version="1.0"?>
<project name="xml" default="default"
    xmlns:ivy="antlib:fr.jayasoft.ivy.ant"
  >

  <!--
  /** (C) Copyright 1998-2006 Hewlett-Packard Development Company, LP

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

  For more information: www.smartfrog.org

  */
  -->

  <description>
     Build file for the XML component
  </description>

  <!-- override point -->
  <property file="build.properties"/>
  <property name="is.component" value="true"/>

  <property name="root.dir" location="../.."/>
  <!-- Import common stuff -->
  <import file="../../common.xml"/>
  
  
  <!-- ========================================================== -->
  <!-- ========================================================== -->
  <target name="init"
    depends="init-standard-output-dirs,use-smartfrog-tasks,use-smartfrog-testharness">
    <property name="deploy.sf" value="files/success.sf"/>
    <property name="default.ini" location="test/files/default.ini"/>
    <property name="default.sf" location="test/files/default.sf"/>
  </target>


  <!-- ========================================================== -->
  <!-- declare our compile time classpath -->
  <!-- ========================================================== -->

  <target name="declare-compile.classpath" depends="ivy-resolve"
     >
    <ivy:cachepath pathid="compile.classpath" conf="compile" />
    <property name="compile.classpath.value" refid="compile.classpath"/>
    <echo level="verbose">compile.classpath=${compile.classpath.value}</echo>
  </target>
  
  <!-- this is the classpath for running the daemon -->
  
  <target name="declare-run.classpath" depends="init" >
    <ivy:cachepath pathid="run.classpath" conf="daemon" />
    <property name="run.classpath.value" refid="run.classpath"/>
    <echo level="verbose">daemon.classpath=${daemon.classpath.value}</echo>
  </target>
  
  <target name="declare-exec.classpath" depends="declare-compile.classpath" >  
    <path id="exec.classpath">
      <path refid="compile.classpath"/>
      <pathelement location="${target.jar}"/>
    </path>    
    <property name="exec.classpath.value" refid="exec.classpath"/>
    <echo level="verbose">exec.classpath=${exec.classpath.value}</echo>
  </target>  
  
  <target name="declare-tests.run.classpath" depends="declare-tests.compile.classpath" >
    <path id="tests.run.classpath">
      <path refid="tests.compile.classpath"/>
      <pathelement location="${test.jar}"/>
    </path>
    <property name="tests.run.classpath.value" refid="tests.run.classpath"/>
    <echo level="verbose">tests.run.classpath=${tests.run.classpath.value}</echo>
  </target>


  <target name="check-versions" depends="init">
    <available property="nux.found"
        classname="nux.xom.binary.BinaryXMLCodec"/>
    <!-- work out our java version by introspection, fall back to 1.4 if 1.5 is not found -->
    <condition property="javac.version" value="1.5">
      <available classname="java.lang.Readable"/>
    </condition>
    <property name="javac.version" value="1.4"/>
    <condition property="javac.is.1.4" >
      <equals arg1="${javac.version}" arg2="1.4" />
    </condition>
  </target>

  <target name="javac.version" depends="check-versions" if="javac.is.1.4">
    <echo level="warning">
      Using Javac version 1.4: the java 1.5 packages will be omitted.
      Do not redistribute this build.
    </echo>

  </target>

  <target name="pre-compile" depends="common.pre-compile,javac.version" >

  </target>
  <!-- ========================================================== -->
  <!-- this is an override
       with selective use of the nux codec. -->
  <!-- ========================================================== -->
  <target name="compile"
      depends="pre-compile">
    <depend srcdir="${src.dir}"
        destdir="${build.classes.dir}"
        cache="${build.dir}/depends"
        closure="yes"/>
    <sf-javac
        classpathref="compile.classpath"
        srcdir="${src.dir}"
        source="${javac.version}"
        target="${javac.version}"
        destdir="${build.classes.dir}"
        >
      <include name="**/*.java"/>
      <exclude name="**/NuxBinaryCodec.java" unless="nux.found"/>
      <exclude name="**/java5/**/*.java" unless="java1.5+"/>
    </sf-javac>
    <copy-useful-files src="${src.dir}" dest="${build.classes.dir}"/>
  </target>

  <!-- ========================================================== -->
  <!-- create a distro. 
       we want both sf-junit and the test har -->
  <!-- ========================================================== -->
  <target name="dist" depends="common.dist, jdocs" description="create a distribution">
<!--
  <copy todir = "${dist.lib.dir}">
        <fileset dir ="${lib.dir}" />
    </copy>  
-->
     <copy todir = "${dist.doc.dir}">
        <fileset dir ="${doc.dir}" />
    </copy>   
     <copy todir = "${dist.src.dir}">
        <fileset dir ="${src.dir}">
            <include name="**/examples/**"/>
        </fileset>
           </copy>
     <copy tofile="${dist.dir}/build.xml" file="releaseBuild.xml"/> 
   <copy tofile="${dist.dir}/build.example.properties" file="build.example.properties"/>
  </target>
    
  <!-- ========================================================== -->
  <!-- parse the file -->
  <!-- ========================================================== -->
  <target name="parse" depends="init,dist,init-codebase"
    description="parse the deployment descriptor">
    <property name="parse.quiet" value="true"/>
    <sf-parse quiet="${parse.quiet}">
      <classpath path="${target.jar}:${test.jar}"/>
      <sysproperty key="org.smartfrog.codebase"
        value="${codebase}"/>
      <!-- source files -->
      <source dir="${test.src.dir}/org/smartfrog/services/xml/test/files/"
        >
        <include name="testDocument.sf" />
        <include name="textNode.sf" />
      </source>
      <!-- test files -->
      <!--       <source dir="${test.src.dir}">
              <include name="**/*.sf"/>
              <exclude name="files/components.sf"/>
            </source>
       -->
    </sf-parse>
  </target>


  <!-- ========================================================== -->
  <!-- set up any properties for deployment -->
  <!-- ========================================================== -->
  <target name="init-deploy-properties" depends="init">
    <property name="deploy.host" value="localhost"/>
    <property name="application.name" value="${project.name}"/>
  </target>

  <!-- ========================================================== -->
  <!-- set-->
  <!-- ========================================================== -->
  <target name="init-codebase" depends="init-deploy-properties"
    description="set up the codebase property">
    <sf-tourl property="codebase">
      <fileset file="${target.jar}"/>
      <fileset file="${test.jar}"/>
      <path refid="compile.classpath"/>
    </sf-tourl>
    <echo>
        deploying to ${deploy.host}
        codebase=${codebase}</echo>
  </target>
  <!-- ========================================================== -->
  <!-- deploy; requires a host -->
  <!-- ========================================================== -->
  <target name="deploy" depends="parse,init-codebase,init-deploy-properties"
    description="deploy">

    <sf-deploy classpathref="run.classpath"
      logStackTraces="true"
      host="${deploy.host}"
      timeout="30000"
      >
      <codebase url="${codebase}"/>

      <application name="${application.name}">
              sfCodeBase PROPERTY org.smartfrog.codebase;
              #include "/${deploy.sf}"
      </application>
    </sf-deploy>
  </target>

  <target name="undeploy" depends="init-deploy-properties"
    description="deploy">
    <sf-undeploy classpathref="run.classpath"
      logStackTraces="true"
      host="${deploy.host}"
      timeout="30000"
      application="${application.name}"/>
  </target>
    

  <!-- ========================================================== -->
  <!-- system tests -->
  <!-- ========================================================== -->
  <target name="system-tests" depends="parse,dist,compile-tests,init-codebase"
    description="run system tests"
    if="system.tests.enabled">
    <parallel>

      <!-- first thread runs the daemon -->
      <sequential>
        <antcall target="start-daemon-if-needed"/>
      </sequential>

      <!-- this is the next thread -->
      <sequential>

        <!--
          wait ten seconds for the harness to start
          without this the first tests will fail as there is no
          sf daemon around
        -->
        <sf-waitfordaemon maxwait="10" timeoutproperty="daemon.missing"/>
        <fail if="daemon.missing">No daemon</fail>
        <sf-junit
          errorProperty="test.failed"
          failureProperty="test.failed"
          >
          <classpath>
            <path refid="tests.run.classpath"/>
            <!-- <pathelement location="${test.classes.dir}"/> -->
          </classpath>
          <sysproperty key="org.smartfrog.codebase" value="${codebase}"/>
          <syspropertyset>
            <propertyref prefix="runtime"/>
          </syspropertyset>

          <!-- #Test case isolation technique -->
          <test name="${testcase}" if="testcase"/>
          <batchtest todir="${test.data.dir}" unless="testcase">
            <!-- bulk test case -->
            <fileset dir="${test.classes.dir}">
              <include name="org/smartfrog/services/xml/test/**/*Test.class"/>
            </fileset>
          </batchtest>
        </sf-junit>

        <!-- conditionally stop the daemon -->
        <antcall target="conditional-daemon-exit"/>
        <!-- end the test thread -->
      </sequential>
    </parallel>
  </target>

  <target name="conditional-daemon-exit" unless="no.stop.daemon">
    <antcall target="stop-daemon-if-started"/>
  </target>

  <target name="unzip" depends="dist">
    <property name="target.exploded" location="${build.dir}/exploded" />
    <unzip src="${target.jar}" dest="${target.exploded}"/>
  </target>

  <target name="all" depends="dist,unzip,test,published" />
</project>
