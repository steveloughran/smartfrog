/** (C) Copyright 2006 Hewlett-Packard Development Company, LP

 This library is free software; you can redistribute it and/or
 modify it under the terms of the GNU Lesser General Public
 License as published by the Free Software Foundation; either
 version 2.1 of the License, or (at your option) any later version.

 This library is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General Public
 License along with this library; if not, write to the Free Software
 Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

 For more information: www.smartfrog.org

 */


/*
 components to set up hsqldb testing
 */

#include "/org/smartfrog/services/database/test/system/core/components.sf";
#include "/org/smartfrog/services/database/mysql/components.sf";
#include "/org/smartfrog/services/database/mysql/operations.sf"
#include "/org/smartfrog/sfcore/workflow/components.sf"
#include "/org/smartfrog/services/filesystem/components.sf"
#include "/org/smartfrog/services/logging/log4j/logtolog4jimpl.sf"
#include "/org/smartfrog/sfcore/logging/logimpl.sf"
#include "/org/smartfrog/sfcore/logging/components.sf"

Settings extends {
   db "diary";
   testUser "testUser";
   testPass "secret";
   undeployTimeout 5000;
   //how long should we give mysql before giving up?
   mysql_startup_delay 10000;
   mysql_startup_timeout 20000;
   poll_interval 200;

 }

 Mysqld extends mysqldaemon {
/*
  shouldTerminate false;
  terminateOnFailure false;
*/
  skip-innodb true;
  skip-grant-tables true;
  skip-networking false;
  logLevel 5;
  //socketpath Settings:socketpath;
}

 DiaryBinding extends MysqlTargetedBinding {
   host "localhost";
   database Settings:db;
 }

 TestUserBinding extends DiaryBinding {
   username Settings:testUser;
   password Settings:testPass;
 }


/**
 * this component can test for sockets existing
 */
 AssertSocketExists extends FileOrDirMustExist {
  filename Mysqld:socketpath;
 }

 Datadir extends TempDirWithCleanup {
   prefix "mysql";
 }

 DatabaseAndBinding extends Compound {

/*
  log extends SFLog {
    logName "org.smartfrog.org.smartfrog.services.database";
    //log against our parent
    logFrom LAZY PARENT;
    //now log4j kicks in
    logTo extends LogToLog4JImpl {

      resource "log4j.properties";
      setIniLog4JLoggerLevel true;
    }
    logLevel LOG_LEVEL_DEBUG;
  }*/
  
//  setup extends Sequence {
    //create the data directory on demand
    datadir extends Datadir;

    //deploy mysql
    mysqld extends Mysqld {
      datadir LAZY PARENT:datadir:absolutePath;
      basedir datadir;
    }


//  }

  //lazy reference to mysql daemon
//  mysqld LAZY setup:mysqld;

  //this is the mysql binding
  binding extends MysqlBinding;

  diary extends DiaryBinding;
}



  BlockForMysqlConnection extends BlockForJdbcConnection {
    interval Settings:poll_interval;
    timeout Settings:mysql_startup_timeout;
  }

  BlockForMysqlLive extends BlockForMysqlConnection {
    condition extends IsMysqlLive {
      database LAZY PARENT:database;
    }
  }


MysqlTest extends TestCompound {

    description "test compound for mysql tests";

  //autoshutdown
    undeployAfter Settings:undeployTimeout;

    sfShouldTerminate false;

    action extends DatabaseAndBinding ;

    database LAZY action:binding;

    tests extends Sequence {
    }

 }


 sfConfig extends DatabaseAndBinding {

/*
    -- extends mysqladmin-status {
      //socketpath Settings:socketpath;
    }

    -- extends mysqladmin-shutdown {
        silent true;
        //socketpath Settings:socketpath;
    }
    TestUserBinding;
    
    */


}