<?xml version="1.0"?>
<project name="components" default="default" basedir=".">

<!--
/** (C) Copyright 1998-2004 Hewlett-Packard Development Company, LP

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

For more information: www.smartfrog.org

*/
-->


<description>
     Build file for components.
	 Each component supported must have the following targets in 
	 its build.xml
	 	maybe-dist        distribute if prereqs are met
		maybe-test      	test if prereqs are met
    maybe-install     conditional install
    clean             clean up the output dirs
		
  The easiest way to do this is import root.dir/common.xml 
  as a common build file; it provides template operations for this process.  
	 
</description>
 <!-- ========================================================== -->
 <!--
    Implementation notes
    
    This build file is cutting-edge Ant1.6 scalability at work. It is 
    not going to run on older versions, and the documentation for what
    is in use is still sparse. 
    Best docs so far: http://otn.oracle.com/pub/articles/bodewig_ant1.6.html
    
    <subant> is a new task that delegates the same task to any build files
    listed in files and directores. We set up a path for this task,
    which is ordered such that projects other components depend on 
    must build first. Then we create a preset wrapper for the process,
    called <delegate>.
    
    It is inevitable that not all projects will have their dependent
    libraries in place on all machines. So each component build file must
    have conditional targets that only do a dist or test if they are 
    present.
    
    This has one adverse consequence: if something needs a predecessor, and
    the predecessor wont build, the build file does not automatically stop.
    Every build file must therefore consider the problem of the dependent
    components being missing.
    
  -->
 <!-- ========================================================== -->
   <!-- override point -->
  <property file="build.properties" />

  
  <!-- ========================================================== -->
  <!-- initialisation -->
  <!-- ========================================================== -->
  <target name="init" >
    <!-- add new components here, in alphabetical order. this is
      not where dependency logic is imposed -->
    <property name="arithmetic-testharness.project" location="arithmetic-testharness" />
    <property name="cddlm.project" location="cddlm" />
    <property name="emailer.project" location="emailer" />
    <property name="jetty.project" location="jetty" />
    <property name="junit.project" location="junit" />
    <property name="logger.project" location="logger" />
    <property name="net.project" location="net" />
    <property name="scripting.project" location="scripting" />
    <property name="ssh.project" location="ssh" />
    <property name="slp.project" location="slp" />
    <property name="utils.project" location="utils" />
    <property name="releasetest.project" location="releasetest" />
    
    <property name="root.dir" location=".."  />
    <!--where the files for release will go-->
    <property name="lib" value="lib"/>
    <property name="build" value="build"/>
    <property name="docs" value="docs"/>
    <property name="doc" value="doc"/>
    <property name="src" value="src"/>
    <property name="jdocs" value="jdocs"/>
    <property name="dist.dir" value="dist"/>         <!-- where the files to zip go -->
    <property name="dist.dir" value="dist"/>         <!-- where the files to zip go -->
    <property name="dist.lib.dir" value="${dist.dir}/${lib}"/>
    <property name="dist.src.dir" value="${dist.dir}/${src}"/>
    <property name="dist.docs.dir" value="${dist.dir}/${docs}"/>
    <property name="dist.jdocs.dir" value="${dist.dir}/${jdocs}"/>

     <property name="componentsFiles" value="org/smartfrog/services/**/*"/>
    
    <!-- this is where dependency logic is imposed
         the path must be ordered such that dependent projects
         come in the path after the things they depend on
    -->
    
    <path id="component.path">
      <pathelement location="${utils.project}"/>
      <pathelement location="${logger.project}"/>
      <pathelement location="${ssh.project}"/>
      <pathelement location="${net.project}"/>
      <pathelement location="${emailer.project}"/>
      <!--pathelement location="${arithmetic-testharness.project}"/-->
      <!--pathelement location="${junit.project}"/-->
      <pathelement location="${jetty.project}"/>
      <!--pathelement location="${cddlm.project}"/-->
      <!--pathelement location="${releasetest.project}"/-->
      <pathelement location="${slp.project}"/>
      
      <pathelement location="${scripting.project}"/>
    </path>
    <property name="component.path.asproperty"
      refid="component.path"/>
    <echo level="verbose">
component.path := 
  ${component.path.asproperty}
    </echo>
    
    <presetdef name="delegate">
      <subant buildpathref="component.path"
        antfile="build.xml"
        inheritall ="false" inheritrefs="false"/>
    </presetdef>
    
  </target>
  
  <target name="clean" depends="init, clean-dist"
    description="clean all projects">
    <delegate target="clean"/>
  </target>
  
  <target name="test" depends="init"
    description=" all projects">
    <delegate target="maybe-test"/>
  </target>

  <target name="dist" depends="init"
    description="build distributions of all projects">
    <delegate target="maybe-dist"/>
  </target>
  
  <target name="install" depends="init"
    description="install all projects">
    <delegate target="maybe-install"/>
  </target> 
  
  <target name="diagnostics" depends="init"
    description="diagnostics">
    <delegate target="diagnostics"/>
  </target> 
  <target name="diag2" depends="init"
    description="diagnostics">
    <delegate target="diag2"/>
  </target>  

  <!-- =================================================================== -->
  <!-- clean jdocs                                                               -->
  <!-- =================================================================== -->
  <target name="clean-dist" description="Cleans the dist directory">
	  <delete dir="${dist.dir}"/>
	  <delete file="common.xml"/>
  </target>
  
   <!-- =================================================================== -->
  <!-- Initialization target                                               -->
  <!-- =================================================================== -->
  <target name="initjdocs">
    <tstamp/>
    <property name="Name.System" value="SmartFrog"/>
    <property name="Name.Company" value="(C) Copyright 1998-2004 Hewlett-Packard Development Company, LP"/>
    <property name="version" value="COMPONENTS"/>
    <property name="Version" value="3.04.004.beta"/>
    <property name="year" value="2004"/>
    <property name="javac.java.version" value="1.4" />
    <echo level="verbose"/>
  </target>

  <!-- =================================================================== -->
  <!--   JDocs                                                             -->
  <!-- =================================================================== -->
  <target name="jdocs" depends="init, initjdocs" description="Generates the API documentation">
    <!--  Java Docs for all                                                -->
    <echo message=""/>
    <echo message="------------------------------------------------------------------------"/>
    <echo message="  Creating Java Docs for ${Name.System} ${version} [${jdocs.dir}]"/>
    <echo message="------------------------------------------------------------------------"/>
    <mkdir dir="${dist.jdocs.dir}"/>
    <javadoc packagenames="org.*"
             destdir="${dist.jdocs.dir}"
             author="true"
             version="true"
             use="true"
             windowtitle="${Name.System}"
             Header="${Name.System} ${Version}"
             Footer="${Name.System} ${version} ${Version}"
             doctitle="${Name.System}"
             bottom="${Name.Company}"
             source="${javac.java.version}"
	     >
	   <sourcepath> 
		   <!--pathelement path="${cddlm.project}/${src}"/-->
		   <pathelement path="${emailer.project}/${src}"/>
		   <pathelement path="${jetty.project}/${src}"/>
		   <pathelement path="${logger.project}/${src}"/>
		   <pathelement path="${net.project}/${src}"/>
		   <pathelement path="${scripting.project}/${src}"/>
		   <pathelement path="${slp.project}/${src}"/>
		   <pathelement path="${ssh.project}/${src}"/>
		   <pathelement path="${utils.project}/${src}"/>
	    </sourcepath>     
      <group title="SmartFrog Component Packages" packages="org.smartfrog.*"/>
    </javadoc>

    
  </target>

  <!-- =================================================================== -->
  <!-- Initialization target                                               -->
  <!-- =================================================================== -->
  <target name="initdist" depends="init">
      <mkdir dir="${dist.dir}"/>
      <mkdir dir="${dist.lib.dir}"/>
      <mkdir dir="${dist.docs.dir}"/>
      <mkdir dir="${dist.src.dir}"/>
  </target> 

  <!-- =================================================================== -->
  <!--                                                                     -->
  <!-- =================================================================== -->
  <target name="copylibs" depends="initdist">
    <copy todir="${dist.lib.dir}">
      <!--fileset dir="${cddlm.project}/${build}/${dist.lib.dir}">
           <include name="**/*.jar" />
      </fileset-->
      <fileset dir="${emailer.project}/${build}/${dist.lib.dir}">
           <include name="**/*.jar" />
      </fileset>
      <fileset dir="${jetty.project}/${build}/${dist.lib.dir}">
           <include name="**/*.jar" />
      </fileset>
      <fileset dir="${logger.project}/${build}/${dist.lib.dir}">
           <include name="**/*.jar" />
      </fileset>
      <fileset dir="${net.project}/${build}/${dist.lib.dir}">
           <include name="**/*.jar" />
      </fileset>
      <fileset dir="${scripting.project}/${build}/${dist.lib.dir}">
           <include name="**/*.jar" />
      </fileset>
      <fileset dir="${slp.project}/${build}/${dist.lib.dir}">
           <include name="**/*.jar" />
      </fileset>
      <fileset dir="${ssh.project}/${build}/${dist.lib.dir}">
           <include name="**/*.jar" />
      </fileset>
      <fileset dir="${utils.project}/${build}/${dist.lib.dir}">
           <include name="**/*.jar" />
      </fileset>
      <fileset dir="${lib}">
           <include name="**/*.jar" />
      </fileset>
    </copy>
  </target>

  <!-- =================================================================== -->
  <!--                                                                     -->
  <!-- =================================================================== -->
  <target name="copycomponents" depends="initdist">
    <copy todir="${dist.src.dir}">
      <!--fileset dir="${cddlm.project}/${src}">
        <include name="${componentsFiles}" />
        <exclude name="**/*.dfPackage"/>
      </fileset-->
      <fileset dir="${emailer.project}/${src}">
        <include name="${componentsFiles}" />
        <exclude name="**/*.dfPackage"/>
      </fileset>
      <fileset dir="${jetty.project}/${src}">
        <include name="${componentsFiles}" />
        <exclude name="**/*.dfPackage"/>
      </fileset>
      <fileset dir="${logger.project}/${src}">
        <include name="${componentsFiles}" />
        <exclude name="**/*.dfPackage"/>
      </fileset>
      <fileset dir="${net.project}/${src}">
        <include name="${componentsFiles}" />
        <exclude name="**/*.dfPackage"/>
      </fileset>
      <fileset dir="${scripting.project}/${src}">
        <include name="${componentsFiles}" />
        <exclude name="**/*.dfPackage"/>
      </fileset>
      <fileset dir="${slp.project}/${src}">
        <include name="${componentsFiles}" />
        <exclude name="**/*.dfPackage"/>
      </fileset>
      <fileset dir="${ssh.project}/${src}">
        <include name="${componentsFiles}" />
        <exclude name="**/*.dfPackage"/>
      </fileset>
      <fileset dir="${utils.project}/${src}">
        <include name="${componentsFiles}" />
        <exclude name="**/*.dfPackage"/>
      </fileset>
    </copy>
  </target>

  <!-- =================================================================== -->
  <!--                                                                     -->
  <!-- =================================================================== -->
  <target name="copydocs" depends="initdist">
    <copy todir="${dist.docs.dir}">
      <!--fileset dir="${cddlm.project}/${doc}">
        <include name="**/*.*" />
      </fileset-->
      <fileset dir="${emailer.project}/${doc}">
        <include name="**/*.*" />
      </fileset>
      <fileset dir="${jetty.project}/${doc}">
        <include name="**/*.*" />
      </fileset>
      <fileset dir="${logger.project}/${doc}">
        <include name="**/*.*" />
      </fileset>
      <fileset dir="${net.project}/${doc}">
        <include name="**/*.*" />
      </fileset>
      <fileset dir="${scripting.project}/${docs}">
        <include name="**/*.*" />
      </fileset>
      <fileset dir="${slp.project}/${docs}">
        <include name="**/*.*" />
      </fileset>
      <fileset dir="${ssh.project}/${doc}">
        <include name="**/*.*" />
      </fileset>
      <fileset dir="${utils.project}/${doc}">
        <include name="**/*.*" />
      </fileset>
    </copy>
  </target>

  <!-- =================================================================== -->
  <!-- src.zip                                                             -->
  <!-- =================================================================== -->
  <target name="srczip" depends="initdist"  description="Creates src.zip with Components sources">
    <zip destfile="${dist.dir}/src.zip" >
      <!--zipfileset dir="${cddlm.project}/${src}">
        <include name="**/**"/>
        <exclude name="**/*.dfPackage"/>
      </zipfileset-->
      <zipfileset dir="${emailer.project}/${src}">
        <include name="**/**"/>
        <exclude name="**/*.dfPackage"/>
      </zipfileset>
      <zipfileset dir="${jetty.project}/${src}">
        <include name="**/**"/>
        <exclude name="**/*.dfPackage"/>
      </zipfileset>
      <zipfileset dir="${logger.project}/${src}">
        <include name="**/**"/>
        <exclude name="**/*.dfPackage"/>
      </zipfileset>
      <zipfileset dir="${net.project}/${src}">
        <include name="**/**"/>
        <exclude name="**/*.dfPackage"/>
      </zipfileset>
      <zipfileset dir="${scripting.project}/${src}">
        <include name="**/**"/>
        <exclude name="**/*.dfPackage"/>
      </zipfileset>
      <zipfileset dir="${slp.project}/${src}">
        <include name="**/**"/>
        <exclude name="**/*.dfPackage"/>
      </zipfileset>
      <zipfileset dir="${ssh.project}/${src}">
        <include name="**/**"/>
        <exclude name="**/*.dfPackage"/>
      </zipfileset>
      <zipfileset dir="${utils.project}/${src}">
        <include name="**/**"/>
        <exclude name="**/*.dfPackage"/>
      </zipfileset>
    </zip>
  </target>

  <!-- =================================================================== -->
  <!--                                                                     -->
  <!-- =================================================================== -->
  <target name="copy-files">
	  <mkdir dir="${lib}"/>
	  <copy file="${root.dir}/common.xml" todir="."/>
	  <copy file="${root.dir}/extras/ant/build/dist/lib/smartfrog-tasks.jar" todir="${lib}"/>
   </target>
  <!-- =================================================================== -->
  <!--  Release                                                            -->
  <!-- =================================================================== -->
  <target name="release"  depends="clean, copy-files, dist, initdist, copylibs, copydocs, copycomponents, srczip, jdocs" description="Creates clean new release">
	  <copy tofile="${dist.dir}/build.xml" file="build.xml"/>
	  <copy tofile="${dist.dir}/buildRelease.xml" file="buildRelease.xml"/>
	  <copy tofile="${dist.dir}/common.xml" file="common.xml"/>
  </target>

  <target name="default" depends="dist"/>
</project>
