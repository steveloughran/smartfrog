/** (C) Copyright 1998-2005 Hewlett-Packard Development Company, LP

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

For more information: www.smartfrog.org

*/

#include "org/smartfrog/components.sf"
#include "org/smartfrog/examples/arithnet/netComponents.sf"
#include "org/smartfrog/services/jmx/components.sf"
#include "org/smartfrog/services/jmx/example/components.sf"

/**
 * Metadata for ModelMBean that manages the Generators
 */

WakeUp extends OperationInfo {
  name "wakeUp";
  impact "ACTION";
  description "Forces the generator send its current number to its output";
}

Number extends AttributeInfo {
  name "Number";
  type "java.lang.Integer";
//  getMethod "getNumber"; // Not neccessary if the getter is default one: "get" + Number
//  setMethod "setNumber"; // Not neccessary if the setter is default one: "set" + Number
  description "The current number to be send by the generator";
}

GeneratorModelMBean extends ModelMBean {
  properties:type "sf.jmx.modelmbean.arithmetic";

  attributes extends {
    number extends Number;
  }

  operations extends {
    wakeUp extends WakeUp;
    impact "ACTION";
  }
}


/**
 * Metadata for the ModelMBean that manages the StorePrinter
 */
Result extends Number {
  name "Result";
  writable false;
//  getMethod "getResult"; // Not neccessary if the getter is default one: "get" + Result
  description "The last result obtained in the arithmetic net";
}

EvaluationEnabled extends AttributeInfo {
  name "EvaluationEnabled";
  type "java.lang.Boolean";
  writable false;
// getMethod "isEvaluationEnabled";
}

DisableNextEvaluation extends OperationInfo {
  name "disableNextEvaluation";
  impact "ACTION";
}

PrinterModelMBean extends ModelMBean {
  properties:name "StorePrinter";
  properties:type "sf.jmx.modelmbean.arithmetic";

  attributes extends {
    result extends Result;
    evaluationEnabled extends EvaluationEnabled;
  }

  operations extends {
    disableNextEvaluation extends DisableNextEvaluation;
  }
}

/**
 * Metadata for ModelMBean that manages the ArithmeticManager
 */

LeftValue extends Number {
  name "LeftValue";
//  getMethod "getLeftValue"; // Not neccessary if the getter is default one: "get" + LeftValue
//  setMethod "setLeftValue"; // Not neccessary if the setter is default one: "set" + LeftValue
  description "The current value in the left generator";
}

RightValue extends Number {
  name "RightValue";
//  getMethod "getRightValue"; // Not neccessary if the getter is default one: "get" + RightValue
//  setMethod "setRightValue"; // Not neccessary if the setter is default one: "set" + RightValue
  description "The current value in the right generator";
}

SendLeftValue extends OperationInfo {
  name "sendLeftValue";
  impact "ACTION";
  description "Forces the left generator send its current number to its output";
}

SendRightValue extends OperationInfo {
  name "sendRightValue";
  impact "ACTION";
  description "Forces the right generator send its current number to its output";
}

SendBothValues extends OperationInfo {
  name "sendBothValues";
  impact "ACTION";
  description "Forces both generators send their current number to their outputs";
}

ManagerModelMBean extends ModelMBean {
  properties:name "ArithmeticManager";
  properties:type "sf.jmx.modelmbean.arithmetic";

  attributes extends {
    leftValue extends LeftValue;
    rightValue extends RightValue;
    result extends Result;
  }

  operations extends {
    sendLeftValue extends SendLeftValue;
    sendRightValue extends SendRightValue;
    sendBothValues extends SendBothValues;
  }
}

sfConfig extends Compound {

  /**
   * Component to register MBeans in a local JMX Agent
   */
  localMBeanDeployer extends MBeanDeployer {
    modelMBeans extends LAZY {
      leftGenerator extends GeneratorModelMBean {
        properties:name "LeftGenerator";
        managedResource LAZY ATTRIB manager:leftGenerator;
      }
      rightGenerator extends GeneratorModelMBean {
        properties:name "RightGenerator";
        managedResource LAZY ATTRIB manager:rightGenerator;
      }
      printer extends PrinterModelMBean {
        managedResource LAZY ATTRIB manager:printer;
      }
    }
  }

  /**
   * Component to register MBeans in a remote JMX Agent
   */
  remoteMBeanDeployer extends MBeanDeployer {
    sfAgentAddress "rmi://eb97201:3800/RMIConnectorServer"; // Register in a remote JMX Agent
    modelMBeans extends LAZY {
      manager extends ManagerModelMBean {
        managedResource LAZY ATTRIB manager;
      }
    }
  }

  manager extends ArithmeticManager {
    // Link managed values to those stored in dataStore. This attributes will be visualized through the ModelMBean created by the JMXIntrospector
    leftValue LAZY ATTRIB dataStore:leftValue;
    rightValue LAZY ATTRIB dataStore:rightValue;
    result LAZY ATTRIB dataStore:result;

    // Link generator outputs to operator inputs
    leftGenerator:outputs:value:to LAZY ATTRIB plus:inputs:lhs;
    rightGenerator:outputs:value:to LAZY ATTRIB negate:inputs:value;
  }

  /**
   *  Store references to the attributes to be monitored. This references are
   *  pointed, at the same time, by references in the ArithmeticManager introducing,
   *  therefore, a degree of indirection. It is done like that with didactic purposes.
   *  It has to extend Prim and not LAZY, otherwise we would get a ComponentDescription
   *  and the LAZY links would not be resolved.
   */
  dataStore extends SerializablePrim {
    sfExport false;
    // Link this values to the real one handled by generators and printer
    leftValue LAZY ATTRIB manager:leftGenerator:number;
    rightValue LAZY ATTRIB manager:rightGenerator:number;
    result LAZY ATTRIB manager:printer:result;
  }

  // Negate operator
  negate extends Negate {
    outputs:value:to LAZY ATTRIB plus:inputs:rhs;
  }

  // Addition operation
  plus extends Plus {
    outputs:value:to LAZY ATTRIB manager:printer:inputs:printVal;
  }

}
