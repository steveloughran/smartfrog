/** (C) Copyright 1998-2004 Hewlett-Packard Development Company, LP

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

For more information: www.smartfrog.org

*/

sfCodeBase "default";
// "Parent" type
DNSComponentData extends {

    // A type marker for a generic DNS component
    dnsType "dns.other";

    // Attributes common to all components
    sfCodeBase PARENT:ATTRIB sfCodeBase; 
}


// A collection of components.
DNSCollectionData extends DNSComponentData {

     // A type marker for this record.
    dnsType "dns.collection";
    
    // A class implementing this data object
    sfClass "org.smartfrog.services.dns.DNSCollectionImpl";
   

}


// Data to add a new hostname/IP pair to a zone (record of type A)
DNSBindingData extends DNSComponentData {

    // A type marker for this record.
    dnsType "dns.binding";
    
    // A class implementing this data object
    sfClass "org.smartfrog.services.dns.DNSBindingIPImpl";

    // A zone for this binding
    zoneName PARENT:ATTRIB zoneName;

    // A view for this binding
    viewName PARENT:ATTRIB viewName;

    // A type for the binding record
    recordType TBD; // Supported PTR, SRV, TXT
    
    // A TTL value for this record.
    ttl 3600;

    // Whether to replace all previous bindings during registration.
    replaceAll true;

}

// Data to create an address  binding, i.e, type  A
DNSBindingDataA extends DNSBindingData {

    // A type for the binding record
    recordType "A"; // Supported PTR, SRV, TXT (default A)

    /* A string describing the host name of the DNS binding. */
    hostName PARENT:ATTRIB hostName; // String 

    /* A string describing the IP address of the DNS binding. */
    address PARENT:ATTRIB address; // String

}

// Data to create a PTR binding
DNSBindingDataPTR extends DNSBindingDataA {

    // A type for the binding record
    recordType "PTR"; // Supported PTR, SRV, TXT (default A)

}


// Data to create a PTR binding for aliasing
DNSBindingDataAliasPTR extends DNSBindingDataPTR {

    /* A   string describing an alias name for that
       hostname (PTR record). */
    alias PARENT:ATTRIB alias; //String

    // we ignore the address, and use alias instead.
    address;  

    // we can have multiple registered instances of the service
    replaceAll false;

}

// Data to create a SRV binding
DNSBindingDataSRV extends DNSBindingData {

    // A type for the binding record
    recordType "SRV"; // Supported PTR, SRV, TXT (default A)
 
    /* A name for the service described in the SRV record. */
    serviceName PARENT:ATTRIB serviceName; //String

    /* A string describing the host  name of the service. */
    hostName PARENT:ATTRIB hostName; // String 

    /* A port number for the service in the SRV record. */
    port PARENT:ATTRIB port; //int
    
    /* A priority number for the server (lower better). */
    priority 0; //int

    /* A proportional random factor for equal priority selection (0-65535).*/
    weight 65535;

}

// Data to create a TXT binding
DNSBindingDataTXT extends DNSBindingData {

    // A type for the binding record
    recordType "TXT"; // Supported PTR, SRV, TXT (default A)
    
    /* A name for this record. */
    name TBD; //String

    /* A collection of attributes to be included in the record. */
    attributes extends LAZY {
  
    }

}


// Info to configure a zone
DNSZoneData extends DNSComponentData {

    // A type marker for this record.
    dnsType "dns.zone";

    // A class implementing this data object
    sfClass "org.smartfrog.services.dns.DNSZoneImpl";
    
    // An absolute name that identifies this view.
    zoneName PARENT:ATTRIB zoneName;

    // The name of the view that contains this zone.
    viewName PARENT:ATTRIB viewName;

    /* The host name that will appear in the NS records as 
       master of the zones.  -OPTIONAL- we reuse the one defined
       in DNSData */
    // nameServerHostName PARENT:ATTRIB nameServerHostName;
        
    /* Whether we allow dynamic updates of this zone. */
    allowUpdate true; 

    /* Whether this zone is forward rather than master. */
    isForwarding false; // boolean 

    /* The ip addresses of the forwarders if isForwarding=true.
     -OPTIONAL- */
    //forwarders ["127.0.0.1"]; // optional vector of strings

    // Whether it is a reverse address look-up record
    isReverse false;

    // whether this zone should be the default zone for its view.
    setAsDefaultZone false;



    /* Standard SOA record time constraints. */
    refresh 28800;
    retry 7200;
    expire 604800;
    ttl 86400;

}


// info to configure a view
DNSViewData extends DNSComponentData {

    // A type marker for this record.
    dnsType "dns.view";
    
    // A class implementing this data object
    sfClass "org.smartfrog.services.dns.DNSViewImpl";

    /* A recommended IP address to contact this view for dynamic updates.
       It should be part of the viewInterfacesAddress. */
    viewAddress PARENT:ATTRIB viewAddress;

    /* A name that identifies this view. A useful convention 
        concatenates interface IP addresses separated by "-". */
    viewName PARENT:ATTRIB viewName; //String

     /* A vector of strings of ip addressess linked to network
       interfaces associated to this view. */
    // string[], i.e.,  ["127.0.0.1"]
    viewInterfacesAddress PARENT:ATTRIB viewInterfacesAddress;

    // whether this view should be the default one.
    setAsDefaultView false;

    /* Where to forward queries that we cannot resolve locally.-OPTIONAL- */
    //forwarders ["127.0.0.1"]; //String[]

}


/* Global options for the dns daemon. */
DNSOptionsData extends DNSComponentData {


    // A type marker for this record.
    dnsType "dns.options";

    // A class implementing this data object
    sfClass "org.smartfrog.services.dns.DNSOptionsImpl";

    // Directory where all the config files are.
    configDir "/usr/tmp/named"; //String

    /* Where to forward queries that we cannot resolve locally.-OPTIONAL- */
    //forwarders ["127.0.0.1"]; //String[]

    /* Which interfaces to listen on initially (updated dynamically when new
       views are created). */
    //listen-on ["127.0.0.1"]; //String[]

    /* Extra config info that we just cut-and-paste directly. */
    //opaque of type DNSOpaqueData (OPTIONAL)
}

/* A marker to add info to the config file (options) without 
   hard-wire knowledge of what it means (i.e., add comments) */
DNSOpaqueData extends DNSComponentData {

    // A type marker for this record.
    dnsType "dns.opaque";

    // A class implementing this data object
    sfClass "org.smartfrog.services.dns.DNSOpaqueImpl";

    // A vector of strings to be inserted, the attribute part is ignored
    // __foo ["forward only;"];

}



/* A top level dns data holder. */
DNSData extends DNSComponentData {

    // A type marker for this record.
    dnsType "dns.data";

    // A class implementing this data object
    sfClass "org.smartfrog.services.dns.DNSDataImpl";

    /* A directory where all the  (live) config info should be. */
    configDir PARENT:ATTRIB configDir;

    /* The host name that will appear in the NS records as 
       master of the zones. */
    nameServerHostName PARENT:ATTRIB nameServerHostName;
 
    /* Global options shared by all views. */ 
    options extends DNSOptionsData;
  
}
