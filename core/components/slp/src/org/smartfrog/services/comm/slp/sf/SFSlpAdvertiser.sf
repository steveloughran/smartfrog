/*
 Service Location Protocol - SmartFrog components.
 Copyright (C) 2004 Glenn Hisdal <ghisdal(a)c2i.net>
 
 This library is free software; you can redistribute it and/or
 modify it under the terms of the GNU Lesser General Public
 License as published by the Free Software Foundation; either
 version 2.1 of the License, or (at your option) any later version.
 
 This library is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 Lesser General Public License for more details.
 
 You should have received a copy of the GNU Lesser General Public
 License along with this library; if not, write to the Free Software
 Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 
 This library was originally developed by Glenn Hisdal at the 
 European Organisation for Nuclear Research (CERN) in Spring 2004. 
 The work was part of a master thesis project for the Norwegian 
 University of Science and Technology (NTNU).
 
 For more information: http://home.c2i.net/ghisdal/slp.html 
 */

#include "org/smartfrog/components.sf"
#include "org/smartfrog/services/comm/slp/sf/SFSlpConfiguration.sf"

SFSlpAdvertiser extends Prim {
    // implementation
    sfClass "org.smartfrog.services.comm.slp.SFSlpAdvertiserImpl";

      schema extends Schema {
        serviceType extends String;
        //Vector of service attributes
        serviceAttributes extends Vector;
        advertiseReference extends Boolean;
        serviceLifetime extends Integer;

      }


    // slp configuration
    slp_config_mc_max ATTRIB SFSlpConfiguration:slp_config_mc_max;
    slp_config_rnd_wait ATTRIB SFSlpConfiguration:slp_config_rnd_wait;
    slp_config_retry ATTRIB SFSlpConfiguration:slp_config_retry;
    slp_config_retry_max ATTRIB SFSlpConfiguration:slp_config_retry_max;
    slp_config_da_find ATTRIB SFSlpConfiguration:slp_config_da_find;
    slp_config_daAddresses ATTRIB SFSlpConfiguration:slp_config_daAddresses;
    slp_config_scope_list ATTRIB SFSlpConfiguration:slp_config_scope_list;
    slp_config_mtu ATTRIB SFSlpConfiguration:slp_config_mtu;
    slp_config_port ATTRIB SFSlpConfiguration:slp_config_port;
    slp_config_locale ATTRIB SFSlpConfiguration:slp_config_locale;
    slp_config_mc_addr ATTRIB SFSlpConfiguration:slp_config_mc_addr;
    slp_config_interface ATTRIB SFSlpConfiguration:slp_config_interface;
    slp_config_debug ATTRIB SFSlpConfiguration:slp_config_debug;
    slp_config_log_errors ATTRIB SFSlpConfiguration:slp_config_log_errors;
    slp_config_log_msg ATTRIB SFSlpConfiguration:slp_config_log_msg;
    slp_config_logfile ATTRIB SFSlpConfiguration:slp_config_logfile;
	  slp_config_sflog ATTRIB SFSlpConfiguration:slp_config_sflog;

    // service to advertise
    //serviceType ""; // e.g. service:http
    //toAdvertise ""; // the thing to advertise
    serviceLifetime -1; // a positive integer, or -1 to indicate a permanent lifetime
    serviceAttributes []; // Vector of service attributes
                            // example: [["s1a1", "s1a1v1", "s1a1v2"], ["s1a2", "s1a2v1"]];
                            
    advertiseReference false; 
}

