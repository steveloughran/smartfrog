/* (C) Copyright 2009 Hewlett-Packard Development Company, LP

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

For more information: www.smartfrog.org

*/

/**
 * This file defines a set of components that are driven by a shared cluster component, one that works from
 * the hadoop XML files
 */

#include "/org/smartfrog/services/hadoop/components/components.sf"
#include "/org/smartfrog/services/hadoop/examples/options.sf"


LightweightClusterConf extends DefaultHadoopConfiguration {
  fs.default.name FS.DEFAULT.NAME;
  mapred.job.tracker.handler.count HandlerThreads;
  tasktracker.http.threads ClientHandlerThreads;
  mapred.task.tracker.connect.timeout IPC_CONNECT_TIMEOUT;
  dfs.heartbeat.interval 1;
  dfs.datanode.handler.count ClientHandlerThreads;
  namenodeURL      NAME_NODE_URL;
  datanodeURL      DATA_NODE_URL ;
  hostaddress LOCALHOST;
  ANY_PORT "0";
  //dfs.hostname hostaddress;
  dfs.datanode.hostname hostaddress;
  dfs.datanode.port ANY_PORT;
  dfs.datanode.http.port ANY_PORT;
  dfs.datanode.https.port ANY_PORT;
  dfs.datanode.ipc.port ANY_PORT;

  dfs.blockreport.intervalMsec 10000;
  dfs.blockreport.initialDelay 0;
  dfs.namenode.startup NameNode:ACTION_FORMAT;
  dfs.permissions false;
  dfs.http.address namenodeURL;
  dfs.permissions false;
  mapred.job.tracker.hostname hostaddress;
  mapred.job.tracker.http.hostname hostaddress;
  mapred.job.tracker.http.port ANY_PORT;
  mapred.task.tracker.hostname hostaddress;
  mapred.task.tracker.http.port ANY_PORT;
}

/**
 * The cluster compound takes the conf and adds some temp directories
 */

ClusterCompound extends Compound {

  conf extends LightweightClusterConf;

  logDir extends TempDir {

  }

  dataDir extends TempDir {

  }

  nameDir extends TempDir {

  }
}


NameNodeClusterCompound extends ClusterCompound {
  description "A name node";



  namenode extends NameNodeWithCluster {
    cluster LAZY PARENT:conf;
    dataDir LAZY PARENT:dataDir;
    dataDirectories [dataDir];
    nameDirectory LAZY PARENT:nameDir;
    nameDirectories [nameDirectory];
    logDir LAZY PARENT:logDir;
    minWorkerCount 0;
  }
}

/**
 * Creates a namenode
 */
DataNodeClusterCompound extends NameNodeClusterCompound {
  description "A data node bound to a temporary directory";

  localDataDir extends TempDir {

  }

  datanode extends DataNodeWithCluster {
    cluster LAZY PARENT:conf;
    dataDirectories [LAZY localDataDir];
    logDir LAZY PARENT:logDir;
  }

}
