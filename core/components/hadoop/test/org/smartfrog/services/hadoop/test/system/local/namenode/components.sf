/* (C) Copyright 2008 Hewlett-Packard Development Company, LP

 This library is free software; you can redistribute it and/or
 modify it under the terms of the GNU Lesser General Public
 License as published by the Free Software Foundation; either
 version 2.1 of the License, or (at your option) any later version.

 This library is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General Public
 License along with this library; if not, write to the Free Software
 Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

 For more information: www.smartfrog.org

 */


#include "/org/smartfrog/services/hadoop/test/system/local/components.sf"

/**
 * Test the local name node
 */
testLocalNameNodeCompound extends ExpectDeploy {
  action extends LocalNameNodeCompound {
  }

  tests extends Sequence {
    namenodeLive extends CheckNameNodePort {
      cluster LAZY action:cluster;
    }
    
    //there's a bit of delay needed here as the system is still initialising
    s extends Sleep;

  }

}


/**
 * Test the local name node
 */
testLocalNameNodeCompoundTerminates extends ExpectDeploy {
  action extends LocalNameNodeCompound {
  }

  Notests extends NamenodeShutdownSequence {
     namenode PARENT:action:cluster;
  }

  tests extends Sequence {

    namenode LAZY PARENT:action:cluster;

    namenodeLive extends CheckNameNodePort {
      cluster LAZY PARENT:namenode;
    }

//there's a bit of delay needed here as the system is still initialising
    s extends Sleep;

    //detach and terminate
    terminateNameNode extends Terminator {
      kill LAZY PARENT:namenode;
      detachFirst true;
    }

    //now assert that it is dead
    assertIPCClosed extends AssertNameNodeIPCClosed;
    assertHttpClosed extends AssertNameNodeHttpClosed;
  }


}

testNameNodeForked extends testLocalNameNodeCompound {
  action:sfProcessName "testNameNodeForkedProcess";
}



/**
 * Test the local name node
 */
testNameNodeHasNoWorkers extends ExpectDeployFailure {

  action extends LocalNameNodeCompound {

    wait extends WaitForWorkersLive {
      service LAZY namenode;
      minCount 1;
    }

  }

  tests extends Sequence {
    wait extends WaitForWorkersLive {
      service LAZY ATTRIB action:namenode;
      minCount 0;
    }

  }


}
