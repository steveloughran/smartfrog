/** (C) Copyright 1998-2007 Hewlett-Packard Development Company, LP

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

For more information: www.smartfrog.org

*/

#include "/org/smartfrog/services/jetty/components.sf";
#include "/org/smartfrog/services/filesystem/file.sf"
#include "/org/smartfrog/services/restlet/test/system/testwar/ports.sf"
#include "/org/smartfrog/services/restlet/test/system/components.sf"

/**
 * These are helper configurations derived from the jetty test suite; we're bringing up the testwar on the
 * system
 */


LocalJettyServer extends Compound {

    sfSyncTerminate true;
    port test.jetty.port.1;
    jettyhome test.jetty.home;

    //integrate logging with smartfrog
    logging extends IntegrateJettyLogging;

   /*
    this is the jetty server itself
    */
    server extends CoreJettyServer {

      jettyhome PARENT:jettyhome;

      port PARENT:port;

    }

    listener extends JettySocketConnector {
      server LAZY PARENT:server;
      port PARENT:port;
    }

}

JettyOnNIO extends LocalJettyServer {
  listener extends JettySelectChannelConnector {
    server LAZY PARENT:server;
  }
}


JettyHTTPS extends LocalJettyServer {
  port test.jetty.port.https;

  listener extends JettySSLSocketConnector {
    port PARENT:port;
    server LAZY PARENT:server;
  };
}



//the war file must be present
  TestWar extends FileMustExist {
    filename PROPERTY test.testwar.war;
  }


  TestWarServer extends LocalJettyServer {

    contextPath "/testwar";

    testwar extends TestWar;

    deployedWar extends WebApplication {
        server LAZY PARENT:server;
        filename LAZY testwar:absolutePath;
        contextPath PARENT:contextPath;
    }
  }

  waitForPage extends WaitForPage {
      fetchErrorText true;
      checkOnLiveness true;
      checkFrequency waitForInterval;
      timeout waitForTimeout;
  }

  waitForAnyHttpResponse extends waitForPage {
      maximumResponseCode 404;
      minimumResponseCode 200;
  }

  waitForOK extends waitForPage {
      maximumResponseCode HttpCodes:OK;
      minimumResponseCode maximumResponseCode;
  }


  WarTest extends TestCompound {
      testTimeout test.timeout;
      contextPath TestWarServer:contextPath;
      port TestWarServer:port;

      action extends TestWarServer {
          contextPath PARENT:contextPath;
          port PARENT:port;
      }


      tests extends Sequence {
        //this is the base liveness check
        wait extends waitForOK {
            port PARENT:PARENT:action:port;
            page PARENT:PARENT:action:contextPath;
        }

        operations extends Sequence {

        }

      }

  }


  testWarDeployed extends WarTest  {
    description "test that the root page of the WAR is deployed";


      tests:operations  extends Sequence {

        get extends GetRestResource {
          sfShouldTerminate true;
          host hostname;
          port PARENT:PARENT:PARENT:port;
          page PARENT:PARENT:PARENT:contextPath;
        }
      }

  }

  testErrorPageMinMax extends WarTest  {

    description ##test that error page of the WAR returns the error we want,
        and that the restlet client can be controlled to ask for different error codes#;

    tests:operations  extends Sequence {

        get extends GetRestResource {
          sfShouldTerminate true;
          port PARENT:ATTRIB port;
          page ((PARENT:ATTRIB contextPath) ++ "/error");
          errorCode 419;
          queries [["status",errorCode]];
          maximumResponseCode errorCode;
          minimumResponseCode errorCode;
        }
      }

  }

  testErrorPage extends WarTest  {

    description ##test that error page of the WAR returns the error we want,
        and that the restlet client can be controlled to ask for different error codes#;

    tests:operations  extends Sequence {

        get extends GetRestResource {
          sfShouldTerminate true;
          port PARENT:ATTRIB port;
          page ((PARENT:ATTRIB contextPath) ++ "/error");
          errorCode 419;
          queries [["status",errorCode]];
          maximumResponseCode errorCode;
          minimumResponseCode errorCode;
          startActions [[GET,errorCode,errorCode]];
          livenessActions [[HEAD,errorCode,errorCode]];
         }
      }

  }




