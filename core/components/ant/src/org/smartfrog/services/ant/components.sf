/** (C) Copyright Hewlett-Packard Development Company, LP

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

For more information: www.smartfrog.org

*/


#include "/org/smartfrog/components.sf"
#include "/org/smartfrog/predicates.sf"
#include "/org/smartfrog/services/ant/types.sf"
#include "/org/smartfrog/services/ant/tasks.sf"
#include "/org/smartfrog/services/filesystem/filesystemtemplate.sf"

Ant extends WorkflowPrim {


    antSchema extends Schema {
        //log level, one of "debug", "info", "error", "warn"
        logLevel extends String;

        //list of [name,value] pairs defining ant properties
        properties extends Vector;

        //basedir is the name of a directory to use
        basedir extends Optional;

        //path to task declarations
        tasksResource extends String;

        //path to type declarations
        typesResource extends String;

        //this is just here to say leave the runtime alone.
        //it is for lazy references to ant properties
        runtime extends OptionalCD;


    }

   /**
    * Mandatory attribute: the class for component description
    */
   sfClass "org.smartfrog.services.ant.AntImpl";

   LOG_INFO "info";
   LOG_DEBUG "debug";
   LOG_ERROR "error";
   LOG_WARN "warn"
   logLevel LOG_INFO;
   tasksResource "/org/apache/tools/ant/taskdefs/defaults.properties";
   typesResource "/org/apache/tools/ant/types/defaults.properties";
   asynch false;
   properties [];

}

/**
 * This component runs Ant on the build files in the target directories.
 * This build does not run ant.bat, ant.sh or ant.pl; it runs Ant in the nominated
 * SmartFrog process. To avoid memory leaks from Ant tasks (e.g. Javac,Ivy), run
 * the build in a new process.
 * 1. Every build is sequential.
 * 2. a failure halts the run with the BuildException mapped to a SmartFrogException.
 * 3. you can specify zero or more targets to run
 * 4. logging is routed directly to the SmartFrog log.
 * 5. execution is always asynchronous after the component starts.
 * 6. As there is no separate JVM, all options such as memory, xml parser, etc, are inherited from SmartFrog.
 */
AntBuild extends WorkflowPrim {


    antSchema extends Schema {
        //log level, one of "debug", "info", "error", "warn"
        //logLevel extends OptionalString;

        //list of [name,value] pairs defining ant properties
        properties extends Vector;

        //list of targets to run. If empty, the default target is executed
        targets extends Vector;


        //this is an optional base directory. If it exists, then
        //it is used as the base directory for the antfile, and for
        //any directories in the directories list.
        basedir extends OptionalFilenameType;

        //the name of an ant file to be resolved in every directory

        buildfile extends String;

        //the name of a generic ant file. Overrides the value of buildfile
        genericantfile extends FilenameType;


        //a list of directories. Will be resolved relative to basedir, when
        //relative resolution is required.
        directories extends OptionalFilenameList;

        //should we keep running targets in a single build if the first one fails
        keepGoingInSingleBuild extends Boolean;
        //should we keep going if a build file fails. The first exception will be
        //thrown on termination, but the other builds will still be executed
        keepGoingAcrossFiles extends Boolean;

        //how long to wait patiently for a shut down.
        shutdownTimeout extends Integer;

        //should we skip missing targets
        skipUnimplementedTargets extends Boolean;

    }

    sfClass "org.smartfrog.services.ant.AntBuildImpl";

    //defaults to build.xml
    buildfile "build.xml";
    keepGoingInSingleBuild false;
    keepGoingAcrossFiles false;
    shutdownTimeout 2000;
    skipUnimplementedTargets false;
    targets [];
    properties [];
}

/**
 * A build file that must exist at deployment time
 */
ExistingBuildFile extends FileMustExist {

}

/**
 * A build file that must be given a filename before deployment
 */
InlineBuildFile extends TextFile {
  encoding "UTF-8";
  text "<project></project>";
}



/**
 * A Temporary Build file is created on demand, deleted afterwards.
 */

TempBuildFile extends TempFileWithCleanup {
  prefix "build";
  suffix "xml";
  encoding BuildFile:encoding;
  text BuildFile:text;
}