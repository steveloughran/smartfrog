/* (C) Copyright 2009 Hewlett-Packard Development Company, LP

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.p

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

For more information: www.smartfrog.org

*/
#include "/org/smartfrog/services/cloudfarmer/test/components.sf"

MockCluster extends MockClusterFarmer {
    roles extends Compound {
    
      
      master extends ClusterRole {
        description "There can be only one master";
        min 1;
        max 1;
      }
      worker extends ClusterRole {
        description "There should be one worker, ideally more";
        min 1;
        recommendedMin 3;
      }
    }
    clusterLimit 20;
  }

ExpectFarmerDeploy extends ExpectDeploy {
    
  action MockCluster;

}

testFarmHasRoles extends ExpectFarmerDeploy {
  "Verify that the specific roles are available";

  tests extends Sequence {


    master extends FarmSupportsRoleWorkflow {
    //this is the farmer
      farmer LAZY action;
      role "master";
    }

    worker extends FarmSupportsRoleWorkflow {
    //this is the farmer
      farmer LAZY action;
      role "worker";
    }


 }
}

testFarmRemembersDeployments extends ExpectFarmerDeploy {
  description "Use FarmHasDeployedInstances to list and validate the instances";

  tests extends Sequence {


    master extends WorkflowFarmCustomer {
    //this is the farmer
      farmer LAZY action;
      role "master";
      min 1;
      expected 1;
      deleteOnTerminate false;
    }

    workers extends WorkflowFarmCustomer {
    //this is the farmer
      farmer LAZY action;
      role "worker";
      min 10;
      expected 10;
      deleteOnTerminate false;
    }

    checkClusterSize extends FarmHasDeployedInstancesWorkflow {
      farmer LAZY action;
      expected (workers:expected + master:expected);
    }


    checkWorkerCount extends FarmHasDeployedInstancesWorkflow {
      farmer LAZY action;
      role workers:role;
      min workers:expected;
    }

    checkMasterCount extends FarmHasDeployedInstancesWorkflow {
      farmer LAZY action;
      role master:role;
      
      min master:expected;
      max min;
    }


 }
}



testFarmCreate extends ExpectFarmerDeploy {
  description "create different nodes in a farm";

  tests extends Sequence {

    
    master extends WorkflowFarmCustomer {
    //this is the farmer
      farmer LAZY action;
      role "master";
      min 1;
      expected 1;
      deleteOnTerminate false;
    }

    worker extends WorkflowFarmCustomer {
    //this is the farmer
      farmer LAZY action;
      role "worker";
      min 10;
      expected 10;
    }
    
    worker2 extends WorkflowFarmCustomer {
    //this is the farmer
      farmer LAZY action;
      role "worker";
      min 10;
      expected 10;
    }
    
 }
}


testFarmCreateBounded extends ExpectFarmerDeploy {

  description "expect the size of nodes created to be limited to the cluster limit";
  tests extends Sequence {

    
    master extends WorkflowFarmCustomer {
    //this is the farmer
      farmer LAZY action;
      role "master";
      min 1;
      max 100;
      expected farmer:clusterLimit;
    }
 }
}

testFarmCreateNoRoom extends ExpectDeployFailure {

    description "create a mock cluster, and, in parallel, a farm customer that demands too many items"
      
    action extends Parallel {
     farmer MockCluster;
   
     master extends WorkflowFarmCustomer {
      farmer LAZY action:farmer;
      role "master";
      min 100;
      max 100;
     }
   }
}


testFarmCreateNoRole extends ExpectDeployFailure {

    description "create a mock cluster, and, in parallel, a farm customer that tries to create something of an unknown role"

    action extends Parallel {
     farmer MockCluster;

     master extends WorkflowFarmCustomer {
      farmer LAZY action:farmer;
      role "server";
      min 1;
      max 10;
     }
   }
}


testFarmCreateNegativeNumber extends ExpectDeployFailure {

    description "create a mock cluster, and, in parallel, a farm customer that demands less than 0 nodes"
      
    action extends Parallel {
     farmer MockCluster;
   
     master extends WorkflowFarmCustomer {
      farmer LAZY action:farmer;
      role "master";
      min -10;
      max 10;
     }
   }
}

testFarmLacksRole extends ExpectDeployFailure {

    description "create a mock cluster, and, in parallel, a test for a role that isn't supported"

    action extends Parallel {
     farmer MockCluster;

     master extends FarmSupportsRole {
      farmer LAZY action:farmer;
      role "server";
     }
   }
}
