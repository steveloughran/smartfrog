/* (C) Copyright 2009 Hewlett-Packard Development Company, LP

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

For more information: www.smartfrog.org

*/
#include "/org/smartfrog/components.sf"

/*
The farmer components aim to provide a standard way to remotely work with a farm of API-allocated
machines, real or virtual. 

A client application can talk to a (configured) farm and ask for more machines, get a list of
allocated machines. The API is meant to be infrastructure neutral, and it does that by
hiding most of the things you can ask for.

You can ask for a machine by "name", its up to the deployed component how that name is interpreted
and what you get. The client doesn't need to know the details, only that it can get
a "master" or "worker".

Once the machine is up, the client has to talk to it.
 
That is out of scope for the farmer, which just creates and destroys machines.

*/



AbstractFarmerClient extends WorkflowPrim {
  farmer TBD;
}

WorkflowFarmerClient extends AbstractFarmerClient {
  sfShouldTerminate true;
}

AbstractFarmerClientCondition extends AbstractFarmerClient {
  checkOnStartup true;
}

/**
 The farm customer was primarily written for testing, but it can do more
 # allocate a number of hosts in a specified role
 # fail if that number is not granted
 # look for specific hosts
 # delete the hosts on termination
 # set an attribute, hostnames, to the list of hostnames
 # set an attribute, clusternodes, to the list of ClusterNode instances.
 */
 
FarmCustomer extends AbstractFarmerClient {
  sfClass "org.smartfrog.services.cloudfarmer.client.components.FarmCustomerImpl";
  role "";
  deleteOnTerminate true;
  min 1;
  max min;
  //this is updated with the real count of how many were created
  deployed 0;
  //if >=0, declare exactly how many you expect
  expected -1;
  
  //list of hostnames you expect to get. The check is that every hostname listed  is found
  //-it is OK to have other hostnames too. 
  expectedHostnames [];
  
  
  //name of an application to deploy
  toDeployName "application"; 
  //this is a CD that can be set to whatever needs to be deployed. 
  //toDeploy ;
  
  //should a ping check the nodes
  pingChecksNodes true;
 
  //component to give the results
  target LAZY THIS;
  //prefix to get every host followed by a number (0, 1, ... 10, ...). No leading zeros.
  hostPrefix "host-";
  //after allocation, the target:hostnames attribute is set to the list of hosts
  //after allocation, the target:clusternodes attribute is set to the list of cluster node structures
  //hostnames
  
}

WorkflowFarmCustomer extends FarmCustomer {
  sfShouldTerminate true;
}

FarmSupportsRole extends AbstractFarmerClientCondition {
  sfClass "org.smartfrog.services.cloudfarmer.client.components.FarmSupportsRoleImpl";
  farmer TBD;
  role TBD;

}

FarmSupportsRoleCondition extends FarmSupportsRole {
  checkOnStartup false;
}

FarmSupportsRoleWorkflow extends FarmSupportsRole {
  checkOnStartup true;
  sfShouldTerminate true;
}

/**
 checks for minimum and maximum instance count
 If a role is set, it looks for that role; an empty string means no check

 1. The min and max values set a range which must be valid
 2. the expected value sets a number which much match exactly (if >= 0)
 3. the deployed attribute is set when evaluation takes place to the number of instances deployed

 */

FarmHasDeployedInstances extends AbstractFarmerClientCondition {
  sfClass "org.smartfrog.services.cloudfarmer.client.components.FarmHasDeployedInstances";
  //checks for a role
  role "";
  min 0;
  max -1;
  //if >=0, declare exactly how many you expect
  expected -1;

  //this is updated with the real count of how many were created
  //deployed 0;
}

FarmHasDeployedInstancesCondition extends FarmHasDeployedInstances {
  checkOnStartup false;
}

FarmHasDeployedInstancesWorkflow extends FarmHasDeployedInstances {
  sfShouldTerminate true;
}

/**
 * Check for the farm being available
 */
FarmIsAvailable extends AbstractFarmerClientCondition {
  sfClass "org.smartfrog.services.cloudfarmer.client.components.FarmIsAvailable"
}

/*
 * Availability test as a condition
 */
FarmIsAvailableCondition extends FarmIsAvailable {
  checkOnStartup false;
}

/**
 * Availability test as a workflow which will terminate on startup if met. If not met, it just hangs around,
 * does not make any serious attempts to exit
 */
FarmIsAvailableWorkflow extends FarmIsAvailable {
  sfShouldTerminate true;
}

/**
 * Wait for the farmer to declare itself available
 */
WaitForFarmer extends FailingWaitFor {
  farmer TBD;
  interval 500;
  timeout 20000;
  failureText "Farmer was not available on time";
  condition extends FarmIsAvailableCondition {
    farmer LAZY PARENT:farmer;
  }
}

/**
 * Deletes all resources belong to a specific user.
 * This is handy as part of a cleanup operation
 */
ReleaseAllFarmResources extends WorkflowFarmerClient {
  sfClass "org.smartfrog.services.cloudfarmer.client.components.ReleaseAllFarmResources";
}


/**
 * Deletes all resources belong to a specific user.
 * This is handy as part of a cleanup operation
 */
DeleteByRole extends WorkflowFarmerClient {
  role TBD; 
  sfClass "org.smartfrog.services.cloudfarmer.client.components.DeleteByRole";
}

DeleteAllNodes extends DeleteByRole {
  role "";
}

/**
 * Start the cluster if it is not live; idempotent
 */
StartCluster extends WorkflowFarmerClient {
  sfClass "org.smartfrog.services.cloudfarmer.client.components.StartCluster";
}


/**
 * Start the cluster if it is live; idempotent
 * After this call is made, other farmer operations may fail as there is no longer a live cluster
 */
StopCluster extends WorkflowFarmerClient {
  sfClass "org.smartfrog.services.cloudfarmer.client.components.StopCluster";
}

/**
 * Checks that the exact list of roles is supported. There are two API calls to get a list of roles
 * this can be set to use either
 */
FarmCheckRoles extends WorkflowFarmerClient {
  sfClass "org.smartfrog.services.cloudfarmer.client.components.FarmCheckRoles";
  useListClusterRoles false;
  //a list of roles
  roles TBD;
}