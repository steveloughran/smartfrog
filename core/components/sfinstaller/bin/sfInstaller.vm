\#include "org/smartfrog/components.sf"
\#include "org/smartfrog/services/net/ftp.sf"
\#include "org/smartfrog/services/net/telnet.sf"
\#include "org/smartfrog/services/ssh/scp.sf"
\#include "org/smartfrog/services/ssh/sshExec.sf"
\#include "org/smartfrog/sfcore/workflow/components.sf"
\#include "org/smartfrog/services/email/emailer.sf" 

sfConfig extends Parallel {
    asynchCreateChild true;
#foreach ($daemon in $allDaemons)
      $daemon.name extends $daemon.type {
	#if ($daemon.isFtp())
	a extends FTPClient {
            FTP:ftpHost "$daemon.host";
            FTP:username "$daemon.user";
            PasswordProvider:passwordFile "$daemon.password";
	    #if ($daemon.isLinux())
		#if ($securityOn)
            		FTP:localFiles ["${daemon.localfile1}", "$daemon.keyfile", "${daemon.secproperties}", "${daemon.smartfrogjar}", "${daemon.servicesjar", "${daemon.examplesjar}"];
            		FTP:remoteFiles ["${daemon.installdir}/release.tar.gz", "${daemon.installdir}/mykeys.st", "${daemon.installdir}/SFSecurity.properties", "${daemon.installdir}/smartfrog.jar", "${daemon.installdir}/sfServices.jar", "${daemon.installdir}/sfExamples.jar"];
		#else
			FTP:localFiles ["${daemon.localfile1}"];
            	        FTP:remoteFiles ["${daemon.installdir}/release.tar.gz"];
		#end
	    #elseif ($daemon.isWindows())
		#if ($securityOn)
		 	FTP:localFiles ["${daemon.localfile1}", "${daemon.localfile2}", "${daemon.localfile3}", "$daemon.keyfile", "${daemon.secproperties}", "${daemon.smartfrogjar}", "${daemon.servicesjar", "${daemon.examplesjar}"];
             	 	FTP:remoteFiles ["release.zip", "JavaService.exe", "start_sfdaemon.bat", "mykeys.st", "SFSecurity.properties", "smartfrog.jar", "sfServices.jar", "sfExamples.jar"];
		#else
			FTP:localFiles ["${daemon.localfile1}", "${daemon.localfile2}", "${daemon.localfile3}"];
             	 	FTP:remoteFiles ["release.zip", "JavaService.exe", "start_sfdaemon.bat"];
		#end
	    #end
            FTP:transferType "put";
            FTP:transferMode "binary";
        }
        #elseif ($daemon.isScp())
	a extends ScpSessionAuthPass {
            SCP:host "$daemon.host";
            SCP:username "$daemon.user";
            PasswordProvider:passwordFile "$daemon.password";
	    #if ($daemon.isLinux())
		#if ($securityOn)
            		SCP:localFiles ["${daemon.localfile1}", "$daemon.keyfile", "${daemon.secproperties}", "${daemon.smartfrogjar}", "${daemon.servicesjar", "${daemon.examplesjar}"];
            		SCP:remoteFiles ["${daemon.installdir}/release.tar.gz", "${daemon.installdir}/mykeys.st", "${daemon.installdir}/SFSecurity.properties", "${daemon.installdir}/smartfrog.jar", "${daemon.installdir}/sfServices.jar", "${daemon.installdir}/sfExamples.jar"];
		#else
            		SCP:localFiles ["${daemon.localfile1}"];
            		SCP:remoteFiles ["${daemon.installdir}/release.tar.gz"];
		#end
	    #end
            SCP:transferType "put";
        }
        #end
	#if ($daemon.isTelnet())
	b extends TelnetSession {
            Telnet:host "$daemon.host";
            Telnet:username "$daemon.user";
            PasswordProvider:passwordFile "$daemon.password";
            Telnet:logFile "${logDir}${daemon.name}.log";
	    Telnet:timeout 70000;
	    #if ($daemon.isLinux())            
            	Telnet:ostype "linux";
			#if ($securityOn)
				#if ($dynamicLoadingOn)
					Telnet:commands ["mkdir -p ${daemon.installdir}",
							"cd ${daemon.installdir}",
							 "gunzip -f release.tar.gz", 
				 			 "tar -xf release.tar",
				 			 "cd ${daemon.installdir}/${daemon.releasename}",
							 "mkdir dist/private/host1",
				 			 "mv ${daemon.installdir}/mykeys.st dist/private/host1/mykeys.st",
				 			 "mv ${daemon.installdir}/SFSecurity.properties dist/private/host1/SFSecurity.properties",
				 			 "mv ${daemon.installdir}/smartfrog.jar dist/signedLib/smartfrog.jar",
							 "mv ${daemon.installdir}/sfServices.jar dist/signedLib/sfServices.jar",
							 "mv ${daemon.installdir}/sfExamples.jar dist/signedLib/sfExamples.jar",
                        				 "export SFHOME=${daemon.installdir}/${daemon.releasename}/dist",
							 "export JAVA_HOME=${daemon.javahome}",
                        	 			 "export PATH=$JAVA_HOME/bin:$SFHOME/bin:$PATH",
 							 "export SFSECURITY_ON=ENABLED",
				 			 "export SFCODEBASE=\"-Dorg.smartfrog.codebase=#foreach ($jar in $httpJars)${jar} #end\"",
				 			 "cd ${daemon.installdir}/${daemon.releasename}",
                        	 			 "nohup sfDaemon &"];  
				#else 
					Telnet:commands ["mkdir -p ${daemon.installdir}",
							"cd ${daemon.installdir}",
							 "gunzip -f release.tar.gz", 
							 "tar -xf release.tar",
				 			 "cd "${daemon.installdir}/${daemon.releasename}",
				 			 "mkdir dist/private/host1",
				 			 "mv ${daemon.installdir}/mykeys.st dist/private/host1/mykeys.st",
				 			 "mv ${daemon.installdir}/SFSecurity.properties dist/private/host1/SFSecurity.properties",
				 			 "mv ${daemon.installdir}/smartfrog.jar dist/signedLib/smartfrog.jar",
				 			 "mv ${daemon.installdir}/sfServices.jar dist/signedLib/sfServices.jar",
				 			 "mv ${daemon.installdir}/sfExamples.jar dist/signedLib/sfExamples.jar",
                        				 "export SFHOME=${daemon.installdir}/${daemon.releasename}/dist",
							 "export JAVA_HOME=${daemon.javahome}",
                        	 			 "export PATH=$JAVA_HOME/bin:$SFHOME/bin:$PATH",
 				 		 	 "export SFSECURITY_ON=ENABLED",
						 	 "cd ${daemon.installdir}/${daemon.releasename}",
                        	 			 "nohup sfDaemon &"];  
				#end
			#else
				#if ($dynamicLoadingOn)
					Telnet:commands ["mkdir -p ${daemon.installdir}",
							 "cd ${daemon.installdir}",
							 "gunzip -f release.tar.gz", 
					 		 "tar -xf release.tar",
                        		 		 "export SFHOME=${daemon.installdir}/${daemon.releasename}/dist",
							 "export JAVA_HOME=${daemon.javahome}",
                        	 			 "export PATH=$JAVA_HOME/bin:$SFHOME/bin:$PATH",
					 		 "export SFCODEBASE=\"-Dorg.smartfrog.codebase=#foreach ($jar in $httpJars)${jar} #end\"",
							 "cd ${daemon.installdir}/${daemon.releasename}",
							 "nohup sfDaemon &"]; 
				#else
					Telnet:commands ["mkdir -p ${daemon.installdir}",
							 "cd ${daemon.installdir}",
							 "gunzip -f release.tar.gz", 
				        		 "tar -xf release.tar",
                        				 "export SFHOME=${daemon.installdir}/${daemon.releasename}/dist",
							 "export JAVA_HOME=${daemon.javahome}",
                        	 			 "export PATH=$JAVA_HOME/bin:$SFHOME/bin:$PATH",
							 "cd ${daemon.installdir}/${daemon.releasename}",
		                        		 "nohup sfDaemon &"];
				#end
			#end
	    #elseif ($daemon.isWindows())
            	Telnet:ostype "windows";
	        Telnet:shellPrompt "C:\\>";
			#if ($securityOn)
				#if ($dynamicLoadingOn)
					Telnet:commands ["md ${daemon.installdir}",
							"move C:\\release.zip ${daemon.installdir}\\release.zip",
							"move C:\\JavaService.exe ${daemon.installdir}\\JavaService.exe",
							"move C:\\start_sfdaemon.bat ${daemon.installdir}\\start_sfdaemon.bat",
							"move C:\\mykeys.st ${daemon.installdir}\\mykeys.st",
							"move C:\\SFSecurity.properties ${daemon.installdir}\\SFSecurity.properties",
							"move C:\\smartfrog.jar ${daemon.installdir}\\smartfrog.jar",
							"move C:\\sfServices.jar ${daemon.installdir}\\sfServices.jar",
							"move C:\\sfExamples.jar ${daemon.installdir}\\sfExamples.jar",
							"cd ${daemon.installdir}",
	                				 ("call start_sfdaemon.bat ${daemon.javahome} ${daemon.installdir}\\" ++ "${daemon.releasename}\\dist server -s -d \"#foreach ($jar in $httpJars)${jar} #end\"")];
				#else 
					Telnet:commands ["md ${daemon.installdir}",
							"move C:\\release.zip ${daemon.installdir}\\release.zip",
							"move C:\\JavaService.exe ${daemon.installdir}\\JavaService.exe",
							"move C:\\start_sfdaemon.bat ${daemon.installdir}\\start_sfdaemon.bat",
							"move C:\\mykeys.st ${daemon.installdir}\\mykeys.st",
							"move C:\\SFSecurity.properties ${daemon.installdir}\\SFSecurity.properties",
							"move C:\\smartfrog.jar ${daemon.installdir}\\smartfrog.jar",
							"move C:\\sfServices.jar ${daemon.installdir}\\sfServices.jar",
							"move C:\\sfExamples.jar ${daemon.installdir}\\sfExamples.jar",
							"cd ${daemon.installdir}",
	                				("call start_sfdaemon.bat ${daemon.javahome} ${daemon.installdir}\\" ++ "${daemon.releasename}\\dist server -s")]; 
				#end
			#else
				#if ($dynamicLoadingOn)
					Telnet:commands ["md ${daemon.installdir}",
							"move C:\\release.zip ${daemon.installdir}\\release.zip",
							"move C:\\JavaService.exe ${daemon.installdir}\\JavaService.exe",
							"move C:\\start_sfdaemon.bat ${daemon.installdir}\\start_sfdaemon.bat",
							"cd ${daemon.installdir}",
	                        			 ("call start_sfdaemon.bat ${daemon.javahome} ${daemon.installdir}\\" ++"${daemon.releasename}\\dist server -d \"#foreach ($jar in $httpJars)${jar} #end\"")];
				#else
					Telnet:commands ["md ${daemon.installdir}",
							"move C:\\release.zip ${daemon.installdir}\\release.zip",
							"move C:\\JavaService.exe ${daemon.installdir}\\JavaService.exe",
							"move C:\\start_sfdaemon.bat ${daemon.installdir}\\start_sfdaemon.bat",
							"cd ${daemon.installdir}",
	                				("call start_sfdaemon.bat ${daemon.javahome} ${daemon.installdir}\\" ++"${daemon.releasename}\\dist server")];
				#end
			#end
                
	    #end
	}
	#elseif ($daemon.isSsh())
	b extends SSHSessionAuthPass {
            SSHCmdExec:host "$daemon.host";
            SSHCmdExec:username "$daemon.user";
            PasswordProvider:passwordFile "$daemon.password";
            SSHCmdExec:logFile "${logDir}${daemon.name}.log";
	    SSHCmdExec:timeout 70000;
	    SSHCmdExec:failOnError false;
	    #if ($daemon.isLinux())            
			#if ($securityOn)
				#if ($dynamicLoadingOn)
					SSHCmdExec:commands ["mkdir -p ${daemon.installdir}",
							 "cd ${daemon.installdir}",
							 "gunzip -f release.tar.gz", 
				 			 "tar -xf release.tar",
				 			 "cd ${daemon.installdir}/${daemon.releasename}",
							 "mkdir dist/private/host1",
				 			 "mv ${daemon.installdir}/mykeys.st dist/private/host1/mykeys.st",
				 			 "mv ${daemon.installdir}/SFSecurity.properties dist/private/host1/SFSecurity.properties",
				 			 "mv ${daemon.installdir}/smartfrog.jar dist/signedLib/smartfrog.jar",
							 "mv ${daemon.installdir}/sfServices.jar dist/signedLib/sfServices.jar",
							 "mv ${daemon.installdir}/sfExamples.jar dist/signedLib/sfExamples.jar",
                        				 "export SFHOME=${daemon.installdir}/${daemon.releasename}/dist",
							 "export JAVA_HOME=${daemon.javahome}",
                        	 			 "export PATH=$JAVA_HOME/bin:$SFHOME/bin:$PATH",
 							 "export SFSECURITY_ON=ENABLED",
				 			 "export SFCODEBASE=-Dorg.smartfrog.codebase=\"#foreach ($jar in $httpJars)${jar} #end\"",
				 			 "cd ${daemon.installdir}/${daemon.releasename}",
                        	 			 "nohup sfDaemon &"];  
				#else 
					SSHCmdExec:commands ["mkdir -p ${daemon.installdir}",
							 "cd ${daemon.installdir}",
							 "gunzip -f release.tar.gz", 
							 "tar -xf release.tar",
				 			 "cd ${daemon.installdir}/${daemon.releasename}",
				 			 "mkdir dist/private/host1",
				 			 "mv ${daemon.installdir}/mykeys.st dist/private/host1/mykeys.st",
				 			 "mv ${daemon.installdir}/SFSecurity.properties dist/private/host1/SFSecurity.properties",
				 			 "mv ${daemon.installdir}/smartfrog.jar dist/signedLib/smartfrog.jar",
				 			 "mv ${daemon.installdir}/sfServices.jar dist/signedLib/sfServices.jar",
				 			 "mv ${daemon.installdir}/sfExamples.jar dist/signedLib/sfExamples.jar",
                        				 "export SFHOME=${daemon.installdir}/${daemon.releasename}/dist",
							 "export JAVA_HOME=${daemon.javahome}",
                        	 			 "export PATH=$JAVA_HOME/bin:$SFHOME/bin:$PATH",
 				 		 	 "export SFSECURITY_ON=ENABLED",
						 	 "cd ${daemon.installdir}/${daemon.releasename}",
                        	 			 "nohup sfDaemon &"];  
				#end
			#else
				#if ($dynamicLoadingOn)
					Jars "#foreach ($jar in $httpJars)${jar} #end";
					SSHCmdExec:commands ["mkdir -p ${daemon.installdir}",
								"cd ${daemon.installdir}",
							 "gunzip -f release.tar.gz", 
					 		 "tar -xf release.tar",
                        		 		 "export SFHOME=${daemon.installdir}/${daemon.releasename}/dist",
							 "export JAVA_HOME=${daemon.javahome}",
                        	 			 "export PATH=$JAVA_HOME/bin:$SFHOME/bin:$PATH",
					 		 "export SFCODEBASE=-Dorg.smartfrog.codebase=\"#foreach ($jar in $httpJars)${jar} #end\"",
							 "cd ${daemon.installdir}/${daemon.releasename}",
							 "nohup sfDaemon &"]; 
				#else
					SSHCmdExec:commands ["mkdir -p ${daemon.installdir}",
								"cd ${daemon.installdir}",
							 "gunzip -f release.tar.gz", 
				        		 "tar -xf release.tar",
                        				 "export SFHOME=${daemon.installdir}/${daemon.releasename}/dist",
							 "export JAVA_HOME=${daemon.javahome}",
                        	 			 "export PATH=$JAVA_HOME/bin:$SFHOME/bin:$PATH",
							 "cd ${daemon.installdir}/${daemon.releasename}",
	                        			 "nohup sfDaemon &"];
				#end
			#end
	    #end
	}
	#end
	c extends Emailer {
	    to "$daemon.emailto";
            from "$daemon.emailfrom";
            smtpHost "$daemon.emailserver";
            subject "SmartFrog Installer Message";
            message ("SmartFrog installation status  on node:" ++ "$daemon.host" ++ " :Successful.\n Please see attached log file for details.");
            runAsWorkFlowComponent true;
            attachments ["${logDir}${daemon.name}.log"];
        }
 }
 #end
}
