/* (C) Copyright 2008 Hewlett-Packard Development Company, LP

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

For more information: www.smartfrog.org

*/
#include "/org/smartfrog/services/assertions/components.sf"
#include "/org/smartfrog/services/filesystem/csvfiles/components.sf"


TestCSVFile extends TempFileWithCleanup {
  text ##"h1","h2","h3","h4"
"l1e1","",",","e4 "
" l2e1 ","l2 e2","l2'e3,","l2;e4"
#;
}


testCSVFileCreated extends ExpectDeploy {
  description "check the number of lines read";

  action extends Compound {

    sourceFile TestCSVFile;
    //the reader
    reader extends CSVFileToRead {
      filename LAZY sourceFile;
    }


  }

  tests extends Sequence {
    mustExist extends FileMustExist {
      filename LAZY action:sourceFile;
      sfShouldTerminate true;
    }

  }
}

testReadCSVFile extends testCSVFileCreated {
  description "check the number of lines read";

  tests extends Sequence {

    parser extends CSVFileToReadTester {
      source LAZY action:reader;
      minCount 3;
      maxCount 3;
    }
  }
}

TestLine1 ["h1","h2","h3","h4"];
TestLine2 ["l1e1","",",","e4 "];
TestLine3 [" l2e1 ","l2 e2","l2'e3,","l2;e4"];

testCheckLines extends testReadCSVFile {
  description "check the values of the lines";
  tests:parser:lines [
    TestLine1,
    TestLine2,
    TestLine3
  ];
}

testCheckHeader extends testReadCSVFile {
  description "say there is one header line, expect it to be skipped";
  action:reader:headerLines 1;
  tests:parser:minCount 2;
  tests:parser:lines [
    TestLine2,
    TestLine3
  ];
}

testCSVFileSelfChecking extends testReadCSVFile {
  action:reader:minCount 3;
  action:reader:maxCount 3;
}



testReadColumn extends testCSVFileCreated {
  description "read to a column and assert its value";


  tests extends Sequence {

    parser extends CSVColumnReader {
      source LAZY action:reader;
      column 1;
      target LAZY PARENT;
    }

    checkResultExists extends Assert {
      sfShouldTerminate true;
      reference LAZY PARENT;
      attribute "result";
      attributeVectorIndex 1;
      attributeVectorValue "h1";
    }

    checkResult2 extends checkResultExists {
      attributeVectorIndex 2;
      attributeVectorValue "l1e1";
    }
    checkResult2 extends checkResultExists {
      attributeVectorIndex 2;
      attributeVectorValue "l2e1";
    }


  }
}