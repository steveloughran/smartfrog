<?xml version="1.0" encoding="utf-8"?>
<project name="release" default="default"
    xmlns:ivy="antlib:fr.jayasoft.ivy.ant"
    xmlns:iz="http://www.izforge.com/">

  <description>
    This build file aggregates artifacts from other projects to cut a release
  </description>

  <!--we are a component -->
  <property name="is.component" value="true"/>
  <!--we disable Ivy to let us use a copy of izpack in the lib dir-->
  <!--<property name="ivy.enabled" value="true"/>-->

  <!-- override point -->
  <property file="build.properties"/>


  <property name="root.dir" location=".."/>


  <property name="jarfile.suffix" value="-resources"/>
  <property name="jarfile.extension" value="jar"/>
  <property name="project.name" value="sf-${ant.project.name}"/>
  <property name="artifact.name" value="${project.name}"/>
  <property name="jarfile.stub" value="${artifact.name}${jarfile.suffix}"/>
  <property name="trace.enabled" value="true"/>
  <property name="ivy.retrieve.pattern"
      value="[conf]/[artifact]-[revision].[ext]"/>

  <!-- Import common stuff -->
  <import file="../common.xml"/>


  <property name="root.dir" location="../.."/>
  <property name="antbuild.dir" location="${root.dir}/antbuild"/>
  <property name="xml.dir" location="${antbuild.dir}/xml"/>


  <!-- Import common stuff -->
<!--  <import file="${xml.dir}/systemtest.xml"/>
  <import file="${xml.dir}/gui.xml"/>
  <import file="${xml.dir}/ivy-mixin.xml"/>
  <import file="${xml.dir}/dist.xml"/>
  <import file="${xml.dir}/state.xml"/>
  -->

  <target name="init" depends="common.init">
    <property name="izpack.jar" location="${dist.bin.dir}/smartfrog-install-${smartfrog.version}.jar"/>
    <!--presetdef for a copy with expansion of all properties in scope-->
    <presetdef name="expandingcopy">
      <copy overwrite="true">
        <filterchain>
          <expandproperties/>
        </filterchain>
      </copy>
    </presetdef>
    <macrodef name="newdir">
      <attribute name="name"/>
      <attribute name="location"/>
      <sequential>
        <property name="@{name}" location="@{location}" />
        <mkdir dir="@{location}" />
      </sequential>
    </macrodef>
  </target>

  <target name="default" depends="published"/>

  <target name="published" depends="ivy-report,izpack"/>

  <!--
  <target name="declare-izpack" depends="ivy-resolve">
    <ivy:cachepath pathid="izpack.classpath" conf="izpack" />
    <taskdef name="izpack" classpathref="izpack.classpath"
        uri="http://www.izforge.com/"
        classname="com.izforge.izpack.ant.IzPackTask"/>
  </target>
  -->
  <target name="declare-izpack" depends="declare-classpaths">
    <taskdef name="izpack" classpathref="compile.classpath"
        uri="http://www.izforge.com/"
        classname="com.izforge.izpack.ant.IzPackTask"/>
  </target>

  <target name="prepare-resources" depends="init">
    <copy todir="${build.dir}/res">
      <fileset dir="src/res" includes="*"/>
    </copy>
  </target>

  <target name="prepare-executables" depends="ivy-retrieve">
  </target>


  <target name="expand-izpack" depends="init">
    <expandingcopy todir="${build.dir}" >
      <fileset file="izpack/smartfrog-install.xml"/>
    </expandingcopy>
    <property name="izpack.xml" location="${build.dir}/smartfrog-install.xml"/>
  </target>

  <target name="validate-izpack" depends="expand-izpack">
    <loadfile srcFile="izpack/doctype.txt" property="doctype.txt"/>
    <copy file="${izpack.xml}" tofile="build/izpack-dtd.xml" overwrite="true">
      <filterset begintoken="&lt;--@" endtoken="@--&gt;">
        <filter token="DOCTYPE-INSERT-POINT" value="${doctype.txt}"/>
      </filterset>
    </copy>
    <xmlvalidate file="build/izpack-dtd.xml" warn="false"/>
  </target>


  <target name="ready-to-izpack"
      depends="declare-izpack,prepare-resources,prepare-executables,packaged,expand-izpack"/>

  <target name="izpack" depends="ready-to-izpack">
    <iz:izpack input="${build.dir}/smartfrog-install.xml"
        output="${izpack.jar}"
        installerType="standard"
        basedir="${build.dir}"/>
  </target>

  <target name="ready-to-run" depends="izpack"/>

  <target name="run" depends="ready-to-run">
    <java jar="${izpack.jar}" fork="true">
      <sysproperty key="TRACE" value="${trace.enabled}"/>
    </java>
  </target>

  <target name="unzip" depends="izpack">
    <newdir name="unzip.dir" location="${build.dir}/unzip"/>
    <unzip src="${izpack.jar}" dest="${unzip.dir}"/>
  </target>

  <!-- hit the switches that declare which bits of the build-->
  <target name="init-automated-exec" depends="init">
    <property name="build.install.dir" location="${build.dir}/smartfrog"/>
    <property name="core.selected" value="true"/>
    <property name="minimal.selected" value="true"/>
    <property name="full.selected" value="true"/>
    <property name="ant.selected" value="true"/>
    <property name="anubis.selected" value="true"/>
    <property name="database.selected" value="true"/>
    <property name="jmx.selected" value="true"/>
    <property name="logging.selected" value="true"/>
    <property name="networking.selected" value="true"/>
    <property name="quartz.selected" value="true"/>
    <property name="scripting.selected" value="true"/>
    <property name="xunit.selected" value="true"/>
    <property name="junit.selected" value="true"/>
    <property name="www.selected" value="true"/>
    <property name="xml.selected" value="true"/>
    <property name="xmpp.selected" value="true"/>
    <!--
        <property name=".selected" value="true" />
    -->
  </target>

  <target name="copy-automated-template" depends="init-automated-exec">
    <property name="automated.xml" location="${dist.bin.dir}/automated.xml"/>
    <expandingcopy tofile="${automated.xml}" overwrite="true">
      <fileset file="izpack/auto-install-template.xml"/>
    </expandingcopy>
  </target>

  <target name="automated-exec" depends="ready-to-run,copy-automated-template">
    <java jar="${izpack.jar}" fork="true">
      <sysproperty key="TRACE" value="${trace.enabled}"/>
      <arg value="${automated.xml}"/>
    </java>
  </target>

  <target name="exec-version" depends="automated-exec">
    <condition property="script"
        value=".bat" else="">
      <os family="dos"/>
    </condition>
    <exec executable="${build.install.dir}/bin/sfVersion${script}">
      <env key="SFHOME" value="${build.install.dir}"/>
    </exec>
    <exec executable="${build.install.dir}/bin/sfDiag${script}">
      <env key="SFHOME" value="${build.install.dir}"/>
    </exec>
  </target>


  <!--
    Building an RPM is tricky. Here are some links that are useful
      http://www.rpm.org/
      http://www.rpm.org/max-rpm/
      http://www-128.ibm.com/developerworks/linux/library/l-rpm3.html?dwzone=linux
      http://www.ibm.com/developerworks/library/l-rpm1/
      http://www.ibm.com/developerworks/library/l-rpm2/

    JPackage and layout rules:
      http://www.jpackage.org/develdocs.php
      http://www.pathname.com/fhs/  rules for app/dir layout

    Presentations:
    http://www-uxsup.csx.cam.ac.uk/talks/rpmbuild/rpmbuild.pdf
    http://www.gurulabs.com/GURULABS-RPM-LAB/GURULABS-RPM-GUIDE-v1.0.PDF

  -->


  <target name="init-rpm" depends="init">
    <!--counter of rpm releases-->

    <condition property="has.rpm.tools">
      <os family="unix"/>
    </condition>


    <property name="rpm.metadata.dir" location="metadata/rpm"/>
    <loadproperties srcFile="${rpm.metadata.dir}/rpm.properties"/>

    <property name="rpm.release.version" value="2" />
    <property name="rpm.framework" value="Development/Tools" />    
    <newdir name="build.rpm.dir" location="${build.dir}/rpm" />


    <newdir name="build.rpm.metadata.dir"
        location="${build.rpm.dir}/metadata" />
    <newdir name="rpm.image.dir"
        location="${build.rpm.dir}/rpm" />
    <newdir name="rpm.SOURCES"
        location="${rpm.image.dir}/SOURCES" />
    <newdir name="rpm.SRPMS"
        location="${rpm.image.dir}/SRPMS" />
    <newdir name="rpm.SPECS"
        location="${rpm.image.dir}/SPECS" />
    <newdir name="rpm.BUILD"
        location="${rpm.image.dir}/BUILD" />
    <newdir name="rpm.RPMS"
        location="${rpm.image.dir}/RPMS" />
    <newdir name="rpm.noarch"
        location="${rpm.RPMS}/noarch" />
    <property name="smartfrog.rpmfiles.tar"
      location="${rpm.SOURCES}/smartfrog-${smartfrog.version}.tar"/>
    <property name="smartfrog.rpmfiles.tar.gz"
        location="${smartfrog.rpmfiles.tar}.gz"/>
    <property name="rpm.suffix"
        value="${smartfrog.version}-${rpm.release.version}.rpm" />
    <newdir name="dist.rpm.dir" location="${dist.dir}/rpm" />

    <property name="target.rpm"
        location="${dist.rpm.dir}/smartfrog-${rpm.suffix}" />
    <property name="demo.rpm"
        location="${dist.rpm.dir}/smartfrog-demo-${rpm.suffix}" />
    <property name="daemon.rpm"
        location="${dist.rpm.dir}/smartfrog-daemon-${rpm.suffix}" />
  </target>

  <target name="copy-rpm-specs" depends="init-rpm">
    <expandingcopy todir="${rpm.SPECS}" >
      <fileset dir="${rpm.metadata.dir}" includes="**/*.spec"/>
    </expandingcopy>
  </target>

  <!--
  this is a a wierd target as it patches the macros file rpmmacros with the
  location of the output. With ant-contrib's try/finally tasks we could
  copy and restore this -provided only one build per user was live.
  As it is, unless you set the rpm.skip.macros property, your
  ~/.rpmmacros file gets trashed by Ant.

  Notes
   * the specfile attr is the name of the spec file under SPECS; it is not a full path to the file
   * - is not allowed in the version number
  -->
  <target name="rpmmacros" unless="rpm.skip.macros" depends="init-rpm">
    <echo file="${user.home}/.rpmmacros" >
#GENERATED by rpmmacros task in ${basedir} 
%_topdir ${build.rpm.dir}
    </echo>
  </target>



  <target name="ready-to-rpm" depends="copy-rpm-specs,prepare-binary-rpm"/>

  <target name="rpm" depends="ready-to-rpm"
      if="has.rpm.tools"
      description="create an RPM file of the core smartfrog libraries">
    <rpm
        specFile="smartfrog.spec"
        topDir="${rpm.image.dir}"
        cleanBuildDir="true"
        failOnError="true"/>
    <copy todir="${dist.rpm.dir}">
      <fileset dir="${rpm.noarch}" includes="*.rpm" />
    </copy>
  </target>

  <target name="expand-core" depends="init-rpm,ivy-retrieve">
    <newdir name="core.install.dir"
      location="${build.rpm.dir}/root/${rpm.install.dir}" />
    <unzip src="${ivy.lib.dir}/package-core/sf-core-install-${smartfrog.version}.zip"
      dest="${core.install.dir}" />
  </target>
  
  <target name="prepare-binary-rpm" depends="expand-core" >
    <expandingcopy todir="${build.rpm.dir}/root/" >
      <fileset dir="scripts" includes="**/*" />
    </expandingcopy>
    <sf-tar destfile="${smartfrog.rpmfiles.tar}" >
      <fileset dir="${build.rpm.dir}/root/" includes="**/*" />
    </sf-tar>
    <gzip src="${smartfrog.rpmfiles.tar}" destfile="${smartfrog.rpmfiles.tar.gz}" />
  </target>


  <target name="ready-to-package-maven-artifacts" depends="init-maven-artifacts"/>

  <target name="init-maven-artifacts" depends="m2-init">
    <property name="maven.zip"
        location="${dist.dir}/smartfrog-maven-artifacts-${smartfrog.version}.zip" />
    <property name="maven.zip.sha1" location="${maven.zip}.sha1" />
  </target>

  <target name="package-maven-artifacts" depends="ready-to-package-maven-artifacts">
    <zip destfile="${maven.zip}" duplicate="fail">
      <zipfileset prefix="org/smartfrog" dir="${m2.publish.repository}/org/smartfrog/">
        <include name="smartfrog/${smartfrog.version}/*" />
        <include name="sfExamples/${smartfrog.version}/*" />
        <include name="sfServices/${smartfrog.version}/*" />
        <include name="sf-tasks/${smartfrog.version}/*" />
        <include name="sf-testharness/${smartfrog.version}/*" />
        
        <include name="sf-ant/${smartfrog.version}/*" />
        <include name="sf-anubis/${smartfrog.version}/*" />
        <include name="sf-database/${smartfrog.version}/*" />
        <include name="sf-dns/${smartfrog.version}/*" />
        <include name="sf-emailer/${smartfrog.version}/*" />
        <include name="sf-jmx/${smartfrog.version}/*" />
        <include name="sf-loggingservices/${smartfrog.version}/*" />
        <include name="sf-quartz/${smartfrog.version}/*" />
        <include name="sf-net/${smartfrog.version}/*" />
        <include name="sf-scripting/${smartfrog.version}/*" />
        <include name="sf-ssh/${smartfrog.version}/*" />
        <include name="sf-xml/${smartfrog.version}/*" />
        <include name="sf-xunit/${smartfrog.version}/*" />
          <include name="sf-junit/${smartfrog.version}/*" />
        <include name="sf-www/${smartfrog.version}/*" />
          <include name="sf-tomcat/${smartfrog.version}/*" />
          <include name="sf-jetty/${smartfrog.version}/*" />
          <include name="sf-xmpp/${smartfrog.version}/*" />
      </zipfileset>

    </zip>
  </target>


  <target name="expand-maven-artifacts" depends="package-maven-artifacts" >
    <property name="expanded.maven.dir" location="${build.dir}/m2/repository" />
    <mkdir dir="${expanded.maven.dir}" />
    <unzip src="${maven.zip}" dest="${expanded.maven.dir}"/>
    <echo>Maven artifacts expanded into ${expanded.maven.dir}</echo>
  </target>

  <target name="maven-artifacts" depends="expand-maven-artifacts" />


  <target name="dist" depends="common.dist,maven-artifacts,rpm,izpack" />
</project>