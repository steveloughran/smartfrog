<?xml version="1.0" ?>
<installation version="1.0">
  <info>
    <appname>SmartFrog</appname>
    <appsubpath>hp/smartfrog</appsubpath>
    <appversion>3.11.000.beta</appversion>
    <authors>
      <author name="SmartFrog Developers" email="smartfrog-developer@lists.sourceforge.net"/>
    </authors>
    <url>http://smartfrog.org/</url>
    <javaversion>1.4</javaversion>
  </info>
  <guiprefs height="600" resizable="yes" width="800">
  </guiprefs>

  <!--
      * $INSTALL_PATH : the installation path on the target system, as chosen by the user
    * $APPLICATIONS_DEFAULT_ROOT : the default path for applications
    * $JAVA_HOME : the JavaTM virtual machine home path
    * $CLASS_PATH : the Class Path used mainly for Java Applications
    * $USER_HOME : the user's home directory path
    * $USER_name : the user name
    * $APP_name : the application name
    * $APP_URL : the application URL
    * $APP_VER : the application version
    * $ISO3_LANG : the ISO3 language code of the selected langpack.
    * $IP_ADDRESS : the IP Address of the local machine.
    * $HOST_NAME : the HostName of the local machine.
    * $FILE_SEPARATOR : the file separator on the installation system
    * $DesktopShortcutCheckboxEnabled : When set to true, it automatically
    checks the "Create Desktop Shortcuts" button.
    To see how to use it, go to The Variables Element <variables> Be careful this variable is case sensitve !
    * $InstallerFrame.logfilePath : The path to the install log.
    This file contains the paths of all installed files.
    If set to "default" then the "$INSTALL_PATH/Uninstaller/install.log" path will be used.
    If this variable is not set, no install.log will be created.

    Environment variables can be accessed via the syntax ${ENV[variable]}.
    The curly braces are mandatory. Note that variable names are case-sensitive and usually in UPPER CASE.
  -->

  <variables>
    <variable name="VERSION" value="3.11.000.beta"/>
    <variable name="YEAR" value="2007"/>
    <variable name="InstallerFrame.logfilePath" value="default"/>
    <!-- This automatically checks the "Create Desktop Shortcuts" button. Default value is "False". -->
    <variable name="$DesktopShortcutCheckboxEnabled" value="false"/>
  </variables>


  <locale>
    <langpack iso3="eng"/>
  </locale>
  <resources>
    <resources>
      <res id="HtmlInfoPanel.info" src="res/info.html" parse="yes" type="xml"/>
      <res id="HTMLLicencePanel.licence" src="res/licence.html" parse="yes" type="xml"/>
    </resources>
  </resources>
  <panels>
    <panel classname="HelloPanel"/>
    <panel classname="HTMLInfoPanel"/>
    <!-- see res/HTMLLicencePanel.licence -->
    <panel classname="HTMLLicencePanel"/>
    <panel classname="PacksPanel"/>
    <panel classname="TargetPanel"/>
<!--    <panel classname="DataCheckPanel"/>-->
    <panel classname="InstallPanel"/>
    <panel classname="SummaryPanel"/>
    <panel classname="FinishPanel"/>
  </panels>

  <packs>
    
    <pack name="Core" required="yes">
      <description>SmartFrog core files.
        This includes the JAR files needed to run SmartFrog, and the batch files and shell scripts
        that start SmartFrog. It also includes the Ant tasks needed to invoke SmartFrog from a build.
      </description>
      <fileset dir="package-core" targetdir="$INSTALL_PATH"
          includes="**/*"/>
    </pack>

    <pack name="Examples" required="no" preselected="yes">
      <description>
        These are the example files that come with SmartFrog, showing how to use
        SmartFrog to deploy complex systems.
      </description>
      <fileset dir="package-examples" targetdir="$INSTALL_PATH"
          includes="**/*"/>
    </pack>

    <pack name="package-ant" required="no" >
      <description>
        This package contains the JAR file sf-ant.jar, which contains
        components that can run Ant tasks during deployment.
        The package also contains the Ant JAR files, which are
        licensed under the Apache Software Foundation License, version
        2.0.
      </description>
      <fileset dir="package-ant" targetdir="$INSTALL_PATH"
          includes="**/*"/>
    </pack>
<!--    <pack name="package-anubis" required="no">
      <description>
        Anubis is a tuple-space like system for partition-aware
        messaging between components, which can be used to build
        fault-tolerant systems.
      </description>
      <fileset dir="package-anubis" targetdir="$INSTALL_PATH"
          includes="**/*"/>
    </pack>-->
<!--
    <pack name="package-database" required="no">
      <description>
        The sf-database JAR contains the components needed to talk to a database
        during deployment, or when terminating a deployment. It has special component templates.
        to start and administer MySQL.
      </description>
      <fileset dir="package-database" targetdir="$INSTALL_PATH"
          includes="**/*"/>
    </pack>
-->
<!--
    <pack name="package-jmx" required="no">
      <description>
        The sf-jmx package can integrate JMX MBeans with SmartFrog, and
        export SmartFrog components as MBeans.
      </description>
      <fileset dir="package-jmx" targetdir="$INSTALL_PATH"
          includes="**/*"/>
    </pack>
-->

    <pack name="package-logging" required="no" preselected="yes">
      <description>package-logging</description>
      <fileset dir="package-logging" targetdir="$INSTALL_PATH"
          includes="**/*"/>
    </pack>

<!--
    <pack name="package-networking" required="no">
      <description>package-networking</description>
      <fileset dir="package-networking" targetdir="$INSTALL_PATH"
          includes="**/*"/>
    </pack>
    <pack name="package-scheduling" required="no">
      <description>Scheduling.
      Contains the Quartz library and a component for scheduling work.</description>
      <fileset dir="package-scheduling" targetdir="$INSTALL_PATH"
          includes="**/*"/>
    </pack>
    <pack name="package-scripting" required="no">
      <description>package-scripting</description>
      <fileset dir="package-scripting" targetdir="$INSTALL_PATH"
          includes="**/*"/>
    </pack>
-->
<!--    <pack name="package-testing" required="no">
      <description>package-testing</description>
      <fileset dir="package-testing" targetdir="$INSTALL_PATH"
          includes="**/*"/>
      <depends packname="package-logging"/>
    </pack>-->
<!--
    <pack name="package-www" required="no">
      <description>WWW support.
      This package contains components to deploy web applications on different
        Java web servers, from jetty to JBoss. It also contains a LivenessPage
        component that can monitor the health of a remote site.
      </description>
      <fileset dir="package-www" targetdir="$INSTALL_PATH"
          includes="**/*"/>
    </pack>
    <pack name="package-xml" required="no">
      <description>XML support.
      This package contains Xom and components to create a XOM graph from
      a component description.</description>
      <fileset dir="package-xml" targetdir="$INSTALL_PATH"
          includes="**/*"/>
    </pack>
    <pack name="package-xmpp" required="no">
      <description>Jabber support: components to register with a Jabber server and
        relay notification methods. These can be used to communicate over long distances,
        or track the availability of remote systems.
      </description>
      <fileset dir="package-xmpp" targetdir="$INSTALL_PATH"
          includes="**/*"/>
    </pack>
-->
<!--    <pack name="package-extras" required="no">
      <description>package-extras</description>
      <fileset dir="package-extras" targetdir="$INSTALL_PATH"
          includes="**/*"/>
    </pack>
    <pack name="package-gui" required="no">
      <description>package-gui</description>
      <fileset dir="package-gui" targetdir="$INSTALL_PATH"
          includes="**/*"/>
    </pack>-->
  </packs>
</installation>