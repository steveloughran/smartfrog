#!/bin/bash
#
# smartfrogd:    Start/stop smartfrog services
#
# chkconfig:    35 25 90
# description:  The SmartFrog deployment daemon
#

# Startup script for the SmartFrog daemon
#
# processname: sfDaemon
# pidfile: /var/run/sfdaemon.pid

### BEGIN INIT INFO
# Provides:          smartfrogd
# Required-Start:    
# Required-Stop:     
# Should-Start:      $local_fs $remote_fs $network 
# Should-Stop:       $local_fs $remote_fs $network 
# Default-Start:     3 5
# Default-Stop:      0 1 2 4 6
# Short-Description: The smartfrog daemon
# Description:       Runs the SmartFrog deployment daemon
### END INIT INFO


# This script is copied with property expansion at build time, which can be 
# used to force in dynamic values. Because of this, use $ and braced {} strings
# carefully

# Source function library.
#. /etc/rc.d/init.d/functions

# Look for LSB and RHEL function scripts

if [ -f /lib/lsb/init-functions ]; then
  . /lib/lsb/init-functions
  STOP_SUPPORTED=0
  alias START_DAEMON=start_daemon
#  alias STOP_DAEMON=echo "ignoring stop daemon request"
  alias STATUS=MyStatus
  alias LOG_SUCCESS=log_success_msg
  alias LOG_FAILURE=log_failure_msg
  alias LOG_WARNING=log_warning_msg
elif [ -f /etc/init.d/functions ]; then
  . /etc/init.d/functions
  STOP_SUPPORTED=1
  #alias START_DAEMON=daemon
  alias START_DAEMON=start
  alias STOP_DAEMON=stop
  alias STATUS=status
  alias LOG_SUCCESS=success
  alias LOG_FAILURE=failure
  alias LOG_WARNING=passed
else
  echo "Error: your platform is not supported by $0" > /dev/stderr
  exit 1
fi

RETVAL=0

# Set Envrionment
if [ -f /etc/sysconfig/smartfrog ]; then
	. /etc/sysconfig/smartfrog
fi

# Add Smartfrog to the path
PATH="$${PATH-}:$${SFHOME}/bin"

# Export the Display Variable
export DISPLAY

ProgName="SmartFrog Daemon"
ProgDir="$SFHOME/bin"
ProgBin="sfDaemon"
ProgPing="sfPing"
Filename="smartfrogd"
LockFile="/var/lock/subsys/$ProgBin"
RunFile=/var/run/$ProgBin.pid
ProgStop="smartfrog -a rootProcess:TERMINATE:::localhost: -e -quietexit"
ProgLog="${rpm.log.dir}/$Filename.log"

##exit if the program is not there
if [ ! -f $ProgDir/$ProgBin ]; then
  echo "Error: $0 cannot find $ProgDir/$ProgBin" > /dev/stderr
	exit 5
fi

##exit if Java is not on the path
java -version >/dev/null
if [ $? -ne 0 ]; then
  echo "Error: $0 cannot find java. Either it is not installed or the PATH is incomplete" > /dev/stderr
	exit 6
fi

# Start routine is an idempotent startup operation
function start() {     

	# is it already running
	status $ProgBin >/dev/null 2>&1
	if [ $? -eq 0 ]; then
    return 0
	fi;

	echo -n "Starting $ProgName: "

	ulimit -S -c 0 >/dev/null 2>&1

	echo "" >> $ProgLog
	echo "---- Starting $ProgName -----" >> $ProgLog
	nohup $ProgDir/$ProgBin -headless >>$ProgLog  2>&1 &
	RETVAL=$?
	if [ $RETVAL -eq 0 ]; then
    $LOG_SUCCESS
    touch $LockFile
	else
    $LOG_FAILURE
    fi;
	echo
	return $RETVAL
}

#stop the program running by invoking the 
#predefined shutdown command
# Again, this is meant be idempotent.

function stop() {
	echo -n "Stopping $ProgName: "

	echo "" >> $ProgLog
	echo "---- Stopping $ProgName -----" >> $ProgLog
	$ProgDir/$ProgStop >>$ProgLog 2>&1
	
	RETVAL=$?
	[ $RETVAL -eq 0 ] && rm -f $LockFile $RunFile
	$LOG_SUCCESS
  RETVAL=0
	echo
	return $RETVAL
}

#check the status and return the LSB-standard exit codes
function status_check() {
#  echo -n "checking status of $ProgName: "
#  $STATUS $ProgBin 
#  RETVAL=$?
#	if [ $RETVAL -eq 0 ]; then
#    $ProgDir/sfPing localhost
#    RETVAL=$?
#	fi;
  $ProgDir/$ProgPing localhost
  RETVAL=$?
  #failure of the ping
	if [ $RETVAL -eq 0 ]; then
    return 0
  elif [ -x $RunFile ]; then
    #program is dead and /var/run pid file exists
    RETVAL=1
    return 1
  elif [ -x $LockFile ]; then
    #program is dead and /var/lock lock file exists
    RETVAL=2
    return 2
  else
    #assume ps is not running
    RETVAL=3
    return 3
  fi
}

#restart operation just does a stop and a start
function restart() {
  stop
	start
}

# See how we were called.
case "$1" in
  start)
    echo start
	  start
	;;
  stop)
    echo stop
  	stop
	;;
  status)
    echo status
    status_check
	  ;;
  restart)
    echo restart
  	restart
	  ;;
  reload)
    echo reload
	  restart
	  ;;
  force-reload)
    echo force-reload 
    restart
    ;;
  *)
	  echo $"Usage: $PROG {start|stop|restart|status|restart|reload|force-reload}"
    #invalid or excess argument(s)
	  RETVAL=2
esac

exit $RETVAL


