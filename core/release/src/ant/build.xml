<project name="rpmbuild" basedir="."
  default="default"
  xmlns:sec="http://security.smartfrog.org/">

  <!--
  (C) Copyright 2008 Hewlett-Packard Development Company, LP

   This library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   This library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

   For more information: www.smartfrog.org

  -->

  <description>
    This is a build file that is designed to be redistributed as part of a tar file,
    then executed to create a new RPM with signed artifacts.

    See http://wiki.smartfrog.org/wiki/display/sf/Signing+RPMs+for+secure+installations



  </description>

  <!--load an override file before anything else-->

  <property file="build.properties"/>
  <!--this is our parent directory-->
  <property name="parent.project.dir" location="../.."/>
  <property file="${parent.project.dir}/build.properties"/>

  <!--Load the properties files, fail if missing-->
  <loadproperties srcFile="rpmbuild.properties" />
  <loadproperties srcFile="rpm.properties"/>

  <property environment="env" />

  <!--load in a security properties file ; look in . and ~/.ant -->
  <property file="security.properties" />
  <property file="${parent.project.dir}/security.properties"/>
  <property file="${user.home}/.ant/security.properties"/>


  <target name="default" depends="rpm" />
  
  <!--
    Initialise everything. We assume the directories are all set up
  -->
  <target name="init">
    <property name="build.rpm.dir" location="${basedir}"/>
    <property name="rpm.build.dir" location="${basedir}"/>
    <!--the root of the rpm-->
    <property name="rpm.root.dir" location="${build.rpm.dir}/root"/>

    <property name="dist.dir" location="dist"/>
    <property name="dist.rpm.dir" location="${dist.dir}/rpm"/>
    <property name="dist.signed.rpm.dir" location="${dist.dir}/signedrpm"/>
    <property name="upload.dir" location="${dist.dir}/upload" />
    <mkdir dir="${dist.rpm.dir}" />
    <mkdir dir="${dist.signed.rpm.dir}" />
    <mkdir dir="${upload.dir}" />


    <!--the root of the filesystem-->
    <property name="rpm.root.dir" location="${build.rpm.dir}/root/"/>


    <!--the RPMs that get built up-->
    <property name="rpm.image.dir"
      location="${build.rpm.dir}/rpm"/>
    <property name="rpm.SOURCES"
      location="${rpm.image.dir}/SOURCES"/>
    <property name="rpm.SRPMS"
      location="${rpm.image.dir}/SRPMS"/>
    <property name="rpm.SPECS"
      location="${rpm.image.dir}/SPECS"/>
    <property name="rpm.BUILD"
      location="${rpm.image.dir}/BUILD"/>
    <property name="rpm.RPMS"
      location="${rpm.image.dir}/RPMS"/>
    <property name="rpm.noarch"
      location="${rpm.RPMS}/noarch"/>


    <!--stuff in there-->
    <property name="core.install.dir"
      location="${rpm.root.dir}/${rpm.install.dir}"/>
    <property name="rpm.lib.dir"
      location="${core.install.dir}/lib"/>
    <property name="rpm.signed.lib.dir"
      location="${core.install.dir}/signedLib"/>

    <!--and now some file names-->

    <property name="smartfrog.rpmfiles.tar"
      location="${rpm.SOURCES}/smartfrog-${smartfrog.version}.tar"/>
    <property name="rpm.suffix"
      value="${smartfrog.version}-${rpm.release.version}.noarch.rpm"/>
    <property name="target.rpm.shortname"
      value="smartfrog-${rpm.suffix}"/>

    <property name="rpms.tar"
        location="${dist.rpm.dir}/smartfrog-rebuilt-rpms-${smartfrog.version}-${rpm.release.version}.tar" />
    <property name="rpms.tar.gz" location="${rpms.tar}.gz" />
    <property name="rpms.signed.tar"
      location="${dist.rpm.dir}/smartfrog-rebuilt-signed-rpms-${smartfrog.version}-${rpm.release.version}.tar" />
    <property name="rpms.signed.tar.gz" location="${rpms.signed.tar}.gz" />
  </target>

  <target name="clean" depends="init">
    <delete dir="${rpm.RPMS}" includes="**/*.rpm" />
    <delete file="${rpms.tar}" />
    <delete file="${smartfrog.rpmfiles.tar}" />
    <delete file="${rpms.tar.gz}" />
    <delete file="${rpms.signed.tar}" />
    <delete file="${rpms.signed.tar.gz}" />
  </target>

  <target name="rpm" depends="gzip-rpm" description="create the gzipped RPM"/>

  <target name="rpmmacros" depends="init">
    <echo file="${user.home}/.rpmmacros">
      #GENERATED by rpmmacros task in ${basedir}
      %_topdir ${basedir}
    </echo>
  </target>

  <target name="ready-to-rpm" depends="prepare-binary-rpm,rpmmacros" />


  <target name="ready-to-prepare-binary-rpm"
    depends="rpmmacros,signjars"/>


  <target name="build-rpm" depends="ready-to-rpm"
      description="create an RPM file of the core smartfrog libraries">
    <rpm
      specFile="smartfrog.spec"
      topDir="${rpm.image.dir}"
      cleanBuildDir="true"
      failOnError="true"/>
  </target>

  <target name="prepare-binary-rpm"
      depends="ready-to-prepare-binary-rpm">
    <echo>Creating the tar file from ${rpm.root.dir} into ${smartfrog.rpmfiles.tar} </echo>
    <exec executable="tar" failonerror="true"
        dir="${rpm.root.dir}">
      <arg value="cvvf"/>
      <arg file="${smartfrog.rpmfiles.tar}"/>
      <arg value="etc"/>
      <arg value="opt"/>
      <arg value="var"/>
      <arg value="usr"/>
    </exec>
    <!--
       <sf-tar destfile="${smartfrog.rpmfiles.tar}" >
         <fileset dir="${build.rpm.dir}/root/" includes="**/*" />
       </sf-tar>
    -->
    <!-- now we have a sanity check -->
    <loadresource property="homepage">
      <tarentry archive="${smartfrog.rpmfiles.tar}"
          name="etc/sysconfig/smartfrog"/>
    </loadresource>
  </target>


  <target name="gzip-rpm"
    depends="ready-to-gzip-rpm"
    description="create a gzip file containing the RPM files">
    <tar destfile="${rpms.tar}">
      <fileset dir="${dist.rpm.dir}">
        <include name="*.rpm"/>
      </fileset>
    </tar>
    <gzip destfile="${rpms.tar.gz}" src="${rpms.tar}"/>
  </target>

  <target name="ready-to-gzip-rpm" depends="build-rpm,copy-rpms">
    <condition property="can.create.signed.rpms">
      <and>
        <isset property="security.enabled"/>
      </and>
    </condition>
    <echo
      level="verbose">can.create.signed.rpms=${can.create.signed.rpms}
    </echo>
  </target>

  <!--copy rpms, but do not create them-->
  <target name="copy-rpms"
    depends="build-rpm">
    <copy todir="${dist.rpm.dir}">
      <fileset dir="${rpm.noarch}">
        <include name="*.rpm"/>
      </fileset>
    </copy>
    <copy todir="${upload.dir}" flatten="true">
      <fileset dir="${dist.rpm.dir}">
        <include name="*.rpm"/>
      </fileset>
    </copy>
  </target>


  <!-- ========================================================== -->
  <!-- Security corner -->
  <!-- ========================================================== -->

  <target name="assert-secure"
    description="halt the build if security is not turned on" unless="security.enabled">
    <fail>
      This is not a secure build. To make a secure build
      1. Create a CA and point the property security.ca.dir at the location.
         Currently this property is ${security.ca.dir}
    </fail>
  </target>

  <target name="init-security" depends="init">
    <!--this is a flag that turns security on or off. by default it is off-->
    <!--this should be overridden with the real value-->
    <property name="security.ca.password" value="pleasechange2" />
    <property name="security.self.key" value="self" />

    <!--this needs to be set up with the CA that I want-->
    <property name="smartfrog.install.dir" location="${env.SFHOME}" />
    <property name="security.private.dir" location="${smartfrog.install.dir}/private" />
    <property name="security.ca.dir" location="${security.private.dir}/ca" />
    <property name="security.code.keystore" location="${security.ca.dir}/codesigner.st"/>

    <property name="security.keystore.type" value="JCEKS"/>

    <fail>
      <condition>
        <not>
          <available file="${security.code.keystore}" />
        </not>
      </condition>
The file in the property security.code.keystore:
  ${security.code.keystore}
Does not exist.

Check that it exists. It may be the and the CA directory defined in the property security.ca.dir is missing:
  ${security.ca.dir}

To create a new CA, run the target initCA in the directory ${smartfrog.install.dir}

See http://wiki.smartfrog.org/wiki/display/sf/Signing+RPMs+for+secure+installations      
    </fail>

    <property name="security.uri" value="http://security.smartfrog.org/" />

    <!--the settins for our jar signings-->
    <presetdef name="signjar2" uri="${security.uri}">
      <signjar
        preservelastmodified="true"
        alias="${security.self.key}"
        keystore="${security.code.keystore}"
        storetype="${security.keystore.type}"
        storepass="${security.ca.password}"
        lazy="true"/>
    </presetdef>
  </target>


  <target name="ready-to-run-dist" depends="init">
    <presetdef name="dist">
      <ant inheritall="false" inheritrefs="false" dir="${core.install.dir}" />
    </presetdef>
  </target>


  <target name="create-new-daemon-keys" depends="ready-to-run-dist,init-security"
      description="Create a new set of daemon host keys ">
    <dist target="newDaemon">
      <property name="host.dir.suffix" value="" />
      <property name="CA.dir" location="security.ca.dir" />
    </dist>
  </target>

  <target name="ready-to-sign" depends="init,init-security" if="sign.jars"/>


  <target name="signjars" depends="ready-to-sign">
    <fail>
      <condition >
        <not>
          <available file="${security.code.keystore}" />
        </not>
      </condition>
Unable to sign JARs unless security.code.keystore is set to a keystore:
security.code.keystore=
${security.code.keystore}
    </fail>

    <sec:signjar2>
      <fileset dir="${rpm.lib.dir}"/>
    </sec:signjar2>
  </target>

</project>