<?xml version="1.0" ?> 
<project name="sftasks"
  xmlns:ac="antlib:net.sf.antcontrib"
  xmlns:sf="antlib:org.smartfrog.tools.ant"
  xmlns:m2="antlib:org.apache.maven.artifact.ant"
  >

  <import file="m2.xml" />

  <!-- Declare our maven2-driven libraries to smartfrog core and tasks (nothing else) -->
  <target name="smartfrog-tasks-classpath" 
    depends="core.load-version-info,m2.m2-tasks">
    <m2:dependencies pathID="smartfrog.tasks.classpath">
      <dependency groupID="org.smartfrog"
        artifactID="smartfrog"
        version="${smartfrog.version}"
        scope="compile"
        />  
      <dependency groupID="org.smartfrog"
        artifactID="sfServices"
        version="${smartfrog.version}"
        scope="compile"
        /> 
      <dependency groupID="org.smartfrog"
        artifactID="sf-tasks"
        version="${smartfrog.version}"
        scope="compile"
        />
    </m2:dependencies>
  </target>

  <target name="smartfrog-testharness-classpath" 
    depends="core.load-version-info,m2.m2-tasks">
    <m2:dependencies pathID="smartfrog.testharness-only.classpath">
      <dependency groupID="org.smartfrog"
        artifactID="sf-testharness"
        version="${smartfrog.version}"
        scope="test"
        />  
    </m2:dependencies>
    <m2-libraries pathID="smartfrog.testharness-junit.classpath">
      <dependency groupID="org.smartfrog"
        artifactID="sf-testharness"
        version="${smartfrog.version}"/>
      <dependency groupID="junit"
        artifactID="junit"
        version="${junit.version}"/>
    </m2-libraries>    
    <path id="smartfrog.testharness.classpath">
      <path refid="smartfrog.tasks.classpath"/>
      <path refid="smartfrog.testharness-junit.classpath"/>
    </path>
  </target>  
  
  <!-- ========================================================== -->
  <!-- probe for tasks and use them if they are not loaded already -->
  <!-- ========================================================== -->
  <target name="smartfrog-tasks" depends="sftasks.smartfrog-tasks-classpath"
    description="declare the classpath and imports for the smartfrog tasks">
    <property name="sf.antlib.uri" value="antlib:org.smartfrog.tools.ant" />
    <ac:if>
      <not>
        <typefound 
          uri="${sf.antlib.uri}" 
          name="startdaemon"/>
      </not>
      <ac:then>
        <typedef 
          uri="${sf.antlib.uri}"
          classpathref="smartfrog.tasks.classpath"
          onerror="failall"
      />
      </ac:then>
      <ac:else>
        <echo level="verbose">Tasks already found</echo>
      </ac:else>
    </ac:if>
    
  </target>  
  
  <!-- ========================================================== -->
  <!-- declare presets and macrodefs to enhance the tasks better 
    for our needs -->
  <!-- ========================================================== -->
  <target name="extended-smartfrog-tasks" 
      depends="sftasks.smartfrog-tasks">
      
   <presetdef name="daemonfound" uri="${sf.antlib.uri}">
      <condition >
        <socket port="${smartfrog.daemon.port}" server="localhost" />
      </condition>
    </presetdef>
    
    <!-- wait for 10 seconds for a daemon. Set maxwait to a different
    value for more or less time, timeoutproperty to the name of a property
    to set on failure -->
    <presetdef name="waitfordaemon" uri="${sf.antlib.uri}">
        <waitfor maxwait="10" maxwaitunit="second">
            <socket server="localhost" port="${smartfrog.daemon.port}"/>
        </waitfor>
    </presetdef>
      
    <presetdef name="startdaemon-debug" uri="${sf.antlib.uri}">
      <sf:startdaemon classpathref="run.classpath"
        logStackTraces="true" spawn="true">
          <!-- assertions are enabled -->
        <assertions enableSystemAssertions="true">
          <enable/>
        </assertions>
          <!-- load in a property file if it is present --> 
        <propertyfile file="${runtime.properties}" optional="true"/>
      </sf:startdaemon>
    </presetdef>
    
    <presetdef name="gui-debug" uri="${sf.antlib.uri}">
      <sf:gui classpathref="run.classpath"
        logStackTraces="true" spawn="true">
          <!-- assertions are enabled -->
        <assertions enableSystemAssertions="true">
          <enable/>
        </assertions>
          <!-- load in a property file if it is present --> 
        <propertyfile file="${runtime.properties}" optional="true"/>
      </sf:gui>
    </presetdef>
    
    <presetdef name="console-debug" uri="${sf.antlib.uri}">
      <sf:management-console classpathref="run.classpath"
        logStackTraces="true" >
          <!-- assertions are enabled -->
        <assertions enableSystemAssertions="true">
          <enable/>
        </assertions>
          <!-- load in a property file if it is present --> 
        <propertyfile file="${runtime.properties}" optional="true"/>
      </sf:management-console>
    </presetdef>      

  </target>
  

    
</project>
