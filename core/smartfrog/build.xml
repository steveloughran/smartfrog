<?xml version="1.0"?>

<!--
/** (C) Copyright 1998-2004 Hewlett-Packard Development Company, LP

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

For more information: www.smartfrog.org

*/
-->

<!DOCTYPE project [
     <!ENTITY security SYSTEM "private/buildSecurity.xml">
]>


<project name="SmartFrog" default="all" basedir=".">

<description>
Introduction
============
The build script for SmartFrog framework.
To run the build script ant must be installed
and ant executable should be in the system path.


A copy of JavaCC is needed if the language itself is changed.

Installing the build tools
==========================
Please go though the installation guide and install ant 1.5 or later.
Reference URL:http://ant.apache.org

For JavaCC, download it from https://javacc.dev.java.net/ and install the
relevant JAR files into the javacc subdirectory

</description>

  <!-- =================================================================== -->
  <!-- Initialization target                                               -->
  <!-- =================================================================== -->
  <target name="init">
    <tstamp/>
    <property name="Name.System" value="SmartFrog "/>
    <property name="Name.Company" value="(C) Copyright 1998-2005 Hewlett-Packard Development Company, LP"/>
    <property name="version" value="CORE"/>
    <!--property name="Version" value="3.04.019.beta"/-->
    <property name="year" value="2005"/>

    <echo level="verbose">
===================================================================
= ${Name.System} ${version}"
= ${Name.Company}
===================================================================

(${ant.version})
</echo>
    <available property="nice.task.present" classname="org.apache.tools.ant.taskdefs.Nice" />
  </target>

  <!-- =================================================================== -->
  <!-- Help on usage                                                       -->
  <!-- =================================================================== -->
  <target name="help" depends="init" description="Help">
    <echo message=""/>
    <echo message="-------------------------------------------------------------"/>
    <echo message="${Name.System} ${version} Build file"/>
    <echo message="-------------------------------------------------------------"/>
    <echo message="* General:  "/>
    <echo message="    build        --> recompiles and creates all packages"/>
    <echo message="    dist         --> prepares distribution package (Default)"/>
    <echo message="    compile      --> compiles the contributed source code"/>
    <echo message="    sfParseTest  --> runs sfParser for 'parsertargets' file"/>
    <echo message="    jdocs        --> generates the Java Docs API documentation"/>
    <echo message="    clean        --> restores the distribution to its clean state"/>
    <echo message="    release      --> clean, dist, jdocs"/>
    <echo message="    all          --> builds all the packages"/>
    <echo message="    cleanall     --> cleans all the packages"/>
    <echo message="* Security:  "/>
    <echo message="    initCA --> initializes a Certificate Authority"/>
    <echo message="    dummyInitCA --> initialise a dummyCA. Needed first time before any build"/>
    <echo message="    cleanCA     --> cleans the Certificate Authority"/>
    <echo message="    signJars    --> signs the jar files and copies from lib to signedLib"/>
    <echo message="   "/>
    <echo message="    help --> this help"/>
    <echo message="See the comments inside the build.xml file for more details."/>
    <echo message="-------------------------------------------------------------"/>
    <echo message=""/>
  </target>

  <!-- =================================================================== -->
  <!-- Initialization path (Libs needed for compiling)                     -->
  <!-- =================================================================== -->
  <path id="smartfrog.class.path">
      <pathelement path="${classpath};lib/log4j-1.2.8.jar"/>
  </path>

  <!-- =================================================================== -->
  <!-- Global properties                                                   -->
  <!-- =================================================================== -->
    <!-- override point -->
    <property file="build.properties" />
    <property environment="env" />

    <!-- Release Directories -->
    <property name="src" value="src"/>            <!-- where the source is -->
    <property name="src.dir" location="src"/>            <!-- where the source is -->
    <property name="build" location="build"/>        <!-- where the files for the jar file go -->
           <!-- where the files for the jar file go -->
    <property name="build.classes.dir" location="${build}"/>
    <property name="dist.dir" location="dist"/>         <!-- where the files to zip go -->
    <property name="releases.dir" location="releases"/> <!-- where the dated zips go, don't clean -->
    <property name="bin" value="bin"/>            <!-- where all the executables go -->
    <property name="lib" value="lib"/>            <!-- where all the jar files go -->
    <property name="signedLib" value="signedLib"/> <!-- dir to export jar files -->
    <property name="testCA" value="testCA"/>
     <!-- all protected files -->
    <property name="private" value="private"/>
    <property name="docs" value="docs"/>
    <property name="jdocs" value="${docs}/jdocs"/>
    <property name="SFjdocs" value="${docs}/SFjdocs"/>

    <property name="dist.lib.dir" location="${dist.dir}/${lib}"/>
    <property name="dist.bin.dir" location="${dist.dir}/${bin}"/>
    <property name="dist.src.dir" location="${dist.dir}/${src}"/>
    <property name="dist.docs.dir" location="${dist.dir}/${docs}"/>
    <property name="dist.private.dir" location="${dist.dir}/${private}"/>
    <property name="dist.signedLib.dir" location="${dist.dir}/${signedLib}"/>
    <property name="dist.testCA.dir" location="${dist.dir}/${testCA}"/>
    <property name="dist.jdocs.dir" location="${dist.dir}/${jdocs}"/>
    <property name="dist.SFjdocs.dir" location="${dist.dir}/${SFjdocs}"/>
    <property name="java.class.path" location="${dist.dir}/${SFjdocs}"/>

    <!--property name="redist" value="redist"/ -->

    <property name="examplesFiles" value="org/smartfrog/examples/**/*"/>
     <!-- a list of files for rmic -->
    <property name="rmitargets" value="${basedir}/rmitargets"/>
    <!-- assume the sun compiler -->
    <property name="rmic.compiler" value="sun" />

    <!-- Compile options for Smartfrog Release -->
    <property name="javac.debug.mode" value="on"/> <!-- turn on compile -g -->
    <property name="javac.debug.level" value="lines,vars,source" />
    <property name="javac.java.version" value="1.4" />
    <property name="build.compiler" value="modern" />
    <property name="javac.compiler" value="${build.compiler}" />

    <!-- override point for javacc -->
    <property name="javacc.dir" location="javacc"/>

    <!-- Security related files -->
    <property name="manifestName" value="${private}/sealManifest.mf"/>

<!-- Include here the security-related ant file -->
&security;
<!-- End of security-related ant file -->


  <!-- ================================================================== -->
  <!-- running Version.java to generate version information               -->
  <!-- ================================================================== -->
  <target name="generateversion" depends="init">
     <java classname="org.smartfrog.Version"
	 failonerror="true" fork="true"
	 outputproperty="Version">
	 <arg value="-b"/>
	 <classpath>
	     <fileset dir="${dist.lib.dir}">
        	 <include name="**/*.jar"/>
      	     </fileset>
     </classpath>
     </java>
     <!--property name="Version" value="${sfversion}"/-->
  </target> 
  
  <!-- =================================================================== -->
  <!--  Release                                                            -->
  <!-- =================================================================== -->
  <target name="release"  depends="clean, dist,jdocs" description="Creates clean new release">
  </target>

  <!-- =================================================================== -->
  <!--                                                                     -->
  <!-- =================================================================== -->
  <target name="initbuild"  depends="init">
    <mkdir dir="${build}"/>
    <mkdir dir="${build.classes.dir}"/>
  </target>

  <!-- =================================================================== -->
  <!--                                                                     -->
  <!-- =================================================================== -->
  <target name="initdist" depends="init">
    <mkdir dir="${dist.dir}"/>
    <mkdir dir="${dist.lib.dir}"/>
    <mkdir dir="${dist.bin.dir}"/>
    <mkdir dir="${dist.docs.dir}"/>
    <mkdir dir="${dist.testCA.dir}"/>
    <mkdir dir="${dist.private.dir}"/>
    <mkdir dir="${dist.signedLib.dir}"/>
    <mkdir dir="${dist.src.dir}"/>
  </target>

  <!-- =================================================================== -->
  <!-- FixCRLF for different platforms  only inside DIST!                  -->
  <!-- =================================================================== -->

  <target name="fixCRLF" depends="copybins" description="adapts CRLF for different OS">

  </target>

  <!-- =================================================================== -->
  <!--                                                                     -->
  <!-- =================================================================== -->
  <target name="initrelease" depends="init">
    <!-- Create the time stamp -->
    <tstamp/>
    <mkdir dir="${releases.dir}"/>
  </target>

  <!-- =================================================================== -->
  <!--                                                                     -->
  <!-- =================================================================== -->
  <target name="createParser" depends="init">
    <!-- Javacc the parser file -->
    <javacc target="${src.dir}/org/smartfrog/sfcore/languages/sf/DefaultParser.jj"
      javacchome="${javacc.dir}"/>
  </target>


  <!-- =================================================================== -->
  <!--   Compiles source directory                                         -->
  <!-- =================================================================== -->
  <target name="compile-source" depends="initbuild,createParser"
    description="Compiles the source code">
    <!-- use better dependency logic -->
<!--     <depend srcdir="${src.dir}"
      destdir="${build.classes.dir}"
      cache="${build}/testdepends"
      closure="yes"/> -->

    <!-- Compile the java code -->
    <echo>${javac.java.version} build.compiler=${build.compiler} javac.compiler=${javac.compiler}</echo>
    <javac
      compiler="${javac.compiler}"
      srcdir="${src.dir}"
      includes="**/*.java"
      destdir="${build.classes.dir}"
      debug="${javac.debug.mode}"
      debuglevel="${javac.debug.level}"
      includeAntRuntime="false"
      source="${javac.java.version}"
      target="${javac.java.version}"
      >
      <classpath refid="smartfrog.class.path"/>
    </javac>
  </target>

  <target name="compile-rmi" depends="compile-source" >
    <!-- the RMI compile is split in two, as the compiler could not
        handle it otherwise.
        It is tempting to run these in parallel, to get speedup on multiway
        CPUs, but as the SunRmic adapter runs rmic in-VM, that is too dangerous.
        We'd need to fork rmic to get decent isolation.
        -->
    <rmic includesfile="${rmitargets}"
      compiler="${rmic.compiler}"
      stubversion="1.2"
      base="${build.classes.dir}">
      <classpath refid="smartfrog.class.path"/>
    </rmic>
    <rmic includesfile="${rmitargets}Examples"
      compiler="${rmic.compiler}"
      stubversion="1.2"
        base="${build.classes.dir}">
      <classpath refid="smartfrog.class.path"/>
    </rmic>

  </target>

  <target name="compile" depends="compile-rmi"
    description="Compiles the source code"/>


  <!-- =================================================================== -->
  <!--   Copy default.sf and default.ini files to "src/org/smartfrog" directory -->
  <!--   so that they can be used with security on                         -->
  <!-- =================================================================== -->
  <target name="copyDefault" depends="initbuild">
    <copy todir="${build.classes.dir}/org/smartfrog">
      <fileset dir="${bin}">
        <include name="default.sf" />
        <include name="default.ini" />
      </fileset>
    </copy>
  </target>

  <!-- =================================================================== -->
  <!--   Copy .sf files to "build" directories                             -->
  <!-- =================================================================== -->
  <target name="copySF" depends="initbuild">
    <copy todir="${build.classes.dir}">
      <fileset dir="${src.dir}">
        <include name="**/*.sf*" />
      </fileset>
    </copy>
  </target>

  <!-- =================================================================== -->
  <!--   Copy .sfcd  files to "build" directories                          -->
  <!--   These files should contain a list of configuration descriptors    -->
  <!-- =================================================================== -->
  <target name="copySFCD" depends="initbuild">
    <copy todir="${build.classes.dir}">
      <fileset dir="${src.dir}">
        <include name="**/*.sfcd*" />
      </fileset>
    </copy>
  </target>

  <!-- =================================================================== -->
  <!--   Copy .bat files to "build" directories                            -->
  <!-- =================================================================== -->
  <target name="copyBAT" depends="initbuild">
    <copy todir="${build.classes.dir}">
      <fileset dir="${src.dir}">
        <include name="**/*.bat*" />
      </fileset>
    </copy>
  </target>

  <!-- =================================================================== -->
  <!--   Copy .html files to "build" directories                           -->
  <!-- =================================================================== -->
  <target name="copyHTML" depends="initbuild">
    <copy todir="${build.classes.dir}">
      <fileset dir="${src.dir}">
        <include name="**/*.htm*" />
      </fileset>
    </copy>
  </target>

  <!-- =================================================================== -->
  <!--  Copy Gif files to "build" directories                              -->
  <!-- =================================================================== -->
  <target name="copyGif" depends="initbuild">
    <copy todir="${build.classes.dir}">
      <fileset dir="${src.dir}">
        <include name="**/*.gif" />
      </fileset>
    </copy>
  </target>


  <!-- =================================================================== -->
  <!--                                                                     -->
  <!-- =================================================================== -->
  <target name="copylibs" depends="initdist">
    <copy todir="${dist.lib.dir}">
      <fileset dir="${lib}">
	      <include name="**/*.jar" />
      </fileset>
      <mapper type="glob" from="*.jar" to="*-${Version}.jar"/>
    </copy>
  </target>

  <!-- =================================================================== -->
  <!--                                                                     -->
  <!-- =================================================================== -->
  <target name="copyPrivate" depends="initdist">
    <copy todir="${dist.private.dir}">
      <fileset dir="${private}">
        <include name="**/*" />
      </fileset>
    </copy>
    <chmod dir="${dist.private.dir}"
          perm="go-rxw"
          includes="**/*"/>
  </target>

  <!-- =================================================================== -->
  <!--                                                                     -->
  <!-- =================================================================== -->
  <target name="copyTestCA" depends="initdist">
    <copy todir="${dist.testCA.dir}">
      <fileset dir="${testCA}">
        <include name="**/*" />
      </fileset>
    </copy>
  </target>

  <!-- =================================================================== -->
  <!--                                                                     -->
  <!-- =================================================================== -->
  <target name="copybins" depends="initdist">
    <copy todir="${dist.bin.dir}">
      <fileset dir="${bin}">
        <include name="**/*" />
        <exclude name="**/*.bak" />
        <exclude name="**/tools" />
      </fileset>
    </copy>
   <chmod dir="${dist.bin.dir}"
          perm="ugo+rx"
          excludes="**/*.ico, **/*.ini, **/*.sf*,**/*.bat"/>
   <chmod dir="${dist.bin.dir}/security"
          perm="ugo+rx"
          excludes="**/*.ico, **/*.ini, **/*.sf*,**/*.bat"/>
  </target>




  <!-- =================================================================== -->
  <!--                                                                     -->
  <!-- =================================================================== -->
  <target name="copydocs" depends="initdist">
    <copy todir="${dist.docs.dir}">
      <fileset dir="${docs}">
        <include name="**/*.pdf" />
        <include name="**/*.html" />
        <include name="**/*.htm" />
      </fileset>
    </copy>
  </target>

  <!-- =================================================================== -->
  <!--                                                                     -->
  <!-- =================================================================== -->
  <target name="copyexamples" depends="initdist">
    <copy todir="${dist.src.dir}">
      <fileset dir="${src.dir}">
        <include name="${examplesFiles}" />
        <exclude name="**/*.dfPackage"/>
      </fileset>
    </copy>
  </target>

  <!-- =================================================================== -->
  <!--   JDocs                                                             -->
  <!-- =================================================================== -->
  <target name="jdocs" depends="initdist,generateversion" description="Generates the API documentation">
    <!--  Java Docs for all                                                -->
    <echo message=""/>
    <echo message="------------------------------------------------------------------------"/>
    <echo message="  Creating Java Docs for ${Name.System} ${version} [${dist.dir}/${jdocs}]"/>
    <echo message="------------------------------------------------------------------------"/>
    <mkdir dir="${dist.jdocs.dir}"/>
    <javadoc packagenames="org.smartfrog.*"
           sourcepath="${src.dir}"
           destdir="${dist.jdocs.dir}"
           author="true"
           version="true"
           use="true"
           windowtitle="${Name.System}"
           Header="${Name.System} ${Version}"
           Footer="${Name.System} ${version} ${Version}"
           doctitle="${Name.System}"
           bottom="${Name.Company}"
           source="${javac.java.version}"
           >
      <group title="SmartFrog Packages" packages="org.smartfrog.*"/>
      <classpath refid="smartfrog.class.path"/>
    </javadoc>

    <!--  Java doc for the grammars -->
    <exec executable="java">
        <arg line="-cp ${javacc.dir}/javacc.jar" />
        <arg line="jjdoc" />
        <arg line= "-OUTPUT_FILE=${docs}/DefaultParser.html" />
        <arg line="${src}/org/smartfrog/sfcore/languages/sf/DefaultParser.jj" />
    </exec>
  </target>


  <!-- =================================================================== -->
  <!--  BUILD                                                              -->
  <!-- =================================================================== -->

  <target name="build" depends="initbuild,compile,copySF,copyGif,copyBAT,copyHTML,copyDefault,copySFCD"
      description="Recompile and create all packages"/>

  <!-- =================================================================== -->
  <!--  Jar Files                                                              -->
  <!-- =================================================================== -->

  <!--  SmartFrog Jar                                                     -->
  <target name="sfJar" depends="build">
	  <jar jarfile="${dist.lib.dir}/smartfrog.jar" basedir="${build}"
         includes="**/smartfrog/**"
         excludes="**/services/**,**/examples/**"
	 manifest ="${manifestName}"/>
  </target>

  <!--  sfServices.jar                                               -->
  <target name="sfServicesJar" depends="build">
	  <jar jarfile="${dist.lib.dir}/sfServices-${Version}.jar"
         basedir="${build.classes.dir}"
         includes="**/services/**"
         manifest ="${manifestName}"/>
  </target>


  <!--  sfExamples.jar                                               -->
  <target name="sfExamplesJar" depends="build">
    <!-- Create sfExamples.jar file -->
    <jar jarfile="${dist.lib.dir}/sfExamples-${Version}.jar"
         basedir="${build.classes.dir}"
         includes="**/examples/**"
         manifest ="${manifestName}"/>
  </target>

  <target name="jars" depends="initdist,sfJar,generateversion,sfServicesJar,sfExamplesJar">
	  <move file="${dist.lib.dir}/smartfrog.jar" tofile="${dist.lib.dir}/smartfrog-${Version}.jar"/>
  </target>

  <!-- =================================================================== -->
  <!-- Initialization path for SF Libs                                     -->
  <!-- =================================================================== -->
  <!--path id="smartfrog.run.class.path">
	  <pathelement location="${dist.lib.dir}/smartfrog.jar"/>
	  <pathelement location="${dist.lib.dir}/sfServices.jar"/>
	  <pathelement location="${dist.lib.dir}/sfExamples.jar"/>
  </path-->

  <!-- =================================================================== -->
  <!--  build, create jars and signs them.                                 -->
  <!-- =================================================================== -->

  <target name="secureBuild" depends="build,jars,signJars" />

  <!-- =================================================================== -->
  <!--  create security buld file                                          -->
  <!-- =================================================================== -->

  <target name="buildSetup">
      <copy tofile="${dist.dir}/build.xml" file="releaseBuild.xml" />
      <copy tofile="${dist.dir}/rmitargets" file="rmitargetsExamples" />
      <copy tofile="${dist.dir}/parsertargets" file="parsertargets" />
      <copy tofile="${dist.dir}/COPYRIGHT.txt" file="COPYRIGHT.txt" />
      <copy tofile="${dist.dir}/LICENSE.txt" file="LICENSE.txt" />
      <copy tofile="${dist.dir}/changes.txt" file="changes.txt" />
      <copy tofile="${dist.dir}/readme.txt" file="readme.txt" />
  </target>

  <!-- =================================================================== -->
  <!--  DIST                                                               -->
  <!-- =================================================================== -->
  <target name="dist"
    depends="build,initdist,jars,copylibs,copybins,copyPrivate,copydocs, copyexamples,copyTestCA,buildSetup,fixCRLF,srczip"
    description="Prepares distribution package">
  </target>

  <!-- =================================================================== -->
  <!--  SECUREDIST                                                         -->
  <!-- =================================================================== -->
  <target name="securedist" depends="dist" description="Updates dist and sign jars if CA initialized">
    <ant  dir="${dist.dir}" target="signJars" inheritAll="false"/>
  </target>

  <!-- =================================================================== -->
  <!-- src.zip                                                             -->
  <!-- =================================================================== -->
  <target name="srczip" depends="initdist"  description="Creates src.zip with SF sources">
    <zip destfile="${dist.dir}/src.zip" >
      <zipfileset dir="${src}">
        <include name="**/**"/>
        <exclude name="**/*.dfPackage"/>
      </zipfileset>
    </zip>
  </target>

  <!-- =================================================================== -->
  <!-- clean                                                               -->
  <!-- =================================================================== -->
  <target name="clean" depends="init"  description="Restores the distribution to its clean state">
    <!-- Delete the ${build} ${dist.dir} ${jdocs} directory trees -->
    <!-- remove parser source files -->
    <delete dir="${build}"/>
    <delete dir="${dist.dir}"/>
  </target>

  <!-- =================================================================== -->
  <!-- a clean distribution                                               -->
  <!-- =================================================================== -->
  <target name="fromclean" depends="clean,sfParseTest,dist"/>

  <!-- =================================================================== -->
  <!-- sfParse parsertargets                                                -->
  <!-- =================================================================== -->
  <target name="sfParseTest"  depends="build,jars">
    <java classname="org.smartfrog.SFParse"
        failonerror="true" fork="true">
	<!--classpathref="smartfrog.run.class.path"-->
	<classpath>
	  <pathelement location="${dist.lib.dir}/smartfrog-${Version}.jar"/>
	  <pathelement location="${dist.lib.dir}/sfServices-${Version}.jar"/>
	  <pathelement location="${dist.lib.dir}/sfExamples-${Version}.jar"/>
        </classpath>
      <arg value="-R"/>
      <!--<arg value="-r"/> -->
      <arg value="-q"/>
      <arg value="-f"/>
      <arg file="parsertargets"/>
   </java>
  </target>

  <!-- =================================================================== -->
  <!-- do everything -->
  <!-- =================================================================== -->
  <target name="all" depends="dist,sfParseTest"
    description="creates all the packages required to run smartfrog, and validate any .sf in the package">
  </target>

  <target name="default" depends="all"
    description="default target for the project; invokes 'all'"
    />


</project>

<!-- End of file -->
