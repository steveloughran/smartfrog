***Key:Value***, Logger:extends {
  logStackTrace false;
}
***Key:Value***, logStackTrace:false
***Key:Value***, LOG_LEVEL_IGNORE:0
***Key:Value***, LOG_LEVEL_TRACE:1
***Key:Value***, LOG_LEVEL_DEBUG:2
***Key:Value***, LOG_LEVEL_INFO:3
***Key:Value***, LOG_LEVEL_WARN:4
***Key:Value***, LOG_LEVEL_ERROR:5
***Key:Value***, LOG_LEVEL_FATAL:6
***Key:Value***, LOG_LEVEL_ALL:0
***Key:Value***, LOG_LEVEL_OFF:APPLY {sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Sum";
unique2 LOG_LEVEL_FATAL;
unique3 1;
}
1
2
3
4
5
6
7
8
9
10
***Key:Value***, LogImpl:extends {
  loggerClass "org.smartfrog.sfcore.logging.LogToStreamsImpl";
  logLevel LOG_LEVEL_INFO;
}
***Key:Value***, loggerClass:org.smartfrog.sfcore.logging.LogToStreamsImpl
***Key:Value***, logLevel:LOG_LEVEL_INFO
***Key:Value***, LogToNothingImpl:extends {
  errToOut true;
  loggerClass "org.smartfrog.sfcore.logging.LogToNothingImpl";
}
***Key:Value***, errToOut:true
***Key:Value***, loggerClass:org.smartfrog.sfcore.logging.LogToNothingImpl
***Key:Value***, LogToStreamsImpl:extends {
  errToOut true;
  loggerClass "org.smartfrog.sfcore.logging.LogToStreamsImpl";
  showLogName true;
  showShortName false;
  showDateTime true;
  showThreadName true;
  showMethodCall false;
  dateFormat "yyyy/MM/dd HH:mm:ss:SSS zzz";
}
***Key:Value***, errToOut:true
***Key:Value***, loggerClass:org.smartfrog.sfcore.logging.LogToStreamsImpl
***Key:Value***, showLogName:true
***Key:Value***, showShortName:false
***Key:Value***, showDateTime:true
***Key:Value***, showThreadName:true
***Key:Value***, showMethodCall:false
***Key:Value***, dateFormat:yyyy/MM/dd HH:mm:ss:SSS zzz
***Key:Value***, Version:extends DATA {
  version APPLY {sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Concatenate";
unique15 name;
unique16 ".";
unique17 majorRelease;
unique18 ".";
unique19 minorRelease;
unique20 ".";
unique21 build;
unique22 status;
unique23 " (";
unique24 buildDate;
unique25 ")";
};
  name "SmartFrog";
  majorRelease "3";
  minorRelease "12";
  build "001";
  status "dev";
  copyright "(C) Copyright 1998-2007 Hewlett-Packard Development Company, LP";
  buildDate "2008-07-15 14:03:41";
}
***Key:Value***, version:APPLY {sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Concatenate";
unique15 name;
unique16 ".";
unique17 majorRelease;
unique18 ".";
unique19 minorRelease;
unique20 ".";
unique21 build;
unique22 status;
unique23 " (";
unique24 buildDate;
unique25 ")";
}
1
2
3
4
5
6
7
8
9
10
***Key:Value***, name:SmartFrog
***Key:Value***, majorRelease:3
***Key:Value***, minorRelease:12
***Key:Value***, build:001
***Key:Value***, status:dev
***Key:Value***, copyright:(C) Copyright 1998-2007 Hewlett-Packard Development Company, LP
***Key:Value***, buildDate:2008-07-15 14:03:41

Parser - SmartFrog 3.12.001dev (2008-07-15 14:03:41)
(C) Copyright 1998-2007 Hewlett-Packard Development Company, LP
 
******************** PHASE raw *********************
extends DATA {
  Function extends {
    phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
    sfFunctionClass "";
  }
  vector extends Function, {
      sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Vector";
    };
  append extends Function, {
      sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Append";
    };
  concat extends Function, {
      sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Concatenate";
    };
  formatString extends Function, {
      sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Format";
    };
  sum extends Function, {
      sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Sum";
    };
  plus extends sum;
  product extends Function, {
      sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Product";
    };
  minus extends Function, {
      sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Minus";
    };
  divide extends Function, {
      sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Divide";
    };
  and extends Function, {
      sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.And";
    };
  or extends Function, {
      sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Or";
    };
  not extends Function, {
      sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Not";
    };
  GE extends Function, {
      sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.GE";
    };
  LE extends Function, {
      sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.LE";
    };
  GT extends Function, {
      sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.GT";
    };
  LT extends Function, {
      sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.LT";
    };
  EQ extends Function, {
      sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.EQ";
    };
  NE extends Function, {
      sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.NE";
    };
  ifThenElse extends Function, {
      sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.IfThenElse";
    };
  next extends Function, {
      sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Next";
    };
  random extends Function, {
      sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Random";
    };
  date extends Function, {
      sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Date";
    };
  userinput extends Function, {
      sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.UserInput";
    };
  ref extends Function, {
      sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Ref";
    };
  Ref extends Function, {
      sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Ref";
    };
  Constraint extends Function, {
      sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Constraint";
      sfConstraintAggregated false;
    };
  AggregatedConstraint extends Constraint, {
      sfConstraintAggregated true;
    };
  Array extends Function, {
      sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Array";
    };
  Aggregator extends Function, {
      sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Aggregator";
    };
  forall extends Function, {
      sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.ForAllExists";
      sfFunctionQual "forall";
    };
  exists extends Function, {
      sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.ForAllExists";
      sfFunctionQual "exists";
    };
  nsum extends Function, {
      sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.NSumProduct";
      sfFunctionQual "sum";
    };
  nproduct extends Function, {
      sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.NSumProduct";
      sfFunctionQual "product";
    };
  alldifferent extends Function, {
      sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.AllDifferent";
    };
  ResourceAllocator extends AggregatedConstraint, {
      [ sfAggregatedConstraintSource ] unique26 extends DATA {
        unique27 providers_array;
        unique28 providers_attr;
        unique29 "providers";
        phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
        sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Vector";
      }
      [ sfAggregatedConstraintSource ] unique30 extends DATA {
        unique31 providers_array;
        unique32 provider_caps_attr;
        unique33 "provider_caps";
        phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
        sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Vector";
      }
      [ sfAggregatedConstraintSource ] unique34 extends DATA {
        unique35 consumers_array;
        unique36 consumers_attr;
        unique37 "consumers";
        phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
        sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Vector";
      }
      [ sfAggregatedConstraintSource ] unique38 extends DATA {
        unique39 consumers_array;
        unique40 consumer_reqs_attr;
        unique41 "consumer_reqs";
        phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
        sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Vector";
      }
      [ sfAggregatedConstraintSource ] unique42 extends DATA {
        unique43 consumers_array;
        unique44 allocation_attr;
        unique45 "allocation";
        phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
        sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Vector";
      }
      colocations extends DATA {
        phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
        sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Vector";
      }
      nocolocations extends DATA {
        phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
        sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Vector";
      }
      hosted extends DATA {
        phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
        sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Vector";
      }
      [ sfConstraint ] unique46 "allocate(providers, provider_caps, consumers, consumer_reqs, allocation, colocations, nocolocations, hosted)";
    };
  Generator extends {
    sfIsGenerator true;
  }
  sfConfig extends {
    theList genList:theList;
    elements extends Array, {
        sfArrayPrefix "foo";
        sfArrayExtent 3;
        sfArrayGenerator extends Generator, {
            element extends Constraint, {
                val VAR0;
              };
            [ sfTemp ] unique47 diff;
            unique48 extends Constraint, {
                list theList;
                el element:val;
                [ sfConstraint ] unique49 "member(el, list)";
              };
          };
      };
    diff extends AggregatedConstraint, {
        [ sfAggregatedConstraintSource ] unique50 extends DATA {
          unique51 "elements";
          unique52 "element:val";
          unique53 "element_vals";
          phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
          sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Vector";
        }
        [ sfConstraint ] unique54 "alldifferent(element_vals)";
      };
    genList extends Constraint, {
        theList extends DATA {
          unique55 "one";
          unique56 VAR1;
          unique57 "three";
          unique58 VAR2;
          phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
          sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Vector";
        }
        aList extends DATA {
          unique59 VAR3;
          unique60 "two";
          unique61 VAR4;
          unique62 "four";
          phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
          sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Vector";
        }
        [ sfConstraint ] unique63 "theList = aList";
      };
  }
}






******************** PHASE type *********************
extends DATA {
  Function extends {
    phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
    sfFunctionClass "";
  }
  vector extends {
    phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
    sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Vector";
  }
  append extends {
    phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
    sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Append";
  }
  concat extends {
    phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
    sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Concatenate";
  }
  formatString extends {
    phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
    sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Format";
  }
  sum extends {
    phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
    sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Sum";
  }
  plus extends {
    phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
    sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Sum";
  }
  product extends {
    phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
    sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Product";
  }
  minus extends {
    phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
    sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Minus";
  }
  divide extends {
    phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
    sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Divide";
  }
  and extends {
    phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
    sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.And";
  }
  or extends {
    phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
    sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Or";
  }
  not extends {
    phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
    sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Not";
  }
  GE extends {
    phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
    sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.GE";
  }
  LE extends {
    phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
    sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.LE";
  }
  GT extends {
    phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
    sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.GT";
  }
  LT extends {
    phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
    sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.LT";
  }
  EQ extends {
    phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
    sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.EQ";
  }
  NE extends {
    phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
    sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.NE";
  }
  ifThenElse extends {
    phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
    sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.IfThenElse";
  }
  next extends {
    phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
    sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Next";
  }
  random extends {
    phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
    sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Random";
  }
  date extends {
    phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
    sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Date";
  }
  userinput extends {
    phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
    sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.UserInput";
  }
  ref extends {
    phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
    sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Ref";
  }
  Ref extends {
    phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
    sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Ref";
  }
  Constraint extends {
    phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
    sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Constraint";
    sfConstraintAggregated false;
  }
  AggregatedConstraint extends {
    phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
    sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Constraint";
    sfConstraintAggregated true;
  }
  Array extends {
    phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
    sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Array";
  }
  Aggregator extends {
    phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
    sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Aggregator";
  }
  forall extends {
    phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
    sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.ForAllExists";
    sfFunctionQual "forall";
  }
  exists extends {
    phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
    sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.ForAllExists";
    sfFunctionQual "exists";
  }
  nsum extends {
    phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
    sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.NSumProduct";
    sfFunctionQual "sum";
  }
  nproduct extends {
    phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
    sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.NSumProduct";
    sfFunctionQual "product";
  }
  alldifferent extends {
    phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
    sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.AllDifferent";
  }
  ResourceAllocator extends {
    phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
    sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Constraint";
    sfConstraintAggregated true;
    [ sfAggregatedConstraintSource ] unique26 extends DATA {
      unique27 providers_array;
      unique28 providers_attr;
      unique29 "providers";
      phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
      sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Vector";
    }
    [ sfAggregatedConstraintSource ] unique30 extends DATA {
      unique31 providers_array;
      unique32 provider_caps_attr;
      unique33 "provider_caps";
      phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
      sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Vector";
    }
    [ sfAggregatedConstraintSource ] unique34 extends DATA {
      unique35 consumers_array;
      unique36 consumers_attr;
      unique37 "consumers";
      phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
      sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Vector";
    }
    [ sfAggregatedConstraintSource ] unique38 extends DATA {
      unique39 consumers_array;
      unique40 consumer_reqs_attr;
      unique41 "consumer_reqs";
      phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
      sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Vector";
    }
    [ sfAggregatedConstraintSource ] unique42 extends DATA {
      unique43 consumers_array;
      unique44 allocation_attr;
      unique45 "allocation";
      phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
      sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Vector";
    }
    colocations extends DATA {
      phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
      sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Vector";
    }
    nocolocations extends DATA {
      phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
      sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Vector";
    }
    hosted extends DATA {
      phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
      sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Vector";
    }
    [ sfConstraint ] unique46 "allocate(providers, provider_caps, consumers, consumer_reqs, allocation, colocations, nocolocations, hosted)";
  }
  Generator extends {
    sfIsGenerator true;
  }
  sfConfig extends {
    theList genList:theList;
    elements extends {
      phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
      sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Array";
      sfArrayPrefix "foo";
      sfArrayExtent 3;
      sfArrayGenerator extends {
        sfIsGenerator true;
        element extends {
          phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
          sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Constraint";
          sfConstraintAggregated false;
          val VAR5;
        }
        [ sfTemp ] unique47 diff;
        unique48 extends {
          phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
          sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Constraint";
          sfConstraintAggregated false;
          list theList;
          el element:val;
          [ sfConstraint ] unique49 "member(el, list)";
        }
      }
    }
    diff extends {
      phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
      sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Constraint";
      sfConstraintAggregated true;
      [ sfAggregatedConstraintSource ] unique50 extends DATA {
        unique51 "elements";
        unique52 "element:val";
        unique53 "element_vals";
        phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
        sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Vector";
      }
      [ sfConstraint ] unique54 "alldifferent(element_vals)";
    }
    genList extends {
      phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
      sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Constraint";
      sfConstraintAggregated false;
      theList extends DATA {
        unique55 "one";
        unique56 VAR6;
        unique57 "three";
        unique58 VAR7;
        phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
        sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Vector";
      }
      aList extends DATA {
        unique59 VAR8;
        unique60 "two";
        unique61 VAR9;
        unique62 "four";
        phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
        sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Vector";
      }
      [ sfConstraint ] unique63 "theList = aList";
    }
  }
}






******************** PHASE place *********************
extends DATA {
  Function extends {
    phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
    sfFunctionClass "";
  }
  vector extends {
    phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
    sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Vector";
  }
  append extends {
    phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
    sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Append";
  }
  concat extends {
    phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
    sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Concatenate";
  }
  formatString extends {
    phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
    sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Format";
  }
  sum extends {
    phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
    sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Sum";
  }
  plus extends {
    phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
    sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Sum";
  }
  product extends {
    phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
    sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Product";
  }
  minus extends {
    phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
    sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Minus";
  }
  divide extends {
    phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
    sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Divide";
  }
  and extends {
    phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
    sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.And";
  }
  or extends {
    phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
    sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Or";
  }
  not extends {
    phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
    sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Not";
  }
  GE extends {
    phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
    sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.GE";
  }
  LE extends {
    phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
    sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.LE";
  }
  GT extends {
    phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
    sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.GT";
  }
  LT extends {
    phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
    sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.LT";
  }
  EQ extends {
    phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
    sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.EQ";
  }
  NE extends {
    phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
    sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.NE";
  }
  ifThenElse extends {
    phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
    sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.IfThenElse";
  }
  next extends {
    phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
    sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Next";
  }
  random extends {
    phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
    sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Random";
  }
  date extends {
    phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
    sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Date";
  }
  userinput extends {
    phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
    sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.UserInput";
  }
  ref extends {
    phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
    sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Ref";
  }
  Ref extends {
    phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
    sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Ref";
  }
  Constraint extends {
    phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
    sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Constraint";
    sfConstraintAggregated false;
  }
  AggregatedConstraint extends {
    phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
    sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Constraint";
    sfConstraintAggregated true;
  }
  Array extends {
    phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
    sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Array";
  }
  Aggregator extends {
    phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
    sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Aggregator";
  }
  forall extends {
    phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
    sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.ForAllExists";
    sfFunctionQual "forall";
  }
  exists extends {
    phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
    sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.ForAllExists";
    sfFunctionQual "exists";
  }
  nsum extends {
    phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
    sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.NSumProduct";
    sfFunctionQual "sum";
  }
  nproduct extends {
    phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
    sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.NSumProduct";
    sfFunctionQual "product";
  }
  alldifferent extends {
    phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
    sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.AllDifferent";
  }
  ResourceAllocator extends {
    phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
    sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Constraint";
    sfConstraintAggregated true;
    [ sfAggregatedConstraintSource ] unique26 extends DATA {
      unique27 providers_array;
      unique28 providers_attr;
      unique29 "providers";
      phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
      sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Vector";
    }
    [ sfAggregatedConstraintSource ] unique30 extends DATA {
      unique31 providers_array;
      unique32 provider_caps_attr;
      unique33 "provider_caps";
      phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
      sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Vector";
    }
    [ sfAggregatedConstraintSource ] unique34 extends DATA {
      unique35 consumers_array;
      unique36 consumers_attr;
      unique37 "consumers";
      phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
      sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Vector";
    }
    [ sfAggregatedConstraintSource ] unique38 extends DATA {
      unique39 consumers_array;
      unique40 consumer_reqs_attr;
      unique41 "consumer_reqs";
      phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
      sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Vector";
    }
    [ sfAggregatedConstraintSource ] unique42 extends DATA {
      unique43 consumers_array;
      unique44 allocation_attr;
      unique45 "allocation";
      phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
      sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Vector";
    }
    colocations extends DATA {
      phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
      sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Vector";
    }
    nocolocations extends DATA {
      phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
      sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Vector";
    }
    hosted extends DATA {
      phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
      sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Vector";
    }
    [ sfConstraint ] unique46 "allocate(providers, provider_caps, consumers, consumer_reqs, allocation, colocations, nocolocations, hosted)";
  }
  Generator extends {
    sfIsGenerator true;
  }
  sfConfig extends {
    theList genList:theList;
    elements extends {
      phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
      sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Array";
      sfArrayPrefix "foo";
      sfArrayExtent 3;
      sfArrayGenerator extends {
        sfIsGenerator true;
        element extends {
          phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
          sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Constraint";
          sfConstraintAggregated false;
          val VAR5;
        }
        [ sfTemp ] unique47 diff;
        unique48 extends {
          phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
          sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Constraint";
          sfConstraintAggregated false;
          list theList;
          el element:val;
          [ sfConstraint ] unique49 "member(el, list)";
        }
      }
    }
    diff extends {
      phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
      sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Constraint";
      sfConstraintAggregated true;
      [ sfAggregatedConstraintSource ] unique50 extends DATA {
        unique51 "elements";
        unique52 "element:val";
        unique53 "element_vals";
        phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
        sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Vector";
      }
      [ sfConstraint ] unique54 "alldifferent(element_vals)";
    }
    genList extends {
      phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
      sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Constraint";
      sfConstraintAggregated false;
      theList extends DATA {
        unique55 "one";
        unique56 VAR6;
        unique57 "three";
        unique58 VAR7;
        phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
        sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Vector";
      }
      aList extends DATA {
        unique59 VAR8;
        unique60 "two";
        unique61 VAR9;
        unique62 "four";
        phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
        sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Vector";
      }
      [ sfConstraint ] unique63 "theList = aList";
    }
  }
}






******************** PHASE function *********************
extends DATA {
  Function APPLY {sfFunctionClass "";
};
  vector APPLY {sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Vector";
};
  append APPLY {sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Append";
};
  concat APPLY {sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Concatenate";
};
  formatString APPLY {sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Format";
};
  sum APPLY {sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Sum";
};
  plus APPLY {sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Sum";
};
  product APPLY {sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Product";
};
  minus APPLY {sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Minus";
};
  divide APPLY {sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Divide";
};
  and APPLY {sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.And";
};
  or APPLY {sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Or";
};
  not APPLY {sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Not";
};
  GE APPLY {sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.GE";
};
  LE APPLY {sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.LE";
};
  GT APPLY {sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.GT";
};
  LT APPLY {sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.LT";
};
  EQ APPLY {sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.EQ";
};
  NE APPLY {sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.NE";
};
  ifThenElse APPLY {sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.IfThenElse";
};
  next APPLY {sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Next";
};
  random APPLY {sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Random";
};
  date APPLY {sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Date";
};
  userinput APPLY {sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.UserInput";
};
  ref APPLY {sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Ref";
};
  Ref APPLY {sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Ref";
};
  Constraint APPLY {sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Constraint";
sfConstraintAggregated false;
};
  AggregatedConstraint APPLY {sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Constraint";
sfConstraintAggregated true;
};
  Array APPLY {sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Array";
};
  Aggregator APPLY {sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Aggregator";
};
  forall APPLY {sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.ForAllExists";
sfFunctionQual "forall";
};
  exists APPLY {sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.ForAllExists";
sfFunctionQual "exists";
};
  nsum APPLY {sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.NSumProduct";
sfFunctionQual "sum";
};
  nproduct APPLY {sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.NSumProduct";
sfFunctionQual "product";
};
  alldifferent APPLY {sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.AllDifferent";
};
  ResourceAllocator APPLY {sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Constraint";
sfConstraintAggregated true;
[ sfAggregatedConstraintSource ] unique26 APPLY {sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Vector";
unique27 providers_array;
unique28 providers_attr;
unique29 "providers";
};
[ sfAggregatedConstraintSource ] unique30 APPLY {sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Vector";
unique31 providers_array;
unique32 provider_caps_attr;
unique33 "provider_caps";
};
[ sfAggregatedConstraintSource ] unique34 APPLY {sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Vector";
unique35 consumers_array;
unique36 consumers_attr;
unique37 "consumers";
};
[ sfAggregatedConstraintSource ] unique38 APPLY {sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Vector";
unique39 consumers_array;
unique40 consumer_reqs_attr;
unique41 "consumer_reqs";
};
[ sfAggregatedConstraintSource ] unique42 APPLY {sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Vector";
unique43 consumers_array;
unique44 allocation_attr;
unique45 "allocation";
};
colocations APPLY {sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Vector";
};
nocolocations APPLY {sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Vector";
};
hosted APPLY {sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Vector";
};
[ sfConstraint ] unique46 "allocate(providers, provider_caps, consumers, consumer_reqs, allocation, colocations, nocolocations, hosted)";
};
  Generator extends {
    sfIsGenerator true;
  }
  sfConfig extends {
    theList genList:theList;
    elements APPLY {sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Array";
sfArrayPrefix "foo";
sfArrayExtent 3;
sfArrayGenerator extends {
  sfIsGenerator true;
  element APPLY {sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Constraint";
sfConstraintAggregated false;
val VAR5;
};
  [ sfTemp ] unique47 diff;
  unique48 APPLY {sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Constraint";
sfConstraintAggregated false;
list theList;
el element:val;
[ sfConstraint ] unique49 "member(el, list)";
};
}
};
    diff APPLY {sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Constraint";
sfConstraintAggregated true;
[ sfAggregatedConstraintSource ] unique50 APPLY {sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Vector";
unique51 "elements";
unique52 "element:val";
unique53 "element_vals";
};
[ sfConstraint ] unique54 "alldifferent(element_vals)";
};
    genList APPLY {sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Constraint";
sfConstraintAggregated false;
theList APPLY {sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Vector";
unique55 "one";
unique56 VAR6;
unique57 "three";
unique58 VAR7;
};
aList APPLY {sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Vector";
unique59 VAR8;
unique60 "two";
unique61 VAR9;
unique62 "four";
};
[ sfConstraint ] unique63 "theList = aList";
};
  }
}






******************** PHASE sfConfig *********************
extends {
  theList genList:theList;
  elements APPLY {sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Array";
sfArrayPrefix "foo";
sfArrayExtent 3;
sfArrayGenerator extends {
  sfIsGenerator true;
  element APPLY {sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Constraint";
sfConstraintAggregated false;
val VAR5;
};
  [ sfTemp ] unique47 diff;
  unique48 APPLY {sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Constraint";
sfConstraintAggregated false;
list theList;
el element:val;
[ sfConstraint ] unique49 "member(el, list)";
};
}
};
  diff APPLY {sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Constraint";
sfConstraintAggregated true;
[ sfAggregatedConstraintSource ] unique50 APPLY {sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Vector";
unique51 "elements";
unique52 "element:val";
unique53 "element_vals";
};
[ sfConstraint ] unique54 "alldifferent(element_vals)";
};
  genList APPLY {sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Constraint";
sfConstraintAggregated false;
theList APPLY {sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Vector";
unique55 "one";
unique56 VAR6;
unique57 "three";
unique58 VAR7;
};
aList APPLY {sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Vector";
unique59 VAR8;
unique60 "two";
unique61 VAR9;
unique62 "four";
};
[ sfConstraint ] unique63 "theList = aList";
};
}






***Key:Value***, theList:genList:theList
1
2
3
4
5
6
7
1
2
3
4
5
6
7
8
9
10
1
2
3
4
5
6
7
8
9
10
8
Solving: suspend(sfsolve_var_sync(hash(4, 5, [sf_evalcidx -> 0, (0, aList) -> ([VAR8, two, VAR9, four], [], enum, first), (0, theList) -> ([one, VAR6, three, VAR7], [], enum, first), (0, sfConstraintAggregated) -> (false, [], null, notfirst), sf_evalidx -> 0]), (0, theList), [one, VAR6, three, VAR7]), 1, [one, VAR6, three, VAR7] -> inst), suspend(sfsolve_var_sync(hash(4, 5, [sf_evalcidx -> 0, (0, aList) -> ([VAR8, two, VAR9, four], [], enum, first), (0, theList) -> ([one, VAR6, three, VAR7], [], enum, first), (0, sfConstraintAggregated) -> (false, [], null, notfirst), sf_evalidx -> 0]), (0, aList), [VAR8, two, VAR9, four]), 1, [VAR8, two, VAR9, four] -> inst), [one, VAR6, three, VAR7] = [VAR8, two, VAR9, four]
9
10
***Key:Value***, elements:APPLY {sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Array";
sfArrayPrefix "foo";
sfArrayExtent 3;
sfArrayGenerator extends {
  sfIsGenerator true;
  element APPLY {sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Constraint";
sfConstraintAggregated false;
val VAR5;
};
  [ sfTemp ] unique47 diff;
  unique48 APPLY {sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Constraint";
sfConstraintAggregated false;
list theList;
el element:val;
[ sfConstraint ] unique49 "member(el, list)";
};
}
}
1
2
3
4
5
6
7
8
9
10
***Key:Value***, elements:extends DATA {
  sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Array";
  sfArrayPrefix "foo";
  sfArrayExtent 3;
  sfArrayGenerator extends {
    sfIsGenerator true;
    element APPLY {sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Constraint";
sfConstraintAggregated false;
val VAR5;
};
    [ sfTemp ] unique47 diff;
    unique48 APPLY {sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Constraint";
sfConstraintAggregated false;
list theList;
el element:val;
[ sfConstraint ] unique49 "member(el, list)";
};
  }
  foo0 extends {
    element APPLY {sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Constraint";
sfConstraintAggregated false;
val VAR19;
};
    [ sfTemp ] unique47 diff;
    unique48 APPLY {sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Constraint";
sfConstraintAggregated false;
list theList;
el element:val;
[ sfConstraint ] unique49 "member(el, list)";
};
    sfArrayIndex 0;
    sfArrayTag "foo0";
  }
  foo1 extends {
    element APPLY {sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Constraint";
sfConstraintAggregated false;
val VAR20;
};
    [ sfTemp ] unique47 diff;
    unique48 APPLY {sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Constraint";
sfConstraintAggregated false;
list theList;
el element:val;
[ sfConstraint ] unique49 "member(el, list)";
};
    sfArrayIndex 1;
    sfArrayTag "foo1";
  }
  foo2 extends {
    element APPLY {sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Constraint";
sfConstraintAggregated false;
val VAR21;
};
    [ sfTemp ] unique47 diff;
    unique48 APPLY {sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Constraint";
sfConstraintAggregated false;
list theList;
el element:val;
[ sfConstraint ] unique49 "member(el, list)";
};
    sfArrayIndex 2;
    sfArrayTag "foo2";
  }
  sfFunctionClassStatus "done";
}
***Key:Value***, sfFunctionClass:org.smartfrog.sfcore.languages.sf.functions.Array
***Key:Value***, sfArrayPrefix:foo
***Key:Value***, sfArrayExtent:3
***Key:Value***, sfArrayGenerator:extends {
  sfIsGenerator true;
  element APPLY {sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Constraint";
sfConstraintAggregated false;
val VAR5;
};
  [ sfTemp ] unique47 diff;
  unique48 APPLY {sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Constraint";
sfConstraintAggregated false;
list theList;
el element:val;
[ sfConstraint ] unique49 "member(el, list)";
};
}
***Key:Value***, sfIsGenerator:true
***Key:Value***, element:APPLY {sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Constraint";
sfConstraintAggregated false;
val VAR5;
}
1
2
3
***Key:Value***, unique47:diff
1
2
3
4
5
6
7
1
2
3
4
5
6
7
8
9
10
8
1
2
3
4
5
6
7
8
Solving: suspend(sfsolve_var_sync(hash(4, 7, [(1, val) -> (Var, [], enum, first), sf_evalcidx -> 1, (0, aList) -> ([one, two, three, four], [], enum, notfirst), (0, theList) -> ([one, two, three, four], [], enum, notfirst), (0, sfConstraintAggregated) -> (false, [], null, notfirst), sf_evalidx -> 2, (1, sfConstraintAggregated) -> (false, [], null, notfirst)]), (1, val), Var), 1, Var -> inst), Var &:: [one, two, three, four], true
9
10
1
2
3
4
5
6
7
8
Solving: suspend(sfsolve_var_sync(hash(4, 9, [(1, val) -> (Var{[four, one, three, two]}, [], enum, first), sf_evalcidx -> 2, (2, val) -> (Var, [], enum, first), (0, aList) -> ([one, two, three, four], [], enum, notfirst), (0, theList) -> ([one, two, three, four], [], enum, notfirst), (0, sfConstraintAggregated) -> (false, [], null, notfirst), sf_evalidx -> 2, (1, sfConstraintAggregated) -> (false, [], null, notfirst), (2, sfConstraintAggregated) -> (false, [], null, notfirst)]), (2, val), Var), 1, Var -> inst), Var &:: [one, two, three, four], true
9
10
1
2
3
4
5
6
7
8
Solving: suspend(sfsolve_var_sync(hash(4, 11, [(3, sfConstraintAggregated) -> (false, [], null, notfirst), (1, val) -> (Var{[four, one, three, two]}, [], enum, first), sf_evalcidx -> 3, (2, val) -> (Var{[four, one, three, two]}, [], enum, first), (0, aList) -> ([one, two, three, four], [], enum, notfirst), (0, theList) -> ([one, two, three, four], [], enum, notfirst), (0, sfConstraintAggregated) -> (false, [], null, notfirst), sf_evalidx -> 2, (3, val) -> (Var, [], enum, first), (1, sfConstraintAggregated) -> (false, [], null, notfirst), (2, sfConstraintAggregated) -> (false, [], null, notfirst)]), (3, val), Var), 1, Var -> inst), Var &:: [one, two, three, four], true
9
10
Solving: suspend(sfsolve_var_sync(hash(16, 14, [sf_evalcidx -> 4, (1, val) -> (Var{[four, one, three, two]}, [], enum, first), (3, sfConstraintAggregated) -> (false, [], null, notfirst), (0, theList) -> ([one, two, three, four], [], enum, notfirst), (0, aList) -> ([one, two, three, four], [], enum, notfirst), (3, val) -> (Var{[four, one, three, two]}, [], enum, first), sf_evalidx -> 2, (0, sfConstraintAggregated) -> (false, [], null, notfirst), (4, element_vals) -> ([Var, Var{[four, ...]}, Var], [], enum, first), (2, sfConstraintAggregated) -> (false, [], null, notfirst), (2, val) -> (Var, [], enum, first), (4, sfConstraintAggregated) -> (true, [], ..., ...), (4, unique50) -> ([...], ..., ...), (..., ...) -> (..., ...)]), (4, element_vals), [Var, Var, Var]), 1, [Var, Var, Var] -> inst), sd : alldifferent([Var, Var, Var])
9
10
***Key:Value***, unique47:extends DATA {
  sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Constraint";
  sfConstraintAggregated true;
  [ sfAggregatedConstraintSource ] unique50 [|"elements", "element:val", "element_vals"|];
  [ sfConstraint ] unique54 "alldifferent(element_vals)";
  [ sfAggregatedConstraintFreeVars ] element_vals [|VAR19, VAR20, VAR21|];
  sfFunctionClassStatus "done";
}
***Key:Value***, sfFunctionClass:org.smartfrog.sfcore.languages.sf.functions.Constraint
***Key:Value***, sfConstraintAggregated:true
***Key:Value***, unique50:[elements, element:val, element_vals]
***Key:Value***, unique54:alldifferent(element_vals)
***Key:Value***, element_vals:[VAR19, VAR20, VAR21]
***Key:Value***, sfFunctionClassStatus:done
***Key:Value***, unique48:APPLY {sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Constraint";
sfConstraintAggregated false;
list theList;
el element:val;
[ sfConstraint ] unique49 "member(el, list)";
}
1
2
3
***Key:Value***, foo0:extends {
  element APPLY {sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Constraint";
sfConstraintAggregated false;
val VAR19;
sfFunctionClassStatus "done";
};
  [ sfTemp ] unique47 diff;
  unique48 APPLY {sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Constraint";
sfConstraintAggregated false;
list theList;
el element:val;
[ sfConstraint ] unique49 "member(el, list)";
};
  sfArrayIndex 0;
  sfArrayTag "foo0";
}
***Key:Value***, element:APPLY {sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Constraint";
sfConstraintAggregated false;
val VAR19;
sfFunctionClassStatus "done";
}
1
2
3
4
***Key:Value***, element:extends DATA {
  sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Constraint";
  sfConstraintAggregated false;
  val VAR19;
  sfFunctionClassStatus "done";
}
***Key:Value***, sfFunctionClass:org.smartfrog.sfcore.languages.sf.functions.Constraint
***Key:Value***, sfConstraintAggregated:false
***Key:Value***, val:VAR19
***Key:Value***, sfFunctionClassStatus:done
***Key:Value***, unique47:diff
1
2
3
4
***Key:Value***, unique47:extends DATA {
  sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Constraint";
  sfConstraintAggregated true;
  [ sfAggregatedConstraintSource ] unique50 [|"elements", "element:val", "element_vals"|];
  [ sfConstraint ] unique54 "alldifferent(element_vals)";
  [ sfAggregatedConstraintFreeVars ] element_vals [|VAR19, VAR20, VAR21|];
  sfFunctionClassStatus "done";
}
***Key:Value***, sfFunctionClass:org.smartfrog.sfcore.languages.sf.functions.Constraint
***Key:Value***, sfConstraintAggregated:true
***Key:Value***, unique50:[elements, element:val, element_vals]
***Key:Value***, unique54:alldifferent(element_vals)
***Key:Value***, element_vals:[VAR19, VAR20, VAR21]
***Key:Value***, sfFunctionClassStatus:done
***Key:Value***, unique48:APPLY {sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Constraint";
sfConstraintAggregated false;
list theList;
el element:val;
[ sfConstraint ] unique49 "member(el, list)";
}
1
2
3
4
5
6
7
8
Solving: member(Var{[four, one, three, two]}, [one, two, three, four])
9
10
***Key:Value***, unique48:extends DATA {
  sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Constraint";
  sfConstraintAggregated false;
  list [|"one", "two", "three", "four"|];
  el "one";
  [ sfConstraint ] unique49 "member(el, list)";
  sfFunctionClassStatus "done";
}
***Key:Value***, sfFunctionClass:org.smartfrog.sfcore.languages.sf.functions.Constraint
***Key:Value***, sfConstraintAggregated:false
***Key:Value***, list:[one, two, three, four]
***Key:Value***, el:one
***Key:Value***, unique49:member(el, list)
***Key:Value***, sfFunctionClassStatus:done
***Key:Value***, sfArrayIndex:0
***Key:Value***, sfArrayTag:foo0
***Key:Value***, foo1:extends {
  element APPLY {sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Constraint";
sfConstraintAggregated false;
val VAR20;
sfFunctionClassStatus "done";
};
  [ sfTemp ] unique47 diff;
  unique48 APPLY {sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Constraint";
sfConstraintAggregated false;
list theList;
el element:val;
[ sfConstraint ] unique49 "member(el, list)";
};
  sfArrayIndex 1;
  sfArrayTag "foo1";
}
***Key:Value***, element:APPLY {sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Constraint";
sfConstraintAggregated false;
val VAR20;
sfFunctionClassStatus "done";
}
1
2
3
4
***Key:Value***, element:extends DATA {
  sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Constraint";
  sfConstraintAggregated false;
  val VAR20;
  sfFunctionClassStatus "done";
}
***Key:Value***, sfFunctionClass:org.smartfrog.sfcore.languages.sf.functions.Constraint
***Key:Value***, sfConstraintAggregated:false
***Key:Value***, val:VAR20
***Key:Value***, sfFunctionClassStatus:done
***Key:Value***, unique47:diff
1
2
3
4
***Key:Value***, unique47:extends DATA {
  sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Constraint";
  sfConstraintAggregated true;
  [ sfAggregatedConstraintSource ] unique50 [|"elements", "element:val", "element_vals"|];
  [ sfConstraint ] unique54 "alldifferent(element_vals)";
  [ sfAggregatedConstraintFreeVars ] element_vals VAR29;
  sfFunctionClassStatus "done";
}
***Key:Value***, sfFunctionClass:org.smartfrog.sfcore.languages.sf.functions.Constraint
***Key:Value***, sfConstraintAggregated:true
***Key:Value***, unique50:[elements, element:val, element_vals]
***Key:Value***, unique54:alldifferent(element_vals)
***Key:Value***, element_vals:VAR29
***Key:Value***, sfFunctionClassStatus:done
***Key:Value***, unique48:APPLY {sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Constraint";
sfConstraintAggregated false;
list theList;
el element:val;
[ sfConstraint ] unique49 "member(el, list)";
}
1
2
3
4
5
6
7
8
Solving: member(Var{[four, three, two]}, [one, two, three, four])
9
10
***Key:Value***, unique48:extends DATA {
  sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Constraint";
  sfConstraintAggregated false;
  list [|"one", "two", "three", "four"|];
  el "two";
  [ sfConstraint ] unique49 "member(el, list)";
  sfFunctionClassStatus "done";
}
***Key:Value***, sfFunctionClass:org.smartfrog.sfcore.languages.sf.functions.Constraint
***Key:Value***, sfConstraintAggregated:false
***Key:Value***, list:[one, two, three, four]
***Key:Value***, el:two
***Key:Value***, unique49:member(el, list)
***Key:Value***, sfFunctionClassStatus:done
***Key:Value***, sfArrayIndex:1
***Key:Value***, sfArrayTag:foo1
***Key:Value***, foo2:extends {
  element APPLY {sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Constraint";
sfConstraintAggregated false;
val VAR21;
sfFunctionClassStatus "done";
};
  [ sfTemp ] unique47 diff;
  unique48 APPLY {sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Constraint";
sfConstraintAggregated false;
list theList;
el element:val;
[ sfConstraint ] unique49 "member(el, list)";
};
  sfArrayIndex 2;
  sfArrayTag "foo2";
}
***Key:Value***, element:APPLY {sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Constraint";
sfConstraintAggregated false;
val VAR21;
sfFunctionClassStatus "done";
}
1
2
3
4
***Key:Value***, element:extends DATA {
  sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Constraint";
  sfConstraintAggregated false;
  val VAR21;
  sfFunctionClassStatus "done";
}
***Key:Value***, sfFunctionClass:org.smartfrog.sfcore.languages.sf.functions.Constraint
***Key:Value***, sfConstraintAggregated:false
***Key:Value***, val:VAR21
***Key:Value***, sfFunctionClassStatus:done
***Key:Value***, unique47:diff
1
2
3
4
***Key:Value***, unique47:extends DATA {
  sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Constraint";
  sfConstraintAggregated true;
  [ sfAggregatedConstraintSource ] unique50 [|"elements", "element:val", "element_vals"|];
  [ sfConstraint ] unique54 "alldifferent(element_vals)";
  [ sfAggregatedConstraintFreeVars ] element_vals VAR29;
  sfFunctionClassStatus "done";
}
***Key:Value***, sfFunctionClass:org.smartfrog.sfcore.languages.sf.functions.Constraint
***Key:Value***, sfConstraintAggregated:true
***Key:Value***, unique50:[elements, element:val, element_vals]
***Key:Value***, unique54:alldifferent(element_vals)
***Key:Value***, element_vals:VAR29
***Key:Value***, sfFunctionClassStatus:done
***Key:Value***, unique48:APPLY {sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Constraint";
sfConstraintAggregated false;
list theList;
el element:val;
[ sfConstraint ] unique49 "member(el, list)";
}
1
2
3
4
5
6
7
8
Solving: member(Var{[four, three]}, [one, two, three, four])
9
10
***Key:Value***, unique48:extends DATA {
  sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Constraint";
  sfConstraintAggregated false;
  list [|"one", "two", "three", "four"|];
  el "three";
  [ sfConstraint ] unique49 "member(el, list)";
  sfFunctionClassStatus "done";
}
***Key:Value***, sfFunctionClass:org.smartfrog.sfcore.languages.sf.functions.Constraint
***Key:Value***, sfConstraintAggregated:false
***Key:Value***, list:[one, two, three, four]
***Key:Value***, el:three
***Key:Value***, unique49:member(el, list)
***Key:Value***, sfFunctionClassStatus:done
***Key:Value***, sfArrayIndex:2
***Key:Value***, sfArrayTag:foo2
***Key:Value***, sfFunctionClassStatus:done
***Key:Value***, diff:APPLY {sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Constraint";
sfConstraintAggregated true;
[ sfAggregatedConstraintSource ] unique50 [|"elements", "element:val", "element_vals"|];
[ sfConstraint ] unique54 "alldifferent(element_vals)";
[ sfAggregatedConstraintFreeVars ] element_vals [|"one", "two", "three"|];
sfFunctionClassStatus "done";
}
1
2
3
4
***Key:Value***, diff:extends DATA {
  sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Constraint";
  sfConstraintAggregated true;
  [ sfAggregatedConstraintSource ] unique50 [|"elements", "element:val", "element_vals"|];
  [ sfConstraint ] unique54 "alldifferent(element_vals)";
  [ sfAggregatedConstraintFreeVars ] element_vals [|"one", "two", "three"|];
  sfFunctionClassStatus "done";
}
***Key:Value***, sfFunctionClass:org.smartfrog.sfcore.languages.sf.functions.Constraint
***Key:Value***, sfConstraintAggregated:true
***Key:Value***, unique50:[elements, element:val, element_vals]
***Key:Value***, unique54:alldifferent(element_vals)
***Key:Value***, element_vals:[one, two, three]
***Key:Value***, sfFunctionClassStatus:done
***Key:Value***, genList:APPLY {sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Constraint";
sfConstraintAggregated false;
theList [|"one", "two", "three", "four"|];
aList [|"one", "two", "three", "four"|];
[ sfConstraint ] unique63 "theList = aList";
sfFunctionClassStatus "done";
}
1
2
3
4
***Key:Value***, genList:extends DATA {
  sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Constraint";
  sfConstraintAggregated false;
  theList [|"one", "two", "three", "four"|];
  aList [|"one", "two", "three", "four"|];
  [ sfConstraint ] unique63 "theList = aList";
  sfFunctionClassStatus "done";
}
***Key:Value***, sfFunctionClass:org.smartfrog.sfcore.languages.sf.functions.Constraint
***Key:Value***, sfConstraintAggregated:false
***Key:Value***, theList:[one, two, three, four]
***Key:Value***, aList:[one, two, three, four]
***Key:Value***, unique63:theList = aList
***Key:Value***, sfFunctionClassStatus:done
******************** PHASE link *********************
extends {
  theList [|"one", "two", "three", "four"|];
  elements extends DATA {
    sfArrayPrefix "foo";
    sfArrayExtent 3;
    sfArrayGenerator extends {
      sfIsGenerator true;
      element APPLY {sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Constraint";
sfConstraintAggregated false;
val VAR5;
};
      [ sfTemp ] unique47 extends DATA {
        [ sfAggregatedConstraintSource ] unique50 [|"elements", "element:val", "element_vals"|];
        [ sfAggregatedConstraintFreeVars ] element_vals [|"one", "two", "three"|];
      }
      unique48 APPLY {sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Constraint";
sfConstraintAggregated false;
list theList;
el element:val;
[ sfConstraint ] unique49 "member(el, list)";
};
    }
    foo0 extends {
      element extends DATA {
        val "one";
      }
      [ sfTemp ] unique47 extends DATA {
        [ sfAggregatedConstraintSource ] unique50 [|"elements", "element:val", "element_vals"|];
        [ sfAggregatedConstraintFreeVars ] element_vals [|"one", "two", "three"|];
      }
      unique48 extends DATA {
        list [|"one", "two", "three", "four"|];
        el "one";
      }
      sfArrayIndex 0;
      sfArrayTag "foo0";
    }
    foo1 extends {
      element extends DATA {
        val "two";
      }
      [ sfTemp ] unique47 extends DATA {
        [ sfAggregatedConstraintSource ] unique50 [|"elements", "element:val", "element_vals"|];
        [ sfAggregatedConstraintFreeVars ] element_vals [|"one", "two", "three"|];
      }
      unique48 extends DATA {
        list [|"one", "two", "three", "four"|];
        el "two";
      }
      sfArrayIndex 1;
      sfArrayTag "foo1";
    }
    foo2 extends {
      element extends DATA {
        val "three";
      }
      [ sfTemp ] unique47 extends DATA {
        [ sfAggregatedConstraintSource ] unique50 [|"elements", "element:val", "element_vals"|];
        [ sfAggregatedConstraintFreeVars ] element_vals [|"one", "two", "three"|];
      }
      unique48 extends DATA {
        list [|"one", "two", "three", "four"|];
        el "three";
      }
      sfArrayIndex 2;
      sfArrayTag "foo2";
    }
  }
  diff extends DATA {
    [ sfAggregatedConstraintSource ] unique50 [|"elements", "element:val", "element_vals"|];
    [ sfAggregatedConstraintFreeVars ] element_vals [|"one", "two", "three"|];
  }
  genList extends DATA {
    theList [|"one", "two", "three", "four"|];
    aList [|"one", "two", "three", "four"|];
  }
}






******************** PHASE sfAsComponentDescription *********************
theList [|"one", "two", "three", "four"|];
elements extends DATA  {
  sfArrayPrefix "foo";
  sfArrayExtent 3;
  sfArrayGenerator extends  {
    sfIsGenerator true;
    element APPLY {sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Constraint";
sfConstraintAggregated false;
val VAR34;
};
    unique48 APPLY {sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Constraint";
sfConstraintAggregated false;
list theList;
el element:val;
[ sfConstraint ] unique49 "member(el, list)";
};
  }
  foo0 extends  {
    element extends DATA  {
      val "one";
    }
    unique48 extends DATA  {
      list [|"one", "two", "three", "four"|];
      el "one";
    }
    sfArrayIndex 0;
    sfArrayTag "foo0";
  }
  foo1 extends  {
    element extends DATA  {
      val "two";
    }
    unique48 extends DATA  {
      list [|"one", "two", "three", "four"|];
      el "two";
    }
    sfArrayIndex 1;
    sfArrayTag "foo1";
  }
  foo2 extends  {
    element extends DATA  {
      val "three";
    }
    unique48 extends DATA  {
      list [|"one", "two", "three", "four"|];
      el "three";
    }
    sfArrayIndex 2;
    sfArrayTag "foo2";
  }
}
diff extends DATA  {
  [ sfAggregatedConstraintSource ] unique50 [|"elements", "element:val", "element_vals"|];
  [ sfAggregatedConstraintFreeVars ] element_vals [|"one", "two", "three"|];
}
genList extends DATA  {
  theList [|"one", "two", "three", "four"|];
  aList [|"one", "two", "three", "four"|];
}







SFParse: SUCCESSFUL
