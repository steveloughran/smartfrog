#include "/org/smartfrog/functions.sf"

Squares extends Constraint {
   [sfSource] -- LAZY Board;
   [sfPrefix] -- "square";
   [sfPath] -- LAZY val;
   [sfUpdate] squares;
   [sfConstraint] cons "true";  //some assignments may be added automatically through squares...
}


SuDoko9 extends {

   puzzle TBD;  

   Board extends Array {
      [sfPrefix] -- "square";
      [sfExtent] -- [9,9];
      [sfGenerator] -- extends ArrayGenerator, Constraint {
	  val VAR "[1..9]";
      }
    }

   PreValues extends Squares {
      squares puzzle;
   }
    
   Constraints extends Array {
      [sfPrefix] -- "cons";
      [sfExtent] -- 9;
      [sfGenerator] -- extends ArrayGenerator, Constraint {
	     [sfContext] index sfIndex;  //local sfIndex
	     [sfSource] -- LAZY Board;
	     [sfPrefix] -- "square";
	     [sfPath] -- LAZY val;
             [sfPred] -- (index == LAZY sfIndex0); 
             [sfUpdate] ver;
	     [sfPred] -- (index == LAZY sfIndex1);
             [sfUpdate] hor;
	     [sfPred] --  (index == (((LAZY sfIndex1 / 3)*3)  + (LAZY sfIndex0 / 3)));    
             [sfUpdate] sq;
	     [sfConstraint] -- "alldifferent(hor), alldifferent(ver), alldifferent(sq)";
	     }
   }  


   Label extends Squares {
        cons "labeling(squares)";
   }

   PrintSolution extends PrettyPrint {
      [sfSource] -- LAZY Board;
      [sfPrefix] -- "square";
      [sfPath] -- LAZY val;
      [sfUpdate] output;
   }

   WriteBack extends PolicyEvaluation {
      [sfEffects] -- extends {
         puzzle PrintSolution:output;
      }
   }

}

sfConfig extends SuDoko9 {
   puzzle [ 
     	             [[4,0],8], [[6,0],5],
                     [[0,1],1], [[2,1],6],
		     [[5,2],6], [[6,2],2], [[7,2],7], [[8,2],9],
                     [[7,3],6], [[8,3],1],
                     [[1,4],2], [[3,4],4], [[5,4],9], [[7,4],8],
		     [[0,5],8], [[1,5],5], 
                     [[0,6],9], [[1,6],1], [[2,6],2], [[3,6],5],
                     [[6,7],7], [[8,7],2],
		     [[2,8],8], [[4,8],4]
	   ];

}