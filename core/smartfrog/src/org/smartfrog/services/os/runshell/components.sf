/** (C) Copyright 1998-2004 Hewlett-Packard Development Company, LP

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

For more information: www.smartfrog.org

*/

#include "org/smartfrog/components.sf"
#include "/org/smartfrog/predicates.sf"

RunShellSchema extends Schema {
    shellCmd extends String;
    exitCmd extends OptionalString;
    workDir extends OptionalString;
    envProperties extends OptionalVector;
    lineReturn extends OptionalString;
    useExitCmd extends Boolean;
    waitSignalGoAhead extends OptionalBoolean;
    // 5- info log, 1 - Critical. Use -1 to avoid log
    logLevel extends OptionalInteger;
    printStack extends OptionalBoolean;
    delayBetweenCmds extends OptionalInteger;
    shouldDetach extends OptionalBoolean;
    processID extends OptionalString;
    
    /**
     * any arguments to the shell
     */
     shellArguments extends OptionalVector;
     
     //also, every nested element beginnng with shellCmdAtt  
     //will be added to the list of arguments *after* the shellArguments vector 
     //and every nested element beginnng with shellCmdAtt and ending in 'b' 
     //will be appended to the previous argument.  

    /**
     * terminate on completion
     */
    shouldTerminate extends OptionalBoolean;

    /**
     terminate if the exec failed (only valid if shouldTerminate=false)
     */
    terminateOnFailure extends OptionalBoolean;

    //some are runtime only
    /*
     status extends OptionalString;
     exitValue extends OptionalInteger;
     */

}

/**
 * execute an arbitrary program
 */
ExecuteProgram extends Prim {
   runShellSchema extends RunShellSchema;
   sfClass "org.smartfrog.services.os.runshell.RunShellImpl";
   useExitCmd false;
   terminateOnFailure true;
}

/**
 * this is the component for running a shell script
 */
RunShellScripts extends ExecuteProgram {
   //processName ""; //Mandatory
   //processId   ""; //Optional
   //---shell command
   shellCmd    "/etc/bash";

   //lineReturn "\n";

   //---shellWorkingDirectory
   //workDir      ".";
   //envProperties ["SFHOME=.","JAVA_HOME=/"]; //Example

   // Commands: every String or Vector of Strings starting with 'cmd'
   // Examples:
   // cmdCD "cd /";
   // cmdExport "export JAVA_HOME=/";
   // cmdBatch ["cd ..",cd -","ls"];

   exitCmd "exit 0";
   useExitCmd true; // Should I use exitCmd at the end of the script?
   terminateOnFailure false;
   shouldTerminate true;
   //delayBetweenCmds 0; // 0 by default. In secs.

   //outputMsgTo obj      // Object that implements org.smartfrog.services.display.PrintMsgInt       //services.display.SFDisplay uses it
   //errorMsgTo  obj      // Object that implements org.smartfrog.services.display.PrintErrMsgInt    //services.display.SFDisplay uses it
   //outputStreamTo       // Object that implements org.smartfrog.services.utils..OutputStreamIntf
   //errorStreamTo        // Object that implements org.smartfrog.services.utils..StreamIntf
   //waitSignalGoAhead    false; // Should the batch be done step by step?

   //---terminate when spanned shell terminates?
   //shouldTerminate true; //Default true

   //---detach component from its parent when spanned process terminates?
   //shouldDetach false;  //Default false

   //---Level log
   //logLevel 2; // 5 all errors, -1 none
   //printStack  false; //default false;
}

BashShellScript extends RunShellScripts {
   shellCmd    "/bin/bash";
   processId   "(bash)";
   lineReturn "\n";
}

WinNTShellScript extends RunShellScripts {
   shellCmd    "cmd.exe";
   processId   "(WinNT)";
   lineReturn "\n";
}

