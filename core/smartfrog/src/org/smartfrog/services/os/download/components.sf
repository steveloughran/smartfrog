/** (C) Copyright 1998-2004 Hewlett-Packard Development Company, LP

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

For more information: www.smartfrog.org

*/

#include "org/smartfrog/components.sf"
#include "org/smartfrog/functions.sf"
#include "org/smartfrog/predicates.sf"
#include "org/smartfrog/sfcore/workflow/components.sf"
#include "org/smartfrog/services/filesystem/components.sf"
#include "org/smartfrog/services/os/runshell/components.sf"


DownloadComponent extends WorkflowPrim {

    downloadSchema extends DeletableFileSchema  {

        /**
         * URL is a string
         */
        url extends String;

        /**
         * local file is a string or a file reference
         */
        toLocalFile extends Compulsory;

        /**
         * block size to use
         */
        blocksize extends Integer;

        /**
         * terminate after downloading
         */
        sfShouldTerminate extends Boolean;
        shouldTerminate extends Boolean;
    }
    sfClass "org.smartfrog.services.os.download.DownloadImpl";
    blocksize 1024;
    //real termination attribute. shouldTerminate is kept for legazy reasons
    sfShouldTerminate shouldTerminate;
    shouldTerminate false;
    deleteOnExit false;
}

/**
 * this was the original download component; DownloadComponent has been
 * added as a predecessor with different defaults and a schema
 */
Downloader extends DownloadComponent {
    sfExport false;
    url "system.tar";            // set this to the URL to download
    toLocalFile "/tmp/download"; // set this to the name of the file to create
    shouldTerminate true;
}


RunCommand extends BashShellScript {
   exitCmd "exit 0"; // Exit command for shell: bash
   useExitCmd true; // Should I use exitCmd at the end of the script?

    logLevel 2;
    sfExport false;
   //---terminate when spanned shell terminates?
   shouldTerminate true; //shouldTerminate true; //Default true
}


UnTar extends RunCommand {
    processName "untar";

    filename "/tmp/download";     // set this to the file to untar
    targetDir "/tmp";             // set this tot the directory for untaring into

    workDir targetDir;
    shellCmd "tar";
    shellAtt_options "-xf ";
    shellAtt_filename filename;
}

RunInstall extends RunCommand {
    processName "runInstall";
    installScript "install.sf";    // set this to the install script
    installScriptContext "/tmp";   // set this to the dirctory in whixh to run it

    shellCmd installScript;
    workDir installScriptContext;
}

DeleteFiles extends RunCommand {
    processName "deleteFiles";
    files "";   // set this to the files and directories to delete

    shellCmd "rm";
    shellAtt_options "-rf";
    shellAtt_file files;
}

Install extends Try {
    file "system.tar";
    directory "/tmp";
    installScriptContext directory;
    installScript "install.sh";
    localFile "/tmp/tmp.tar";

    action extends LAZY Sequence {
//        actions extends LAZY {
            download extends Downloader {
                url ATTRIB file;
                toLocalFile ATTRIB localFile;
            }
            untar extends UnTar {
                targetDir ATTRIB directory;
                filename ATTRIB localFile;
            }
            runInstall extends RunInstall {
                installScript PARENT:ATTRIB installScript;
                installScriptContext  PARENT:ATTRIB installScriptContext;
            }
//        }
    }

    abnormal extends LAZY DeleteFiles {
         files extends concat {
             localFile PARENT:ATTRIB localFile;
             -- " ";
             tarDirectory ATTRIB directory;
         }
    }
}

//Used in SFParser Ant Test.
sfConfig extends Install;

