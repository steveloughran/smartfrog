/** (C) Copyright 1998-2007 Hewlett-Packard Development Company, LP

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

For more information: www.smartfrog.org

*/


#include "/org/smartfrog/sfcore/workflow/conditional/components.sf"
#include "/org/smartfrog/sfcore/workflow/combinators/components.sf"
#include "/org/smartfrog/sfcore/workflow/conditional/conditions/components.sf"

/*
 this file declares components that can act as test deployers.

 * This is the workflow implemented by this component
 * sfDeploy:
 *      -all attributes are read, validated.
 * sfStart:
 *   -"condition" is deployed and evaluated. If false, the component skips all other work and goes to
 *    workflow termination.
 *   -"action" is deployed.
 *   -"teardown" is deployed, for starting later
 *   -"action" is started. 
 *   -if action deployment or startup raised an exception, if exitType=="normal" then
 *    the exception is rethrown. If exitType=="abnormal", then exitText is looked for
 *    in the exception string; a match implies an expected failure => normal termination
 *   -the action terminator is started
 *   -the tests are run
 *
 * The effect is only run the tests if startup worked.
 *
 * sfTerminateWith
 *  -the teardown component is started
 *  -the application is terminated
 *  -the tests are terminated

 * 2007-01: the teardown code is disabled. Use the workflow to better
 *  choreograph teardown
 */


TestCompound extends ActionCompound {
  TestCompoundSchema extends Schema {
    condition extends OptionalCondition {
      description "a condition to evaluate to decide whether to run this test or not";
    }
    /*
    waitFor extends OptionalCondition {
      description "a condition to wait for, before running the tests";
    }
    */
    description extends String {
      description "description of the test";
    }
    undeployAfter extends Integer {
      description "time in milliseconds to undeploy the action and assertions; use -1 for no limit";
    }
    exitType extends String {
      description "string which must be found in the termination errortype attribute using a case sensitive match";
    }
    exitText extends String {
      description "string which must be found in the TerminationRecord.description attribute using a case sensitive match";
    }
    startupTimeout extends Integer {
      description "time in milliseconds to trigger an exception if the component is not started; use -1 for no limit";
    }
    expectTerminate extends Boolean {
      description "is the action component expected to terminate itself?";
    }
    tests extends OptionalCD {
      description ##A component that is deployed after the action component is successfully deployed,
        and which contains tests or assertions to deploy.
        The components is only deployed if the action deployment was successful.
        1. If this component terminates successfully, then the test is deemed to be successful, and
        the TestCompound terminates the tests and runs teardown.
        2. If this component does not terminate, then it is kept running (and pinged during pings)
        until the action terminates or the test is undeployed.
        #;
    }
    testTimeout extends Integer {
      description ##
        time in milliseconds to trigger an exception if the tests do not finish;
        use -1 for no limit"
        #;
    }
    forcePing extends Boolean {
//        NOT IMPLEMENTED
      description "should we force a set of pings?";
    }
    pingInterval extends OptionalInteger {
//        NOT IMPLEMENTED
      description "time in milliseconds between forced pings";
    }

   }
  sfClass "org.smartfrog.services.assertions.TestCompoundImpl";
   //by default, this is a workflow component
  sfShouldTerminate true;
  description "";

  action extends Compound;

  //default to one minute
  undeployAfter 60000;
  //default test delay
  testTimeout 60000;
  //default to one minute
  startupTimeout 60000;
  //default to one minute
  teardownTimeout 60000;

  //dont expect termination
  expectTerminate false;

  exitType "normal";
  exitText "";

  forcePing false;
}

/**
 * this component expects the child to deploy
 */
ExpectDeploy extends TestCompound {

}

/**
 * This component uses workflow components to delay the tests
 * until the waitFor condition evaluates to true.
 */
DeploySequence extends TestCompound {

    waitFor extends True;
    //time in ms to give up
    waitForTimeout 10000;
    //interval in ms between checks
    waitForInterval 200;

    testrun extends Sequence {
        //insert tests here
    }

    //override the normal sequence with the waiting one
    tests extends Sequence {

        wait extends FailingWaitFor {
          condition PARENT:PARENT:waitFor;
          interval waitForInterval;
          timeout waitForTimeout;
        }

        testrun PARENT:PARENT:testrun;

    }
}

/**
 * this component expects the child to terminate itself normally.
 */
ExpectTerminate extends TestCompound {
  description "Expect the deployed action to terminate itself normally, as a successful workflow";
  expectTerminate true;
  exitType "normal";
}

/**
 * an abstract component to represent failures
 */
FailingTestCompound extends TestCompound {

  description "The deployment is expected to fail";

  FailureCompoundSchema extends Schema {

    exceptions extends OptionalVector {

      description ##vector of tuples containing classname and error text substrings to match on,
        all down the nested exception chain. e.g.
        [["SmartFrogResolutionException","unresolved reference"]];
        or
        [["",""],["NullPointerException",""];
      #;
    }
  }

  expectTerminate true;
  exitType "abnormal";
}


/**
 * This component expects failure on deployment
 */
ExpectDeployFailure extends FailingTestCompound {

}



/**
 * This component expects to deploy, but for liveness tests to fail.
 * The component will run through a set of sfPings() to force this earlier than normal,
 * if forcePing==true
 */
/*
ExpectLivenessFailure extends FailingTestCompound {

  forcePing true;
  pingInterval 0;
}
*/
