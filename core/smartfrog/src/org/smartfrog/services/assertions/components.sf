/** (C) Copyright 1998-2004 Hewlett-Packard Development Company, LP

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

For more information: www.smartfrog.org

*/

/*
 this file declares assertions
 */



 /**
  * Include the core smartfrog components.
  */
 #include "/org/smartfrog/components.sf"
 #include "/org/smartfrog/predicates.sf"


/**
 * the schema for assertions
 */
AssertSchema extends Schema {
    //a fact that must resolve to true
    isTrue extends OptionalBoolean;
    //a fact that must be fale
    isFalse extends OptionalBoolean;
    //the name of a reference which does not have to be defined, but when it
    //is, the evaluatesTrue and evaluatesFalse checks apply
    reference extends OptionalCD;
    //name of a boolean test() method that returns true when called on the reference
    evaluatesTrue extends OptionalString;
    //name of a boolean test() method that returns false when called on the reference
    evaluatesFalse extends OptionalString;
    //flag to enable startup checking (default: true)
    checkOnStartup extends OptionalBoolean;
    //flag to enable liveness checking (default: true)
    checkOnLiveness extends OptionalBoolean;
}

/**
 * the assert component can be used to declare invariants which
 * must hold for the system to be valid
 */
Assert extends Prim {
    assertSchema extends Schema;
    sfClass "org.smartfrog.services.assertions.AssertComponent";
    isTrue true;
    isFalse false;
    checkOnStartup true;
    checkOnLiveness true;
}