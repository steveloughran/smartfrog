
Dependency extends Prim {
     sfClass "com.hp.ov.cc.statemodel.dependency.Dependency";
     sfUpdatable true;
}

State extends Prim {
     sfClass "com.hp.ov.cc.statemodel.state.State";
     sfUpdatable true;

     threadpool LAZY PROCESS:threadpool; // default place for the threadpool
     model LAZY ROOT;

     // the next three will be replaced by attribute tagging when implemented!
     stateData [];   // which of my attributes do I needs to know as a consistent set
     stateListen []; // which of my attributes do I needs to be informed when they change
     stateNotify []; // what attributes will I will inform the system when I change them
}

Composite extends Compound {
     sfClass "com.hp.ov.cc.statemodel.state.Composite";
     sfUpdatable true;

     threadpool LAZY PROCESS:threadpool; // default place for the threadpool

     inputConnectors extends Compound {
        sfUpdatable true;
     }
     outputConnectors extends Compound {
        sfUpdatable true;     
     }
}

NWayComposite extends Composite {
     sfClass "com.hp.ov.cc.statemodel.state.NWayComposite";
     sfUpdatable false;

     template TBD;
     instances TBD; // either a number or a component description containing named component descriptions of paramter data
}


Model extends Composite {
     sfClass "com.hp.ov.cc.statemodel.state.Model";

     threadpool LAZY PROCESS:threadpool; // default place for the threadpool
     run true; // set to false if you do not want the model to generate new notification sweeps, true if do
}

ModelTerminator extends State {
    sfClass "com.hp.ov.cc.statemodel.modeltermination.ModelTermination";
    stateData ["required"];
    stateListen ["required"];

    toTerminate LAZY ROOT;
    detachFirst false;
    required TBD;
}

Counter extends State {
    sfClass "com.hp.ov.cc.statemodel.statecomponents.Counter";
    stateData ["tick", "tock", "reset"];
    stateListen ["tick", "tock", "reset"];
    stateNotify ["count"];
    count 0;

    reset false;
    tick TBD;
    tock TBD;
}

Latch extends State {
    sfClass "com.hp.ov.cc.statemodel.statecomponents.Latch";
    stateData ["reset"];
    stateListen ["reset"];
    stateNotify ["value"];

    value resetValue;
    resetValue TBD;
    reset TBD;
}

TimedStateUpdate extends State {
    sfClass "com.hp.ov.cc.statemodel.statecomponents.TimedStateUpdate";
    stateData ["run"];
    stateListen ["run"];
    stateNotify [];

    on TBD;       // which state to assert
    value TBD;    // which value
    state TBD;    // which attribute
    interval TBD; // in milliseconds
    run TBD;      // whether to be applying the state value

    // constants for defining intervals
    ms 1;
    sec 1000;
    min (60*sec);
    hr (60 * min);
    day (24 * hr);
}


AndConnector extends Prim {
    sfClass "com.hp.ov.cc.statemodel.connector.AndConnector";
    sfUpdatable true;
}

OrConnector extends Prim {
    sfClass "com.hp.ov.cc.statemodel.connector.OrConnector";
    sfUpdatable true;
}

NorConnector extends Prim {
    sfClass "com.hp.ov.cc.statemodel.connector.NorConnector";
    sfUpdatable true;
}

NandConnector extends Prim {
    sfClass "com.hp.ov.cc.statemodel.connector.NandConnector";
    sfUpdatable true;
}

