/** (C) Copyright 1998-2004 Hewlett-Packard Development Company, LP

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

For more information: www.smartfrog.org

*/

#include "org/smartfrog/components.sf"
#include "org/smartfrog/sfcore/workflow/components.sf"

/**
 * dataProvider creates a Sequence component.
 * It's sub-components define the values of the attributes that are referenced
 * by dataConsumer component.
 * Hence, once dataProvider is started the references in dataConsumer are
 * resolved at run-time.
 */


/**
 * sfConfig defines a Sequence component in which the sub-components operate
 * sequentially.
 */
sfConfig extends Sequence {
        /**
         * The Run component creates its only sub-component and then leaves it
         * parentless to fend for itself.
         */
    doit extends Run {
           /**
            * The basic configuration of the Run component is defined under
            * "action" component.
            */
        action extends LAZY Compound {
            /**
             * SmartFrog attribute for defining the name of first component
             * (of the application tree) to be deployed in the process.
             */
          sfProcessComponentName "dataProvider";
          step1 extends Compound {
            step2 extends Compound {
            /**
             * This component has a Lazy reference and so it is
             * resolved at run-time.
             */
            step3 extends LAZY {
                //inside data structure
                value "hello world! (data attribute)";
            }
            step4 extends Compound {
               //inside a compound
                value "PRIM hello world! (component attribute)";
                            value2 "PRIM2 hello World!";
            }
            step5 extends Compound {
               //inside a compound
               /**
                * This attribute has a Lazy reference and so it is
                * resolved at run-time.
                */
                value LAZY PARENT:step4:value2;
            }
          }
        }
      }
    }
}


