#include "/org/smartfrog/functions.sf"
#include "/org/smartfrog/examples/orchdws/thresholder/components.sf"
#include "/org/smartfrog/examples/orchdws/sf/webTemplate.sf"
#include "/org/smartfrog/examples/orchdws/balancer/components.sf"
#include "/org/smartfrog/services/dependencies/statemodel/components.sf"
#include "/org/smartfrog/services/dependencies/threadpool/components.sf"


ServerInstance extends Composite {  
   instance extends DesiredObservedBaseStateComponent {  
   	  sfClass "org.smartfrog.examples.orchdws.balancer.ServerInstanceImpl";   
      template extends LAZY WebServerTemplate;
      lb LAZY PARENT:ATTRIB loadbal;
   }

   loadbalStartDependency extends Dependency {
      on LAZY instance;
      by LAZY lbbs;
      sfByPath LAZY binding;
      relevant (!LAZY by:bound);
      enabled (LAZY on:oup && LAZY on:dup);      
   }

   loadbalStopDependency extends Dependency {
      on LAZY instance;
      by LAZY lbbs;
      sfByPath LAZY binding;
      relevant (LAZY by:bound);
      enabled (!LAZY on:dup);
   }
}

loadbalBinding extends Composite {  
   binding extends BaseStateComponent {
   		sfClass "org.smartfrog.examples.orchdws.balancer.LoadBalancerBindingImpl";      
   	    bound LAZY up;  //From BaseStateComponent
   	    lb LAZY PARENT:ATTRIB loadbal;
   }

   observedDependency extends Dependency {
      on LAZY PARENT:binding;
      by LAZY servers; 
      sfByPath LAZY instance;
      relevant (LAZY by:oup);
      enabled (!LAZY on:bound);
   } 
}

Shutdown extends EnableDisableComponent;

EnableDisableComponent extends {
   [sfSource] -- LAZY servers;
   [sfPrefix] -- "server";
   [sfPath] -- LAZY instance:dup; 
   [sfPred] proposition;
   [sfUpdate] update false;
}

EnableComponent extends EnableDisableComponent {
   proposition ((LAZY sfIndex < LAZY minInstances) || (LAZY sfIndex == (LAZY noserversUp)));
   update true;
}

DisableComponent extends EnableDisableComponent {
   proposition (((LAZY sfIndex)+2) > (LAZY noserversUp));
}

Shutdown extends EnableDisableComponent;

ServiceOrchestration extends Model {
   sfProcessHost           balancerHost;
   sfProcessComponentName "serviceOrch";
   
   -- extends Array {
      sfExtent maxInstances;
      sfPrefix "PARENT:servers:server";
      sfGenerator extends ArrayGenerator, ServerInstance;
   }

   -- extends Array {
      sfExtent maxInstances;
      sfPrefix "PARENT:lbbs:server";	
      sfGenerator extends ArrayGenerator, loadbalBinding;
   }

   servers extends Composite;
   lbbs extends Composite;
   
   loadgen extends BaseStateComponent {
      ok LAZY up;  //From BaseStateComponent
   }
   
   loadgenStartDependency extends Dependency {
      on LAZY servers:server0:instance;
      by LAZY loadgen;
      relevant (!LAZY by:ok);
      enabled ((LAZY on:oup) && (LAZY on:dup));
   } 
   
   loadgenStopDependency extends Dependency {
      on LAZY servers:server0:instance;
      by LAZY loadgen;
      relevant (LAZY by:ok);
      enabled (!LAZY on:dup);
   } 
   
   serverHosts extends ROOT:serverHosts;
   
   maxInstances 3;/*extends Constraint {  BUG-FIX:SF-1022
         servers LAZY PARENT:serverHosts;
         [sfReturn] size VAR;
         [sfConstraint] -- "length(servers, size)";
      }*/
      
   minInstances 1;
   
   loadbal extends Balancer {
      upper 800;
      lower 350;
      delay 0;
      up true; 
      shutdown false;
      timer false;
      sleep 30000;

      serverHosts LAZY PARENT:serverHosts;
      dataSource LAZY loadGenerators;
      lbbs LAZY PARENT:lbbs;

       handleupper extends DynamicPolicyEvaluation {
          [sfGuard] -- (!LAZY timer);
          [sfGuard] -- (LAZY up);
	      [sfGuard] -- ((LAZY delay>upper) || ((LAZY noserversUp) < minInstances));
	      [sfGuard] -- ((LAZY noserversUp) < maxInstances);
		  [sfEffects] -- extends EnableComponent;
		  [sfEffects] -- extends {
             timer true;
	      }
	  }
  
      handlelower extends DynamicPolicyEvaluation {
         [sfGuard] -- (!LAZY timer);
         [sfGuard] -- (LAZY up);
      	 [sfGuard] -- (LAZY delay<lower);
      	 [sfGuard] --  ((LAZY noserversUp) > minInstances);
         [sfEffects] -- extends DisableComponent;
         [sfEffects] -- extends {
             timer true;
	     }
      }
      
      timerstop extends Transition{
         sfGuard (LAZY timer);
         sfEffects extends {
            timer false;
         }
      }
      
      handleshutdown extends DynamicPolicyEvaluation {
             [sfGuard] -- (LAZY shutdown && LAZY up);    
             [sfGuard] -- ((LAZY noserversObservedUp)>0);
             [sfEffects] -- extends Shutdown;
             [sfEffects] -- extends {
                up false;
             }
      }
   }
  
   noserversUp extends LazyConstraint {
      [sfSource] -- LAZY servers;
      [sfPrefix] -- "server";
      [sfPath] -- LAZY instance:dup; 
      [sfPred] -- LAZY instance:dup;   //Based on desire
      [sfUpdate] input;
      [sfReturn] size VAR;
      [sfConstraint] -- "length(input, size)";
   }
   
   noserversObservedUp extends LazyConstraint {
      [sfSource] -- LAZY servers;
      [sfPrefix] -- "server";
      [sfPath] -- LAZY instance:oup; 
      [sfPred] -- LAZY instance:oup;   //Based on observed...
      [sfUpdate] input;
      [sfReturn] size VAR;
      [sfConstraint] -- "length(input, size)";
   }
   
   -- extends HTTPResponseMeasure;
   -- extends ConnectionMeter;
}



