/** (C) Copyright 1998-2004 Hewlett-Packard Development Company, LP

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

For more information: www.smartfrog.org

*/

#include "org/smartfrog/components.sf";


yellow  "0xFFFF00";
red     "0xFF0000";
blue    "0x0000FF";
green   "0x00FF00";
white   "0xFFFFFF";
black   "0x000000";


Graph extends Compound {
        sfClass "org.smartfrog.examples.dynamicwebserver.gui.graphpanel.GraphImpl";
        dataDisplayed "Type of data ";

        display true;   // set to false if you don't want a display
        minX 0;
        maxX 100;
        stepX 1;    // (maxX - minX / stepX) is the number of samples you'll display
        minY 0;
        maxY 100;   // min and max number of values collected from the data source

        gridStepX 10;   // parameters to display the grid
        gridStepY 10;
        panelWidth 300; // the display panel size
        panelHeight 150;
        pollingPeriod 3; // the period at which the data source will be polled in sec
        graphPencilWidth 2;
        xOffset 10;
        yOffset 10;

        positionDisplay "NW";

        histogram false;
        pencilColour ATTRIB yellow;

        // dataSource LAZY ATTRIB ... // a data source to poll
        // keysAllowed true;    // false by default
        // adjust true;     // graph will self adjust to max value if set to true
        // frameTitle "Graph";
}

Meter extends Graph {
        sfClass "org.smartfrog.examples.dynamicwebserver.gui.graphpanel.TideMeterImpl";
        maxResetPeriod 20;  // number of measures where it hasn't changed before max is reset
        minResetPeriod 40;
        lowerThresholdValue 5;
        // both min & max will be reset a first time as soon as the values received are above  lowerThresholdValue

        minX 0;
        maxX 10;
        stepX 10; // (maxX - minX / stepX) = 1 : we're displaying one sample (hence a bar)

        panelWidth 150;
        panelHeight 400;
        histogram true;     // histogram to get a bar (otherwise it's a point)
        graphPencilWidth 1;
        xOffset 1;

        positionDisplay "NW";
        pencilColour ATTRIB green;
}
