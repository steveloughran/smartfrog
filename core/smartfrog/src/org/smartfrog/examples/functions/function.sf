/** (C) Copyright 1998-2004 Hewlett-Packard Development Company, LP

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

For more information: www.smartfrog.org

*/

/**
 * This example shows the use of functions through a counter implementation. 
 */


#include "org/smartfrog/components.sf"
#include "org/smartfrog/examples/counter/components.sf"

/**
 * Inculde the Parser extensions for functions.
 */
#include "org/smartfrog/functions.sf"


/**
 * Defines the global attribute values.
 */ 
value1 43;
value2 56;

string1 "value is ";
string2 "\n";

/**
 * Base obtains the value of the evaluated function "concat".
 */
Base extends concat {
    a ATTRIB string1;
    /**
    * b obtains the value of the evaluated function "sum".
    * The "sum" function sums each of its attributes type-caste to integers.
    */
    b extends sum {
       first ATTRIB value1;
       second ATTRIB value2;
    }
    c ATTRIB string2;
}

/**
 * innerVector obtains the value of the evaluated function "vector".
 * innerVector forms the inner vector in attribute "message" of Counter.
 */
innerVector extends vector {
    a ATTRIB string1;
    /**
    * b obtains the value of the evaluated function "sum".
    */
    b extends sum {
       first ATTRIB value1;
       second ATTRIB value2;
    }
}


/**
 * outerVector obtains the value of the evaluated function "vector".
 * The "vector" function creates a vector of its attributes.
 * outerVector forms the outer vector in attribute "message" of Counter.
 */
outerVector extends vector{
   -- ["elementA","elementB"];
   -- "Message from outerVector";
   /**
    * The attribute obtains the value of the evaluated function "vector".
    */
   -- extends innerVector;
}

CounterExample extends Counter {
   /**
    * The optional attribute "message" of Counter component obtains the value 
    * of the evaluated function "concat".
    * The "concat" function takes each of its attribute parameters and 
    * concatenates them in the order of definition.
    */
   message extends concat {
       /**
            * String attribute parameter to concat function.
            */
           hello "hello - here is a constructed message\n";
       /**
            * Component attribute parameter to concat function.
            * This attribute is converted to string before concatenation.
            */
       base extends Base;
       /**
            * String attribute parameter to concat function.
            */
       bye "goodbye\n";
       /**
            * Component attribute parameter to concat function.
            * This attribute is converted to string before concatenation.
            */
           newVector extends outerVector;
       /**
            * String attribute parameter to concat function.
            * The double-hyphen "--"  indicates that attribute has no name 
            * because name is not important here. 
            */
           -- ATTRIB string2;
   }
   limit 5;
}

sfConfig extends CounterExample;