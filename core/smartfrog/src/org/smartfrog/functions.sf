/** (C) Copyright 1998-2004 Hewlett-Packard Development Company, LP

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

For more information: www.smartfrog.org

*/


Function extends {
   phase.function "org.smartfrog.sfcore.languages.sf.ConstructFunction";
   sfFunctionClass "";
   //sfFunctionLazy false;
}

/**
 * Creates a vector from all children
 */
vector extends Function{
   sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Vector";
}

/**
 * Creates a vector from all children
 */
System extends Function{
   sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.SystemComponent";
   system TBD;
}

/**
 takes the vector attributes and puts them
 together into a new vector. Ignores non-vector attribute
 */
append extends Function{
   sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Append";
}


concat extends Function {
    sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Concatenate";
}

formatString extends Function{
    sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Format";
}

sum extends Function{
    sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Sum";
}

plus extends sum;

product extends Function{
    sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Product";
}

minus extends Function{
    sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Minus";
}

divide extends Function{
    sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Divide";
}

mod extends Function{
    sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Mod";
}

implies extends Function{
    sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Implies";
}

xor extends Function{
    sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Xor";
}

and extends Function{
    sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.And";
}

or extends Function{
    sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Or";
}

not extends Function{
    sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Not";
}


GE extends Function{
    sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.GE";
}

LE extends Function{
    sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.LE";
}

GT extends Function{
    sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.GT";
}

LT extends Function{
    sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.LT";
}

EQ extends Function{
    sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.EQ";
}

NE extends Function{
    sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.NE";
}



ifThenElse extends Function{
    sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.IfThenElse";
}

next extends Function{
    sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Next";
}

random extends Function{
    sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Random";
}

date extends Function{
    sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Date";
}

userinput extends Function{
    sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.UserInput";
}

ref extends Function{
    sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Ref";
}

Ref extends Function{
    sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Ref";
}

PolicyRef extends Ref {
    sfFunctionLazy true;
    returnNULLOnException;
    doNotNullifyParent;
}

RawRef extends PolicyRef {
    lazy true;
}

AggregateSpecifierArrayPath extends {
    [sfIgnoreLink] array;
    [sfIgnoreLink] path;
}

AggregateSpecifier extends AggregateSpecifierArrayPath {
    sfIsAggregateSpecifier;
    [sfIgnoreLink] pred;
    unify;
}

UpdateSpecifier extends AggregateSpecifier {
    [sfIgnoreLink] key;
    [sfIgnoreLink] update;
    [sfIgnoreLink] deployComponent;
}

Constraint extends Function, AggregateSpecifierArrayPath {
     sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Constraint";
}

Var extends {
  IsConstraintVar;
}

AutoVar extends {
  IsConstraintVar;
  auto;
}

UserVar extends {
  IsConstraintVar;
  user;
}

DefaultVar extends {
  IsConstraintVar;
  default TBD;
}

LabellingPoint extends {
  IsLabelling;
}

LazyConstraint extends Constraint {
     sfFunctionLazy true;
}

Array extends Function {
     sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Array";
}

ArrayGenerator extends {
     sfIsArrayGenerator;
}

Aggregator extends Function, AggregateSpecifierArrayPath {
     sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.Aggregator";
}

PrettyPrint extends Function, AggregateSpecifierArrayPath {
     sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.PrettyPrint";
}

nsum extends Function {
     sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.NSumProduct";
     sfFunctionQual "sum";
}

nproduct extends Function {
     sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.NSumProduct";
     sfFunctionQual "product";
}

alldifferent extends Function {
     sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.AllDifferent";
}

AllocatorList extends Constraint {
   list extends AggregateSpecifier {}
}

ResourceAllocator extends Constraint {
   providerList extends AllocatorList{}
   providers providerList:list;

   providerCapsList extends AllocatorList{}
   providerCaps providerCapsList:list;

   consumerList extends AllocatorList{}
   consumers consumerList:list;

   consumerReqsList extends AllocatorList{}
   consumerReqs consumerReqsList:list;

   allocationList extends AllocatorList{}
   allocations allocationList:list;

   colocations [];
   nocolocations [];
   hosted [];


   [sfConstraint] -- "allocate(providers, providerCaps, consumers, consumerReqs, allocations, colocations, nocolocations, hosted)";
}

DynamicPolicyEvaluation extends Function {
    sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.DynamicPolicyEvaluation";
    sfFunctionLazy true;
}

Effect extends UpdateSpecifier{}

ApplyEffects extends Function, UpdateSpecifier {
    sfFunctionClass "org.smartfrog.sfcore.languages.sf.functions.ApplyEffects";
}

PolicyEffects extends ApplyEffects {
    sfFunctionLazy true;
}
