/** (C) Copyright 1998-2006 Hewlett-Packard Development Company, LP

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

For more information: www.smartfrog.org

*/
#include "/org/smartfrog/sfcore/workflow/eventbus/eventbus.sf"
/**
 * Parallel is a modified compound which differs in that the sub-components
 * operate in parallel but do not share the same lifecycle, and in particular
 * the same termination. A Parallel combinator creates no subcomponents until
 * it's sfStart phase at which point all the subcomponents are created in the
 * normal way and with synchronized or asynchronized lifecycle. The Parallel 
 * combinator waits
 * for each of its sub-components to terminate normally at which point it too
 * terminates normally. If an error occurs at any point, or a sub-component
 * terminates abnormally, the Parallel combinator does too.
 *
 */
Parallel extends ActionsCompound {
    sfClass "org.smartfrog.sfcore.workflow.combinators.Parallel";
    parallelSchema extends Schema {
      asynchCreateChild extends OptionalBoolean;
      terminateOnEmptyDeploy extends OptionalBoolean {
        description ##flag which indicates that the parallel component
          should terminate immediately if there are no children to deploy#;
      }
    }  
    // Deploy children in parallel? Set to true to deploy every child component
    //in a new thread
    asynchCreateChild false;
    terminateOnEmptyDeploy false;
}
