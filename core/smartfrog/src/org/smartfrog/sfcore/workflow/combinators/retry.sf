/** (C) Copyright 1998-2006 Hewlett-Packard Development Company, LP

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

For more information: www.smartfrog.org

*/
#include "org/smartfrog/sfcore/workflow/eventbus/eventbus.sf"

/**
 * Retry is a modified compound which differs in that its single sub-component
 * is created and should it terminate abnormally, is recreated. This is
 * repeated a number of times or until the sub-component suceeds. A Retry
 * combinator creates no subcomponents until it's sfStart phase at which point
 * all the subcomponent is created in the normal way. The Retry combinator
 * waits for its sub-component to terminate normally at which point it too
 * terminates normally. If an error occurs at any point, or a sub-component is
 * retried unless a limit is reached in which case it too terminates
 * abnormally.
 */
Retry extends ActionCompound {
    sfClass "org.smartfrog.sfcore.workflow.combinators.Retry";
    retrySchema extends Schema {
        retry extends Integer {
          description "retry interval in milliseconds";
        }
    }
    retry 1;
    count 0;

    sfShouldTerminate true;
}
