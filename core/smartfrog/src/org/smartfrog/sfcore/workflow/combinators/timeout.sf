/** (C) Copyright 1998-2004 Hewlett-Packard Development Company, LP

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

For more information: www.smartfrog.org

*/

#include "/org/smartfrog/predicates.sf"
/*
 * Timeout is a modified compound which differs in that the single
 * sub-component is given a certain amount of time to terminate and if it has
 * not, the timeout combinator terminates it and itself abnormally. The
 * sub-component may, of course, be a further combinator such as a Sequence.
 * The timeout combinator creates its sub-componentent during the sfStart
 * phase The Timeout combinator waits for its sub-components to terminate
 * normally at which point it too terminates normally. If an error occurs at
 * any point, or a sub-component terminates abnormally, or the timeout fires
 * before its sub-component terminates, the Timeout combinator terminates
 * abnormally.
 */
Timeout extends EventCompound {
    sfClass "org.smartfrog.sfcore.workflow.combinators.Timeout";
    timeoutSchema extends Schema {
    //timeout in milliseconds
        time extends Integer;
    //the action to start after the delay has finished        
        action extends CD;
    }
    // action ...
    time 0;
}
