

/*
 * Created on Mon Jun 09 15:18:24 IST 2008
 *
 * Generated by GEMS 
 */
 
package org.smartfrog.authoringtool;


import java.io.File;
import java.util.Vector;
import java.util.LinkedList;
import java.util.List;
import java.util.Hashtable;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;
import org.eclipse.emf.ecore.xmi.impl.XMIResourceFactoryImpl;
import org.gems.designer.ModelInstance;
import org.gems.designer.ModelInstanceRepository;
import org.gems.designer.ModelRepository;
import org.gems.designer.ModelSerializer;
import org.gems.designer.InstanceListener;
import org.gems.designer.model.ModelObject;
import org.gems.designer.model.Root;
import org.gems.designer.model.Visitor;
import org.gems.designer.model.actions.EventInterestFactory;
import org.gems.designer.model.actions.EventInterestFactoryRepository;
import org.gems.designer.model.actions.ModelActionRegistry;
import org.gems.designer.model.actions.ModelActionResult;
import org.gems.designer.model.actions.ModelEventInterest;
import org.gems.designer.model.actions.PersistentModelEventInterest;
import org.gems.designer.model.actions.VisitorInterpreter;
import org.eclipse.emf.common.util.EList;
import org.smartfrog.authoringtool.emf.*;

public class Serializer implements ModelSerializer{
	
	
	public void serializeModel(ModelInstance inst,IFile file, IProgressMonitor monitor) throws Exception{
		serializeToXMI(inst.getRoot(),file);
	}
	public ModelInstance readModel(IFile dest, ClassLoader cl, IProgressMonitor monitor) throws Exception{
		GemsFactory factory = new GemsFactory();
		ResourceSet resourceSet = new ResourceSetImpl();

		
		resourceSet.getPackageRegistry().put(org.smartfrog.authoringtool.emf.impl.SmartfrogPackageImpl.eINSTANCE.getNsURI(),org.smartfrog.authoringtool.emf.impl.SmartfrogPackageImpl.eINSTANCE);
		

	    resourceSet.getResourceFactoryRegistry().getExtensionToFactoryMap().put("sfml", 
		new XMIResourceFactoryImpl());
		
		File f = ModelInstanceRepository.getFile(dest);
		Resource resource = resourceSet.createResource(URI.createFileURI(f.getAbsolutePath()));
		
		ModelInstance inst = null;

		resource.load(null);
		EList contents = resource.getContents();
		org.smartfrog.authoringtool.Root root = null;
		if(contents.size() > 0){
			org.smartfrog.authoringtool.emf.Root eroot = (org.smartfrog.authoringtool.emf.Root)contents.get(0);
			inst = factory.loadModel(eroot);
			
			List<EventInterestFactory> facts = EventInterestFactoryRepository.getInstance().getEventInterestFactories(inst.getRoot().getModelID());
			
			ModelActionRegistry mar = new ModelActionRegistry();
			inst.addInstanceListener(mar);
			EList mementos = eroot.getMementos();
		
			for(Object m : mementos){
				Memento memento = (Memento)m;
				try{
					EventInterestFactory fact = EventInterestFactoryRepository.getInstance().getFactoryByID(memento.getId());
					if(fact != null){
						MementoImpl mimpl = new MementoImpl(memento);
						PersistentModelEventInterest pei = fact.loadInterest(mimpl);
						if(pei != null)
							mar.addInterest(pei);
					}
				}catch (Exception e) {
				}
			}
			
			root = (org.smartfrog.authoringtool.Root)inst.getRoot();
			DependencyModel rr = null;
			if(eroot.getRealRoot() != null)
				rr = (DependencyModel)factory.getPart(eroot.getRealRoot());
			if(rr == null)
			   rr = new DependencyModel();
		    root.setRealRoot(rr);
			
			eroot.getMementos().clear();
		} else {
			inst = ModelRepository.getInstance().getInstanceRepository().getInstance(root.getModelInstanceID());
			root = new org.smartfrog.authoringtool.Root();
			
		    root.setRealRoot(new DependencyModel());
			
			inst.setRoot(root);
		}

		
		
		return inst;
	}
	
	public String getType(){
		return "Smartfrog to XMI";
	}
	public String getFileExtension(){
		return "sfml";
	}

	
	public void serializeToXMI(ModelObject obj, IFile dest) {
		
		try{

		ResourceSet resourceSet = new ResourceSetImpl();

		ModelInstance inst = ModelRepository.getInstance().getInstanceRepository().getInstance(obj.getModelInstanceID());
		org.smartfrog.authoringtool.Root root = (org.smartfrog.authoringtool.Root)ModelRepository.getInstance().getInstanceRepository().getInstance(obj.getModelInstanceID()).getRoot();
		
		LinkedList<PersistentModelEventInterest> peis = new LinkedList<PersistentModelEventInterest>();
		List<InstanceListener> listens = inst.getInstanceListeners();
		for(InstanceListener l : listens){
			if(l instanceof ModelActionRegistry){
				ModelActionRegistry mar = (ModelActionRegistry)l;
				for(ModelEventInterest ei : mar.getInterests()){
					if(ei instanceof PersistentModelEventInterest){
						peis.add((PersistentModelEventInterest)ei);
					}
				}
			}
		}
		for(PersistentModelEventInterest pei : peis){
		    try{
			MementoImpl memento = new MementoImpl();
			memento.setId(pei.getFactoryID());
			pei.saveState(memento);
			root.getModel().getMementos().add(memento.getModel());
			}catch(Throwable whoops){
			 
			}
		}
		
		resourceSet.getPackageRegistry().put(org.smartfrog.authoringtool.emf.impl.SmartfrogPackageImpl.eINSTANCE.getNsURI(),org.smartfrog.authoringtool.emf.impl.SmartfrogPackageImpl.eINSTANCE);
		

		resourceSet.getResourceFactoryRegistry().getExtensionToFactoryMap().put("sfml", 
		new XMIResourceFactoryImpl());
		
		File f = ModelInstanceRepository.getFile(dest);
		Resource resource = resourceSet.createResource(URI.createFileURI(f.getAbsolutePath()));

		resource.getContents().add(root.getEMFObject());

		resource.save(null);
		
		
		DependencyModel rr = root.getRealRoot();
		f = ModelInstanceRepository.getFile(dest);
		f = new File(f.getParentFile(),f.getName()+".gemx");
		resource = resourceSet.createResource(URI.createFileURI(f.getAbsolutePath()));
        resource.getContents().add(root.getRealRoot().getEMFObject());
		resource.save(null);
		root.setRealRoot(rr);

		
		}catch (Exception e) {
			e.printStackTrace();
		}
	}
}

