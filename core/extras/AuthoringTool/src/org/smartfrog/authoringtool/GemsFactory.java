

/*
 * Created on Mon Jun 09 15:18:24 IST 2008
 *
 * Generated by GEMS 
 */
 
package org.smartfrog.authoringtool;


import java.util.Hashtable;
import java.util.LinkedList;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.gems.designer.model.Container;
import org.gems.designer.model.LinkedModel;
import org.gems.designer.model.ModelObject;
import org.gems.designer.ModelInstance;
import org.gems.designer.ModelRepository;
import org.gems.designer.model.Wire;

public class GemsFactory{
	private Root root_;
	//private LinkedList conns_;
	private Hashtable<Object, ModelObject> parts_ = new Hashtable<Object, ModelObject>();;
	private LinkedList<Wire> wires_ = new LinkedList<Wire>();
	private LinkedList<Runnable> requests_ = new LinkedList<Runnable>();
	private Hashtable connected_ = new Hashtable();
	
	public ModelInstance loadModel(org.smartfrog.authoringtool.emf.Root root){
		Root groot = load(root);
		ModelInstance inst = ModelRepository.getInstance().getInstanceRepository().getInstance(groot.getModelInstanceID());
		inst.setRoot(groot);
		
		for(Runnable req : requests_)
			req.run();
		
		EList subts = root.getSubtypes();
    	for(Object obj : subts){
    		org.gems.designer.Subtype st = createSubtype((org.smartfrog.authoringtool.emf.Subtype)obj);
    		inst.addSubType(st);
    	}
    	
    	return inst;
	}
	
	public void checkLinking(LinkedModel model){
		if(model.getModelLinkTarget() != null
		   && model.getModelLinkTarget().trim().length() > 0){
		   model.loadModel();  
		   map(model);
		}
	}
	
	public void map(ModelObject mo){
		if(mo instanceof EMFModelObject){
			EObject obj = ((EMFModelObject)mo).getEMFObject();
			String key = obj.eResource().getURI().toString()+"#"+mo.getID();
			parts_.put(key, mo);
		}
		if(mo instanceof Container){
			Container cont = (Container)mo;
			for(Object o : cont.getChildren()){
				if(o instanceof ModelObject){
					map((ModelObject)o);
				}
			}
		}
	}
	
	public Root load(org.smartfrog.authoringtool.emf.Root root){
		Root groot = new Root(root);
		//root_ = groot;
		//conns_ = new LinkedList();
		//wires_ = new LinkedList<Wire>();
		//parts_ = new Hashtable<Object, ModelObject>();
		
		parts_.put(root,groot);
		
		
		org.smartfrog.authoringtool.emf.DependencyModel rrm = root.getRealRoot();
		if(rrm != null){
			DependencyModel rr = (DependencyModel)getPart(groot, rrm);
			groot.setRealRoot(rr);			
		}
		
		
		
    	EList component = root.getComponent();
    	for(Object obj : component){
    		getPart(groot,obj);
    	}
    	
    	
    	EList composite = root.getComposite();
    	for(Object obj : composite){
    		getPart(groot,obj);
    	}
    	
    	
    	EList dependencymodel = root.getDependencyModel();
    	for(Object obj : dependencymodel){
    		getPart(groot,obj);
    	}
    	
    	
    	EList attribute = root.getAttribute();
    	for(Object obj : attribute){
    		getPart(groot,obj);
    	}
    	
    	
    	EList and = root.getAnd();
    	for(Object obj : and){
    		getPart(groot,obj);
    	}
    	
    	
    	EList connectors = root.getConnectors();
    	for(Object obj : connectors){
    		getPart(groot,obj);
    	}
    	
    	
    	EList or = root.getOr();
    	for(Object obj : or){
    		getPart(groot,obj);
    	}
    	
    	
    	EList nor = root.getNor();
    	for(Object obj : nor){
    		getPart(groot,obj);
    	}
    	
    	
    	EList nand = root.getNand();
    	for(Object obj : nand){
    		getPart(groot,obj);
    	}
    	
    	
    	EList simpledependencycons = root.getSimpleDependencyConnection();
    	for(Object obj : simpledependencycons){
    		createSimpleDependencyConnection(groot, (org.smartfrog.authoringtool.emf.SimpleDependencyConnection)obj);
    	} 
    	
    	EList inputdependencycons = root.getInputDependencyConnection();
    	for(Object obj : inputdependencycons){
    		createInputDependencyConnection(groot, (org.smartfrog.authoringtool.emf.InputDependencyConnection)obj);
    	} 
    	
    	EList outputdependencycons = root.getOutputDependencyConnection();
    	for(Object obj : outputdependencycons){
    		createOutputDependencyConnection(groot, (org.smartfrog.authoringtool.emf.OutputDependencyConnection)obj);
    	} 
    	
    	
    	
    	
    	return groot;
	}
    
    public ModelObject load(Container root, Object child) {
    	if(child instanceof org.smartfrog.authoringtool.emf.Component){
    		return loadComponent(root,(org.smartfrog.authoringtool.emf.Component)child);
    	}
    	
    	if(child instanceof org.smartfrog.authoringtool.emf.Composite){
    		return loadComposite(root,(org.smartfrog.authoringtool.emf.Composite)child);
    	}
    	
    	if(child instanceof org.smartfrog.authoringtool.emf.DependencyModel){
    		return loadDependencyModel(root,(org.smartfrog.authoringtool.emf.DependencyModel)child);
    	}
    	
    	if(child instanceof org.smartfrog.authoringtool.emf.Attribute){
    		return loadAttribute(root,(org.smartfrog.authoringtool.emf.Attribute)child);
    	}
    	
    	if(child instanceof org.smartfrog.authoringtool.emf.And){
    		return loadAnd(root,(org.smartfrog.authoringtool.emf.And)child);
    	}
    	
    	if(child instanceof org.smartfrog.authoringtool.emf.Connectors){
    		return loadConnectors(root,(org.smartfrog.authoringtool.emf.Connectors)child);
    	}
    	
    	if(child instanceof org.smartfrog.authoringtool.emf.Or){
    		return loadOr(root,(org.smartfrog.authoringtool.emf.Or)child);
    	}
    	
    	if(child instanceof org.smartfrog.authoringtool.emf.Nor){
    		return loadNor(root,(org.smartfrog.authoringtool.emf.Nor)child);
    	}
    	
    	if(child instanceof org.smartfrog.authoringtool.emf.Nand){
    		return loadNand(root,(org.smartfrog.authoringtool.emf.Nand)child);
    	}
    	
    	return null;
    }
    
    	public Component loadComponent(Container root, org.smartfrog.authoringtool.emf.Component obj){
    	   Component gobj = null;
    	   
    	   gobj = new Component(obj);  
    	   
    	   loadComponent(root,obj,gobj);
    	   parts_.put(obj,gobj);
    	   if(obj.eResource() != null){
    	     parts_.put(obj.eResource().getURI().toString()+"#"+obj.getId(),gobj);
    	   }
    	   return gobj;
    	}
   	
    	public Composite loadComposite(Container root, org.smartfrog.authoringtool.emf.Composite obj){
    	   Composite gobj = null;
    	   
    	   gobj = new Composite(obj);  
    	   
    	   loadComposite(root,obj,gobj);
    	   parts_.put(obj,gobj);
    	   if(obj.eResource() != null){
    	     parts_.put(obj.eResource().getURI().toString()+"#"+obj.getId(),gobj);
    	   }
    	   return gobj;
    	}
   	
    	public DependencyModel loadDependencyModel(Container root, org.smartfrog.authoringtool.emf.DependencyModel obj){
    	   DependencyModel gobj = null;
    	   
    	   gobj = new DependencyModel(obj);  
    	   
    	   loadDependencyModel(root,obj,gobj);
    	   parts_.put(obj,gobj);
    	   if(obj.eResource() != null){
    	     parts_.put(obj.eResource().getURI().toString()+"#"+obj.getId(),gobj);
    	   }
    	   return gobj;
    	}
   	
    	public Attribute loadAttribute(Container root, org.smartfrog.authoringtool.emf.Attribute obj){
    	   Attribute gobj = null;
    	   
    	   gobj = new Attribute(obj);  
    	   
    	   loadAttribute(root,obj,gobj);
    	   parts_.put(obj,gobj);
    	   if(obj.eResource() != null){
    	     parts_.put(obj.eResource().getURI().toString()+"#"+obj.getId(),gobj);
    	   }
    	   return gobj;
    	}
   	
    	public And loadAnd(Container root, org.smartfrog.authoringtool.emf.And obj){
    	   And gobj = null;
    	   
    	   gobj = new And(obj);  
    	   
    	   loadAnd(root,obj,gobj);
    	   parts_.put(obj,gobj);
    	   if(obj.eResource() != null){
    	     parts_.put(obj.eResource().getURI().toString()+"#"+obj.getId(),gobj);
    	   }
    	   return gobj;
    	}
   	
    	public Connectors loadConnectors(Container root, org.smartfrog.authoringtool.emf.Connectors obj){
    	   Connectors gobj = null;
    	   
    	   if(obj instanceof org.smartfrog.authoringtool.emf.And){
    	   	 return loadAnd(root,(org.smartfrog.authoringtool.emf.And)obj);
    	   }
    	   
    	   else if(obj instanceof org.smartfrog.authoringtool.emf.Or){
    	   	 return loadOr(root,(org.smartfrog.authoringtool.emf.Or)obj);
    	   }
    	   
    	   else if(obj instanceof org.smartfrog.authoringtool.emf.Nor){
    	   	 return loadNor(root,(org.smartfrog.authoringtool.emf.Nor)obj);
    	   }
    	   
    	   else if(obj instanceof org.smartfrog.authoringtool.emf.Nand){
    	   	 return loadNand(root,(org.smartfrog.authoringtool.emf.Nand)obj);
    	   }
    	   
    	   else {
    	   
    	   gobj = new Connectors(obj);  
    	   }
    	   loadConnectors(root,obj,gobj);
    	   parts_.put(obj,gobj);
    	   if(obj.eResource() != null){
    	     parts_.put(obj.eResource().getURI().toString()+"#"+obj.getId(),gobj);
    	   }
    	   return gobj;
    	}
   	
    	public Or loadOr(Container root, org.smartfrog.authoringtool.emf.Or obj){
    	   Or gobj = null;
    	   
    	   gobj = new Or(obj);  
    	   
    	   loadOr(root,obj,gobj);
    	   parts_.put(obj,gobj);
    	   if(obj.eResource() != null){
    	     parts_.put(obj.eResource().getURI().toString()+"#"+obj.getId(),gobj);
    	   }
    	   return gobj;
    	}
   	
    	public Nor loadNor(Container root, org.smartfrog.authoringtool.emf.Nor obj){
    	   Nor gobj = null;
    	   
    	   gobj = new Nor(obj);  
    	   
    	   loadNor(root,obj,gobj);
    	   parts_.put(obj,gobj);
    	   if(obj.eResource() != null){
    	     parts_.put(obj.eResource().getURI().toString()+"#"+obj.getId(),gobj);
    	   }
    	   return gobj;
    	}
   	
    	public Nand loadNand(Container root, org.smartfrog.authoringtool.emf.Nand obj){
    	   Nand gobj = null;
    	   
    	   gobj = new Nand(obj);  
    	   
    	   loadNand(root,obj,gobj);
    	   parts_.put(obj,gobj);
    	   if(obj.eResource() != null){
    	     parts_.put(obj.eResource().getURI().toString()+"#"+obj.getId(),gobj);
    	   }
    	   return gobj;
    	}
   	
   	
   	 
    	public Component loadComponent(Container root, org.smartfrog.authoringtool.emf.Component obj, Component gobj){
    	   
    	   if(root != null)
    	     root.addChild(gobj,-1,false);
    	   
    	
    	   
    	   
    		EList attributes = obj.getComp();
    		for(Object child : attributes){
    			loadAttribute(gobj,(org.smartfrog.authoringtool.emf.Attribute)child);
    		}
    	   
    	   
    	   
    	   
    	   if(gobj instanceof LinkedModel){
    	   	  checkLinking((LinkedModel)gobj);
    	   }
    	   
    	   
    	   addDeferredRequest(new ComponentConnector(root,obj,gobj));
    	   
    	   
    	   return gobj;
    	}
    	
    	
    	public class ComponentConnector implements Runnable {
    	  private Container root_;
    	  private org.smartfrog.authoringtool.emf.Component obj_;
    	  private Component gobj_;
    	  
    	  public ComponentConnector(Container root, org.smartfrog.authoringtool.emf.Component obj, Component gobj){
    	    root_ = root;
    	    obj_ = obj;
    	    gobj_ = gobj;
    	  }
    	  public void run(){
    		loadConnections(root_,obj_,gobj_);
    	  }
    	}
    	
    	public void loadConnections(Container root, org.smartfrog.authoringtool.emf.Component obj, Component gobj){
    	
    	   EList Depends_By = obj.getDepends_By();
    	   for(Object cobj : Depends_By){
    	     createSimpleDependencyConnection(root, gobj,getPart(root,cobj,false));
    	   }
    	   
    	   EList By = obj.getBy();
    	   for(Object cobj : By){
    	     createInputDependencyConnection(root, gobj,getPart(root,cobj,false));
    	   }
    	   
    	   
    	   
    	   
    	   Object DependOn = obj.getDependOn();
    	   if(DependOn != null){
    	   	  createSimpleDependencyConnection(root, getPart(root,DependOn,false),gobj);
    	   }
    	   
    	   EList On = obj.getOn();
    	   for(Object cobj : On){
    	     createOutputDependencyConnection(root, getPart(root,cobj,false),gobj);
    	   }
    	   
    	 }
    	
   	
    	public Composite loadComposite(Container root, org.smartfrog.authoringtool.emf.Composite obj, Composite gobj){
    	   
    	   if(root != null)
    	     root.addChild(gobj,-1,false);
    	   
    	
    	   
    	   
    		EList composites = obj.getSuperComposite();
    		for(Object child : composites){
    			loadComposite(gobj,(org.smartfrog.authoringtool.emf.Composite)child);
    		}
    	   
    		EList components = obj.getComponents();
    		for(Object child : components){
    			loadComponent(gobj,(org.smartfrog.authoringtool.emf.Component)child);
    		}
    	   
    		EList attributes = obj.getCompos();
    		for(Object child : attributes){
    			loadAttribute(gobj,(org.smartfrog.authoringtool.emf.Attribute)child);
    		}
    	   
    		EList connectorss = obj.getCompo();
    		for(Object child : connectorss){
    			loadConnectors(gobj,(org.smartfrog.authoringtool.emf.Connectors)child);
    		}
    	   
    	   
    	   
    	   
    	   if(gobj instanceof LinkedModel){
    	   	  checkLinking((LinkedModel)gobj);
    	   }
    	   
    	   
    	   
    	   return gobj;
    	}
    	
    	
    	public DependencyModel loadDependencyModel(Container root, org.smartfrog.authoringtool.emf.DependencyModel obj, DependencyModel gobj){
    	   
    	   if(root != null)
    	     root.addChild(gobj,-1,false);
    	   
    	
    	   
    	   
    		EList composites = obj.getSFModel();
    		for(Object child : composites){
    			loadComposite(gobj,(org.smartfrog.authoringtool.emf.Composite)child);
    		}
    	   
    		EList components = obj.getDepmodel();
    		for(Object child : components){
    			loadComponent(gobj,(org.smartfrog.authoringtool.emf.Component)child);
    		}
    	   
    		EList connectorss = obj.getRootModel();
    		for(Object child : connectorss){
    			loadConnectors(gobj,(org.smartfrog.authoringtool.emf.Connectors)child);
    		}
    	   
    	   
    	   
    	   
    	   if(gobj instanceof LinkedModel){
    	   	  checkLinking((LinkedModel)gobj);
    	   }
    	   
    	   
    	   
    	   return gobj;
    	}
    	
    	
    	public Attribute loadAttribute(Container root, org.smartfrog.authoringtool.emf.Attribute obj, Attribute gobj){
    	   
    	   if(root != null)
    	     root.addChild(gobj,-1,false);
    	   
    	
    	   
    	   
    	   
    	   
    	   
    	   if(gobj instanceof LinkedModel){
    	   	  checkLinking((LinkedModel)gobj);
    	   }
    	   
    	   
    	   
    	   return gobj;
    	}
    	
    	
    	public And loadAnd(Container root, org.smartfrog.authoringtool.emf.And obj, And gobj){
    	   
    	   	loadConnectors(root,obj,gobj);
    	   
    	
    	   
    	   
    	   
    	   
    	   
    	   if(gobj instanceof LinkedModel){
    	   	  checkLinking((LinkedModel)gobj);
    	   }
    	   
    	   
    	   
    	   return gobj;
    	}
    	
    	
    	public Connectors loadConnectors(Container root, org.smartfrog.authoringtool.emf.Connectors obj, Connectors gobj){
    	   
    	   if(root != null)
    	     root.addChild(gobj,-1,false);
    	   
    	
    	   
    	   
    	   
    	   
    	   
    	   if(gobj instanceof LinkedModel){
    	   	  checkLinking((LinkedModel)gobj);
    	   }
    	   
    	   
    	   addDeferredRequest(new ConnectorsConnector(root,obj,gobj));
    	   
    	   
    	   return gobj;
    	}
    	
    	
    	public class ConnectorsConnector implements Runnable {
    	  private Container root_;
    	  private org.smartfrog.authoringtool.emf.Connectors obj_;
    	  private Connectors gobj_;
    	  
    	  public ConnectorsConnector(Container root, org.smartfrog.authoringtool.emf.Connectors obj, Connectors gobj){
    	    root_ = root;
    	    obj_ = obj;
    	    gobj_ = gobj;
    	  }
    	  public void run(){
    		loadConnections(root_,obj_,gobj_);
    	  }
    	}
    	
    	public void loadConnections(Container root, org.smartfrog.authoringtool.emf.Connectors obj, Connectors gobj){
    	
    	   EList By = obj.getBy();
    	   for(Object cobj : By){
    	     createOutputDependencyConnection(root, gobj,getPart(root,cobj,false));
    	   }
    	   
    	   
    	   
    	   EList On = obj.getOn();
    	   for(Object cobj : On){
    	     createInputDependencyConnection(root, getPart(root,cobj,false),gobj);
    	   }
    	   
    	 }
    	
   	
    	public Or loadOr(Container root, org.smartfrog.authoringtool.emf.Or obj, Or gobj){
    	   
    	   	loadConnectors(root,obj,gobj);
    	   
    	
    	   
    	   
    	   
    	   
    	   
    	   if(gobj instanceof LinkedModel){
    	   	  checkLinking((LinkedModel)gobj);
    	   }
    	   
    	   
    	   
    	   return gobj;
    	}
    	
    	
    	public Nor loadNor(Container root, org.smartfrog.authoringtool.emf.Nor obj, Nor gobj){
    	   
    	   	loadConnectors(root,obj,gobj);
    	   
    	
    	   
    	   
    	   
    	   
    	   
    	   if(gobj instanceof LinkedModel){
    	   	  checkLinking((LinkedModel)gobj);
    	   }
    	   
    	   
    	   
    	   return gobj;
    	}
    	
    	
    	public Nand loadNand(Container root, org.smartfrog.authoringtool.emf.Nand obj, Nand gobj){
    	   
    	   	loadConnectors(root,obj,gobj);
    	   
    	
    	   
    	   
    	   
    	   
    	   
    	   if(gobj instanceof LinkedModel){
    	   	  checkLinking((LinkedModel)gobj);
    	   }
    	   
    	   
    	   
    	   return gobj;
    	}
    	
    	
   	
   	public org.gems.designer.Subtype createSubtype(org.smartfrog.authoringtool.emf.Subtype subt){
   		ModelObject base = parts_.get(subt.getBase());
   		String name = subt.getName();
   		EMFSubtypeImpl esub = new EMFSubtypeImpl(base,subt,name);
   		for(Object obj : subt.getInstances()){
   			esub.addInstance(parts_.get(obj),false);
   		}
   		
 
		for(Object lo : subt.getLinks()){
		   org.smartfrog.authoringtool.emf.SubtypeLink link = (org.smartfrog.authoringtool.emf.SubtypeLink)lo;
		   esub.createUpdater(parts_.get(link.getBase()),parts_.get(link.getInstance()),link);   
		}
   		return esub;
   	}
   
    public void createSimpleDependencyConnection(Container root, org.smartfrog.authoringtool.emf.SimpleDependencyConnection con){
        if(con.getSource() == null || con.getTarget() ==  null)
           return;
    	ModelObject src = parts_.get(con.getSource());
    	ModelObject trg = parts_.get(con.getTarget());
    	if(src == null || trg == null)
    	   return;
    	   
    	if(connected_.get(src.getID()+"->"+trg.getID()+"::SimpleDependencyConnection") != null)
    	   return;
    	   
    	if(!isContainedOrLinked(root, src) || !isContainedOrLinked(root, trg))
    		return;
    		
    	Wire w = new Wire();
    	w.setSource(src,false);
    	w.setTarget(trg,false);
    	w.setSourceTerminal("0");
    	w.setTargetTerminal("0");
    	EMFSimpleDependencyProxy proxy = new EMFSimpleDependencyProxy(con);
    	w.setConnectionType(SimpleDependencyConnectionType.INSTANCE, false);
    	SimpleDependencyConnectionType.INSTANCE.installAttributes(w,proxy);
    	src.connectOutput(w,false);
    	trg.connectInput(w,false);
    	wires_.add(w);
    	connected_.put(src.getID()+"->"+trg.getID()+"::SimpleDependencyConnection",Boolean.TRUE);
    }
    
    public void createSimpleDependencyConnection(Container root, ModelObject src, ModelObject trg){

    	if(src == null || trg == null)
    	   return;
    	   
    	if(connected_.get(src.getID()+"->"+trg.getID()+"::SimpleDependencyConnection") != null)
    	   return;
    	   
    	if(!isContainedOrLinked(root, src) || !isContainedOrLinked(root, trg))
    		return;
    		
    	Wire w = new Wire();
    	w.setSource(src,false);
    	w.setTarget(trg,false);
    	w.setSourceTerminal("0");
    	w.setTargetTerminal("0");
    	w.setConnectionType(SimpleDependencyConnectionType.INSTANCE, false);
    	src.connectOutput(w,false);
    	trg.connectInput(w,false);
    	wires_.add(w);
    	connected_.put(src.getID()+"->"+trg.getID()+"::SimpleDependencyConnection",Boolean.TRUE);
    }
    public void createInputDependencyConnection(Container root, org.smartfrog.authoringtool.emf.InputDependencyConnection con){
        if(con.getSource() == null || con.getTarget() ==  null)
           return;
    	ModelObject src = parts_.get(con.getSource());
    	ModelObject trg = parts_.get(con.getTarget());
    	if(src == null || trg == null)
    	   return;
    	   
    	if(connected_.get(src.getID()+"->"+trg.getID()+"::InputDependencyConnection") != null)
    	   return;
    	   
    	if(!isContainedOrLinked(root, src) || !isContainedOrLinked(root, trg))
    		return;
    		
    	Wire w = new Wire();
    	w.setSource(src,false);
    	w.setTarget(trg,false);
    	w.setSourceTerminal("0");
    	w.setTargetTerminal("0");
    	EMFInputDependencyProxy proxy = new EMFInputDependencyProxy(con);
    	w.setConnectionType(InputDependencyConnectionType.INSTANCE, false);
    	InputDependencyConnectionType.INSTANCE.installAttributes(w,proxy);
    	src.connectOutput(w,false);
    	trg.connectInput(w,false);
    	wires_.add(w);
    	connected_.put(src.getID()+"->"+trg.getID()+"::InputDependencyConnection",Boolean.TRUE);
    }
    
    public void createInputDependencyConnection(Container root, ModelObject src, ModelObject trg){

    	if(src == null || trg == null)
    	   return;
    	   
    	if(connected_.get(src.getID()+"->"+trg.getID()+"::InputDependencyConnection") != null)
    	   return;
    	   
    	if(!isContainedOrLinked(root, src) || !isContainedOrLinked(root, trg))
    		return;
    		
    	Wire w = new Wire();
    	w.setSource(src,false);
    	w.setTarget(trg,false);
    	w.setSourceTerminal("0");
    	w.setTargetTerminal("0");
    	w.setConnectionType(InputDependencyConnectionType.INSTANCE, false);
    	src.connectOutput(w,false);
    	trg.connectInput(w,false);
    	wires_.add(w);
    	connected_.put(src.getID()+"->"+trg.getID()+"::InputDependencyConnection",Boolean.TRUE);
    }
    public void createOutputDependencyConnection(Container root, org.smartfrog.authoringtool.emf.OutputDependencyConnection con){
        if(con.getSource() == null || con.getTarget() ==  null)
           return;
    	ModelObject src = parts_.get(con.getSource());
    	ModelObject trg = parts_.get(con.getTarget());
    	if(src == null || trg == null)
    	   return;
    	   
    	if(connected_.get(src.getID()+"->"+trg.getID()+"::OutputDependencyConnection") != null)
    	   return;
    	   
    	if(!isContainedOrLinked(root, src) || !isContainedOrLinked(root, trg))
    		return;
    		
    	Wire w = new Wire();
    	w.setSource(src,false);
    	w.setTarget(trg,false);
    	w.setSourceTerminal("0");
    	w.setTargetTerminal("0");
    	EMFOutputDependencyProxy proxy = new EMFOutputDependencyProxy(con);
    	w.setConnectionType(OutputDependencyConnectionType.INSTANCE, false);
    	OutputDependencyConnectionType.INSTANCE.installAttributes(w,proxy);
    	src.connectOutput(w,false);
    	trg.connectInput(w,false);
    	wires_.add(w);
    	connected_.put(src.getID()+"->"+trg.getID()+"::OutputDependencyConnection",Boolean.TRUE);
    }
    
    public void createOutputDependencyConnection(Container root, ModelObject src, ModelObject trg){

    	if(src == null || trg == null)
    	   return;
    	   
    	if(connected_.get(src.getID()+"->"+trg.getID()+"::OutputDependencyConnection") != null)
    	   return;
    	   
    	if(!isContainedOrLinked(root, src) || !isContainedOrLinked(root, trg))
    		return;
    		
    	Wire w = new Wire();
    	w.setSource(src,false);
    	w.setTarget(trg,false);
    	w.setSourceTerminal("0");
    	w.setTargetTerminal("0");
    	w.setConnectionType(OutputDependencyConnectionType.INSTANCE, false);
    	src.connectOutput(w,false);
    	trg.connectInput(w,false);
    	wires_.add(w);
    	connected_.put(src.getID()+"->"+trg.getID()+"::OutputDependencyConnection",Boolean.TRUE);
    }
    
    public ModelObject getPart(Container root, Object key){
		return getPart(root,key,true);
	}
	
	public ModelObject getPart(Object key){
		return getPart(null,key,true);
	}
	
	public boolean isContainedOrLinked(Container root, ModelObject curr){
    	return root.firstCommonParent(curr) != null;
    }
	
	public ModelObject getPart(Container root, Object key, boolean load){
		ModelObject part = parts_.get(key);
		if(part == null && key instanceof org.smartfrog.authoringtool.emf.ModelObject && key != null){
		    org.smartfrog.authoringtool.emf.ModelObject obj = (org.smartfrog.authoringtool.emf.ModelObject)key;
		    if(obj.eResource() != null)
		   	   part = parts_.get(obj.eResource().getURI().toString()+"#"+obj.getId());
		}
		if(part == null && load){
			part = load(root,key);
		}
		return part;
	}
	
	public void addDeferredRequest(Runnable request){
		requests_.add(request);
	}
}

