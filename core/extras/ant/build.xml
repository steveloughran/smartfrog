<?xml version="1.0"?>
<project name="tasks" default="default" basedir=".">
  
<description>
  Build file for Ant tasks for Smartfrog

  This build file is Ant1.6+ only. Do not complain when it breaks
  on Ant1.5! 
  
  To build and run the tests, you need ant-testutil.jar, which you get
  by running "ant test-jar" in Ant or from http://gump.covalent.net/jars/latest/ant/ant-testutil.jar
  
</description>

<property name="root.dir" location="../.."  />

<!-- Import common stuff -->
<import file="${root.dir}/common.xml"/>

  <!-- this is done so that the jarfile generated is bound to our project name with
    no -components suffix-->
  <property name="jarfile.suffix" value=""/>
    
  <target name="init" 
    depends="init-common,verify-smartfrog,init-standard-output-dirs">
    <property name="src.dir" location="src"/>
    <property name="target.name" value="${smartfrog.tasks.name}"/>
    <property name="target.jar" location="${smartfrog.tasks.jar}" />
    <echo>building ${target.jar}</echo>
    <property name="dist.tar" 
      location="${smartfrog.tasks.dist.dir}/${smartfrog.tasks.prefix}.tar" />
    <property name="dist.zip" 
      location="${smartfrog.tasks.dist.dir}/${smartfrog.tasks.prefix}.zip" />
    <condition property="system.tests.enabled">
      <istrue value="${system.tests}"/>
    </condition>    
    <property name="system.tests" value="true" />
    <condition property="system.tests.enabled">
      <not>
      <istrue value="${system.tests}"/>
      </not>
    </condition>   
    
    <echo>system.tests.enabled=${system.tests.enabled}</echo>

    <condition property="jar.name.correct">
      <equals arg1="${jar.prefix}${ant.project.name}"
        arg2="${smartfrog.tasks.prefix}">
      </equals>
    </condition>
    <fail unless="jar.name.correct">
      The name of the project ${ant.project.name} needs to match
      the property smartfrog.tasks.prefix (=${smartfrog.tasks.prefix})
      or other projects will not work.
    </fail>

    <!-- purge any existing task file, assuming it is not in use-->
    <delete file="${smartfrog.dist.lib.dir}/${smartfrog.tasks.name}"
      failonerror="false" />
  </target>
    


  <target name="compile" depends="init">
    <sf-javac-with-ant 
      srcdir="${src.dir}"
      destdir="${build.classes.dir}"
      classpathref="smartfrog.classpath"
      >
    </sf-javac-with-ant>
    <copy-useful-files src="${src.dir}" dest="${build.classes.dir}" />
  </target>
  
  <target name="package" depends="compile"
    description="make the jar">
    <jar destfile="${target.jar}">
      <fileset dir="${build.classes.dir}" includes="**/*" />
    </jar>
    <echo >created package ${target.jar}</echo>
  </target>
  
  
  <!-- ========================================================== -->
  <!-- Our override of this target declares that we want to use  -->
  <!-- whatever version of the tasks we just compiled, not any   -->
  <!-- existing version -->
  <!-- ========================================================== -->
  <target name="use-smartfrog-tasks" depends="package"
    description="declare the classpath and imports for the smartfrog tasks">
    <path id="smartfrog.tasks.classpath">
      <path refid="smartfrog.core.classpath"/>
      <pathelement location="${build.classes.dir}"/>
    </path>
    <typedef 
      resource="org/smartfrog/tools/ant/tasks.properties"
      classpathref="smartfrog.tasks.classpath"
      />
  </target>
  
  
  <target name="test1" depends="package,use-smartfrog-tasks">
    <sf-parse />
    <parallel>
      <sf-startdaemon 
        taskTimeout="30"
        classpathref="smartfrog.tasks.classpath"
        />
      <sequential>
        <sleep seconds="5"/>
        <sf-stopdaemon hostname="localhost"
          failonerror="true"
          classpathref="smartfrog.tasks.classpath"/>
      </sequential>
    </parallel>
    
  </target>
  
  <target name="stopdaemon" depends="package,use-smartfrog-tasks">
    <sf-stopdaemon 
      classpathref="smartfrog.tasks.classpath"/>
  </target>
  
  <target name="default" depends="package">
    <!-- todo -->
  </target>  
  

  <!-- override common -->  
  <target name="declare-tests.compile.classpath" 
      depends="declare-exec.classpath" >
      
    <path id="tests.compile.classpath">
      <path refid="exec.classpath"/>
      <pathelement location="${testutil.jar}"/>
      <pathelement location="${junit.jar}"/>
    </path>
    <property name="tests.compile.classpath.value" refid="tests.compile.classpath"/>
    <echo level="verbose">tests.compile.classpath=${tests.compile.classpath.value}</echo>
  </target>
  
  
  <target name="declare-tests.run.classpath" depends="declare-tests.compile.classpath" >  
    <path id="tests.run.classpath">
      <path refid="tests.compile.classpath"/>
      <pathelement location="${test.classes.dir}"/>
      <!-- <pathelement path="${java.class.path}"/>        --> 
    </path>
    <property name="tests.run.classpath.value" refid="tests.run.classpath"/>
    <echo level="verbose">tests.run.classpath=${tests.run.classpath.value}</echo>
  </target>
  
  <target name="find-testutil" depends="declare-classpaths">
    
    <available property="testutil.found"
      classname="org.apache.tools.ant.BuildFileTest" 
      classpathref="tests.compile.classpath"
      ignoresystemclasses="false"/>
  </target>

  <target name="require-testutil" depends="find-testutil">
    <fail unless="testutil.found" >Could not find ${testutil.jar}</fail>
  </target>

  
  <target name="want-testutil" unless="testutil.found" depends="find-testutil">
    <echo level="error">
    Ant testutil classes not found in ${tests.compile.classpath}
    or ${testutil.jar}
    The dependent stages of this build will be skipped.
    To build this file, run "ant test-jar" in 
    ant's source directory,
    Alternatively, retrieve it from Gump: 
    http://gump.covalent.net/jars/latest/ant/
    Note that the version of ant-testutil.jar should
    match the version of ant used. 
    </echo>
  </target>
  
<!--     <target name="compile-tests" 
      depends="want-testutil,common.compile-tests"
      if="testutil.found"/> -->
  <target name="compile-tests" 
      depends="init,want-testutil,package,use-smartfrog-tasks"
      if="testutil.found">
    
    <sf-javac-with-ant 
      srcdir="${test.src.dir}"
      destdir="${test.classes.dir}"
      classpathref="tests.compile.classpath"
      >
    </sf-javac-with-ant>
    <copy-useful-files src="${test.src.dir}" dest="${test.classes.dir}"/>
  </target>
  
  <!-- 
    run the tests
    note that StartTest and any other tests that rely on
    deployment to a running system must be configured to only run
    when system.tests is set. This is so that GUMP locks them out
    
  -->
  <target name="run-tests" depends="compile-tests,want-testutil"
    if="testutil.found">
    <property name="filter.trace" value="true"/>
    <sf-junit 
           errorProperty="test.failed"
           failureProperty="test.failed" 
           includeantruntime="true"
           filtertrace="${filter.trace}"
           >
       <classpath
          refid="tests.run.classpath"/>
        <sysproperty key="test.files.dir"
            value="${test.src.dir}/files" />
      <batchtest todir="${test.data.dir}" >
        <fileset dir="${test.classes.dir}">
          <include name="**/unit/*Test.class" />
          <include name="**/system/*Test.class" if="system.tests.enabled"/>
       </fileset>
      </batchtest>
    </sf-junit>
  </target>  

  <target name="notest" depends="want-testutil"
    description="run unit tests"
    unless="testutil.found">
    <echo>
      Ant test util jar, ant-testutil.jar was not found on the classpath or in
      ${testutil.jar}
    </echo>
    </target>
    
  <target name="test" depends="run-tests,notest"
    description="run unit tests"
    if="testutil.found">
    
    <!-- generate the reports-->
    <sf-test-report data="${test.data.dir}"
      reports="${test.reports.dir}"
      failed="test.failed"/>

  </target>  

<!-- ==================================================================== -->
<!-- this little section hacks into Ant's own CVS tree to hand off document
  generation. It is nasty because the automated docgen is not quite production
  ready -->
  

  <!-- this target does the extra xdocs initialisation -->
  <target name="init-xdocs" depends="init">    
    <property name="build.antdocs.dir" location="${build.dir}/xdocs"/>
    <property name="gen.dir" location="${build.antdocs.dir}/gen"/>
    <property name="gen.dir" location="${build.antdocs.dir}/gen"/>
    <property name="build.docs.dir" location="${build.antdocs.dir}/docs"/>
    <property name="build.xdocs.dir" location="${build.antdocs.dir}/xdocs"/>    
    <property name="xdocs.dir" location="${env.ANT_HOME}/proposal/xdocs" />
    <property name="src.package" value="org/smartfrog/tools/ant/" />
    <path id="xdoclet.extra.classpath">
      <path refid="smartfrog.classpath"/>
      <pathelement location="${smartfrog.tasks.jar}"/>
    </path>
    <property name="xdoclet.extra.classpath.asprop"
      refid="xdoclet.extra.classpath"/>    
  </target>  

<!-- probe for xdocs, which is only in CVS, not redist packages --> 
<target name="probe-xdocs" depends="init-xdocs" >
  <available property="xdocs.found" file="${xdocs.dir}/build.xml"/>
</target>

<target name="want-xdocs" depends="probe-xdocs">
  <fail unless="xdocs.found">
    We need the proposal/xdocs source tree from Ant in ${env.ANT_HOME}/proposal/xdocs
   </fail>
</target>



<target name="xdocs" depends="want-xdocs,package"
  description="Run xdoclet over the ant tasks to create doc pages"
  if="xdocs.found">
  <echo>
    running xdocs with classpath=${xdoclet.extra.classpath.asprop}
  </echo>  

  <ant inheritAll="${ant.inheritAll}" inheritRefs="${ant.inheritRefs}" dir="${xdocs.dir}" 
      target="gen-and-prepare-for-docs">
    <property name="src.dir" location="${src.package}"/>
    <property name="src.root" location="src"/>
    <property name="xdoclet.extra.classpath" 
      value="${xdoclet.extra.classpath.asprop}"/>
    <property name="gen.dir" location="${gen.dir}"/>
    <property name="xdocs.dir" location="${build.xdocs.dir}"/>
    <property name="build.docs.dir" location="${build.docs.dir}"/>
  </ant>
</target>

<target name="dvsl" depends="xdocs"
  description="use velocity to generate the docs"> 
  <ant inheritAll="${ant.inheritAll}" inheritRefs="${ant.inheritRefs}" dir="${xdocs.dir}/dvsl">
    <property name="src.dir" location="src/org/smartfrog/tools/ant/"/>
    <property name="build.dir" location="${build.antdocs.dir}"/>
    <property name="taskdocs.src" location="${gen.dir}"/>
    <property name="xdocs.dir" location="${build.xdocs.dir}"/>
    <property name="docs.dest" location="${build.docs.dir}"/>
  </ant>  
</target>  
<!-- ==================================================================== -->
<!-- end xdocs support -->
<!-- ==================================================================== -->
  
<target name="dist" depends="package" 
  description="Create a full distribution" />

  <!-- do all prework -->
<target name="prepare-for-dist" depends="package">
  <copy todir="${dist.doc.dir}">
    <fileset dir="${doc.dir}">
      <include name="**/*.sxw"/>
      <include name="**/*.sxi"/>
      <include name="**/*.html"/>
    </fileset>
  </copy>
  
</target>

<target name="zip" depends="prepare-for-dist" 
  description="Create a zip file distribution" >
</target>

<target name="tar" depends="prepare-for-dist" 
  description="Create a tar file distribution" >
</target>

</project>   
