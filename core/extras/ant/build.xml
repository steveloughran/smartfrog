<?xml version="1.0"?>
<project name="tasks" default="default" basedir=".">
  <!--
/** (C) Copyright Hewlett-Packard Development Company, LP

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

For more information: www.smartfrog.org

*/
-->
  <description>
    Build file for Ant tasks for Smartfrog

    To build and run the tests, you need ant-testutil.jar, which Ivy will retrieve

  </description>

  <property name="root.dir" location="../.."/>
  <property name="system.tests" value="true"/>
  <property name="ivy.enabled" value="true"/>
  <property name="javac.include.ant" value="true"/>
  <!-- Import common stuff -->
  <import file="../../common.xml"/>
  <!--  <import file="${root.dir}/common.xml"/>-->

  <!-- ========================================================== -->
  <!-- this is the gump entry point; it does packaging and but no tests!-->
  <!-- this keeps the gump compile target separate from the tests run-->
  <!-- ========================================================== -->
  <target name="gump"
      depends="dist,published"
      description="target for gump builds"
      />

  <target name="zip" depends="prepare-for-dist"
      description="Create a zip file distribution">
  </target>

  <target name="tar" depends="prepare-for-dist"
      description="Create a tar file distribution">
  </target>

  <target name="installed" depends="common.installed,update-core"
      description="Place the system in a state in which the components are installed for reuse"/>


  <!-- this is done so that the jarfile generated is bound to our project name with
no -components suffix-->
  <property name="jarfile.suffix" value=""/>

  <target name="init"
      depends="init-common,init-standard-output-dirs">
    <property name="src.dir" location="src"/>
    <property name="target.name" value="${smartfrog.tasks.name}"/>
    <property name="target.jar" location="${smartfrog.tasks.jar}"/>
    <echo>building ${target.jar}</echo>
    <property name="dist.tar"
        location="${smartfrog.tasks.dist.dir}/${smartfrog.tasks.prefix}.tar"/>
    <property name="dist.zip"
        location="${smartfrog.tasks.dist.dir}/${smartfrog.tasks.prefix}.zip"/>

    <echo level="verbose">system.tests=${system.tests}</echo>
    <condition property="system.tests.enabled">
      <istrue value="${system.tests}"/>
    </condition>

    <echo>system.tests.enabled=${system.tests.enabled}</echo>

    <condition property="jar.name.correct">
      <equals arg1="${jar.prefix}${ant.project.name}"
          arg2="${smartfrog.tasks.prefix}">
      </equals>
    </condition>
    <fail unless="jar.name.correct">
      The name of the project ${ant.project.name} needs to match
      the property smartfrog.tasks.prefix (=${smartfrog.tasks.prefix})
      or other projects will not work.
    </fail>

    <!-- purge any existing task file, assuming it is not in use-->
    <delete file="${smartfrog.dist.lib.dir}/${smartfrog.tasks.name}"
        failonerror="false"/>
  </target>

  <target name="javadoc"
      depends="ready-to-javadoc"
      unless="javadoc.disabled"
      >
    <!--  Java Docs for all                                                -->
    <echo message=""/>
    <echo message="------ Creating Java Docs for ${javadoc.header} [${dist.jdocs.dir}]---------------"/>
    <fail unless="dist.jdocs.dir">
      We are not properly initialized, as dist.jdocs.dir is undefined.
    </fail>
    <mkdir dir="${dist.jdocs.dir}"/>
    <sf-javadoc
        sourcepath="${src.dir}"
        destdir="${dist.jdocs.dir}"
        >
      <tag name="ant.task" enabled="false"/>
      <tag name="ant.type" enabled="false"/>
      <tag name="todo" enabled="false"/>
      <classpath>
        <path refid="compile.classpath"/>
        <path path="${java.class.path}"/>
      </classpath>
      <group title="SmartFrog Packages" packages="org.smartfrog.*"/>
    </sf-javadoc>
  </target>

  <!-- ========================================================== -->
  <!-- Our override of this target declares that we want to use  -->
  <!-- whatever version of the tasks we just compiled, not any   -->
  <!-- existing version -->
  <!-- ========================================================== -->
  <target name="use-smartfrog-tasks" depends="package"
      description="declare the classpath and imports for the smartfrog tasks">
    <path id="smartfrog.tasks.classpath">
      <path refid="smartfrog.core.classpath"/>
      <pathelement location="${build.classes.dir}"/>
    </path>
    <typedef
        resource="org/smartfrog/tools/ant/tasks.properties"
        classpathref="smartfrog.tasks.classpath"
        />
  </target>


  <target name="stopdaemon" depends="package,use-smartfrog-tasks">
    <sf-stopdaemon port="${smartfrog.daemon.port}"
        classpathref="smartfrog.tasks.classpath"/>
  </target>

  <target name="default" depends="package,published"/>

  <!--find the test util JAR -->
  <target name="find-testutil" depends="declare-classpaths">

    <available property="testutil.found"
        classname="org.apache.tools.ant.BuildFileTest"
        classpathref="tests.compile.classpath"
        ignoresystemclasses="false"/>
  </target>

  <target name="require-testutil" depends="find-testutil">
    <fail unless="testutil.found">Could not find ${testutil.jar}</fail>
  </target>


  <target name="want-testutil" unless="testutil.found" depends="find-testutil">
    <echo level="error">
      Ant testutil classes not found in ${tests.compile.classpath}
      or ${testutil.jar}
      The dependent stages of this build will be skipped.
      To build this file, run "ant test-jar" in
      ant's source directory,
      Alternatively, retrieve it from Gump:
      http://gump.covalent.net/jars/latest/ant/
      Note that the version of ant-testutil.jar should
      match the version of ant used.
    </echo>
  </target>

  <target name="compile-tests"
      depends="init,package,use-smartfrog-tasks">

    <sf-javac-with-ant
        srcdir="${test.src.dir}"
        destdir="${test.classes.dir}"
        classpathref="tests.compile.classpath"
        >
    </sf-javac-with-ant>
    <copy-useful-files src="${test.src.dir}" dest="${test.classes.dir}"/>
  </target>

  <!-- 
    run the tests
    note that StartTest and any other tests that rely on
    deployment to a running system must be configured to only run
    when system.tests is set. This is so that GUMP locks them out
    
  -->
  <target name="run-tests" depends="package-tests">
    <property name="filter.trace" value="true"/>
    <sf-junit
        errorProperty="test.failed"
        failureProperty="test.failed"
        includeantruntime="true"
        filtertrace="${filter.trace}"
        >
      <classpath
          refid="tests.run.classpath"/>
      <sysproperty key="test.files.dir"
          value="${test.src.dir}/files"/>
      <test todir="${test.data.dir}" name="${testcase}" if="testcase"/>
      <batchtest todir="${test.data.dir}" unless="testcase">
        <fileset dir="${test.classes.dir}">
          <include name="**/unit/*Test.class"/>
          <include name="**/system/*Test.class" if="system.tests.enabled"/>
        </fileset>
      </batchtest>
    </sf-junit>
  </target>

  <target name="test" depends="run-tests"
      description="run unit tests">
    <echo>Test reports generated:
      ${test.reports.dir}/index.html
    </echo>
    <!-- generate the reports-->
    <sf-test-report data="${test.data.dir}"
        reports="${test.reports.dir}"
        failed="test.failed"/>

  </target>

  <!-- ==================================================================== -->
  <!-- this little section hacks into Ant's own SVN tree to hand off document
 generation. It is nasty because the automated docgen is not quite production
 ready -->


  <!-- this target does the extra xdocs initialisation -->
  <target name="init-xdocs" depends="init">
    <property name="build.antdocs.dir" location="${build.dir}/xdocs"/>
    <property name="gen.dir" location="${build.antdocs.dir}/gen"/>
    <property name="gen.dir" location="${build.antdocs.dir}/gen"/>
    <property name="build.docs.dir" location="${build.antdocs.dir}/docs"/>
    <property name="build.xdocs.dir" location="${build.antdocs.dir}/xdocs"/>
    <property name="xdocs.dir" location="${env.ANT_HOME}/proposal/xdocs"/>
    <property name="src.package" value="org/smartfrog/tools/ant/"/>
    <path id="xdoclet.extra.classpath">
      <path refid="smartfrog.classpath"/>
      <pathelement location="${smartfrog.tasks.jar}"/>
    </path>
    <property name="xdoclet.extra.classpath.asprop"
        refid="xdoclet.extra.classpath"/>
  </target>

  <!-- probe for xdocs, which is only in SVN, not redist packages -->
  <target name="probe-xdocs" depends="init-xdocs">
    <available property="xdocs.found" file="${xdocs.dir}/build.xml"/>
  </target>

  <target name="want-xdocs" depends="probe-xdocs">
    <fail unless="xdocs.found">
      We need the proposal/xdocs source tree from Ant in ${env.ANT_HOME}/proposal/xdocs
    </fail>
  </target>


  <target name="xdocs" depends="want-xdocs,package"
      description="Run xdoclet over the ant tasks to create doc pages"
      if="xdocs.found">
    <echo>
      running xdocs with classpath=${xdoclet.extra.classpath.asprop}
    </echo>

    <ant inheritAll="${ant.inheritAll}" inheritRefs="${ant.inheritRefs}" dir="${xdocs.dir}"
        target="gen-and-prepare-for-docs">
      <property name="src.dir" location="${src.package}"/>
      <property name="src.root" location="src"/>
      <property name="xdoclet.extra.classpath"
          value="${xdoclet.extra.classpath.asprop}"/>
      <property name="gen.dir" location="${gen.dir}"/>
      <property name="xdocs.dir" location="${build.xdocs.dir}"/>
      <property name="build.docs.dir" location="${build.docs.dir}"/>
    </ant>
  </target>

  <target name="dvsl" depends="xdocs"
      description="use velocity to generate the docs">
    <ant inheritAll="${ant.inheritAll}" inheritRefs="${ant.inheritRefs}" dir="${xdocs.dir}/dvsl">
      <property name="src.dir" location="src/org/smartfrog/tools/ant/"/>
      <property name="build.dir" location="${build.antdocs.dir}"/>
      <property name="taskdocs.src" location="${gen.dir}"/>
      <property name="xdocs.dir" location="${build.xdocs.dir}"/>
      <property name="docs.dest" location="${build.docs.dir}"/>
    </ant>
  </target>
  <!-- ==================================================================== -->
  <!-- end xdocs support -->
  <!-- ==================================================================== -->


  <!-- do all prework -->
  <target name="prepare-for-dist" depends="package">
    <copy todir="${dist.doc.dir}">
      <fileset dir="${doc.dir}">
        <include name="**/*.sxw"/>
        <include name="**/*.sxi"/>
        <include name="**/*.html"/>
      </fileset>
    </copy>

  </target>


  <!--patch the new ant tasks into the core-->
  <target name="update-core" depends="package">
    <delete>
      <fileset dir="${root.dir}/smartfrog/lib"
          includes="sf-tasks*.jar"/>
    </delete>
    <copy file="${target.jar}" todir="${root.dir}/smartfrog/lib"/>
  </target>


</project>
