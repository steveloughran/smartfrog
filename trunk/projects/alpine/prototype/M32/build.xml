<project name="alpine" default="dist">

     <!-- load in the local override -->
  <property file="build.properties"/>
  <property file="version.properties"/>
    
  <target name="declare-output-dirs"> 
    <property name="src.dir" location="src/java"/>
    <property name="test.src.dir" location="test/java"/>
    <property name="build.dir" location="build"/>
    <property name="build.classes.dir" location="${build.dir}/classes"/>
    <property name="build.test.dir" location="${build.dir}/test"/>
    <property name="test.dir" location="${build.dir}/test"/>
    <property name="test.classes.dir" location="${build.test.dir}/classes"/>
    <property name="test.data.dir" location="${build.test.dir}/data"/>
    <property name="test.datafiles.dir" location="test/files"/>
    <property name="test.reports.dir" location="${build.test.dir}/reports"/>
    <property name="dist.lib.dir" location="${build.dir}/dist/lib"/>
    <property name="dist.dir" location="${build.dir}/dist"/>      
    <property name="dist.doc.dir" location="${build.dir}/dist/doc"/>
    <property name="dist.jdocs.dir" location="${build.dir}/dist/docs/jdocs"/>
    <property name="dist.bin.dir" location="${build.dir}/dist/bin"/>
    <property name="dist.src.dir" location="${build.dir}/dist/src"/>    
  </target>
  
  <target name="create-output-dirs" depends="declare-output-dirs"> 
    <mkdir dir="${build.dir}" />
    <mkdir dir="${build.classes.dir}" />
    <mkdir dir="${build.test.dir}" />
    <mkdir dir="${test.dir}" />
    <mkdir dir="${test.classes.dir}" />
    <mkdir dir="${test.data.dir}" />
    <mkdir dir="${test.datafiles.dir}" />
    <mkdir dir="${test.reports.dir}" />
    <mkdir dir="${dist.lib.dir}" />
    <mkdir dir="${dist.dir}" />      
    <mkdir dir="${dist.doc.dir}"/>
    <mkdir dir="${dist.jdocs.dir}"/>
    <mkdir dir="${dist.bin.dir}" />
    <mkdir dir="${dist.src.dir}" />    
  </target>  

  <target name="configure-artifact-names" >
    
    <property name="jar.prefix" value="" />
    <!-- this is the name of the outer project, not common.xml's name -->
    <property name="project.name" value="${jar.prefix}${ant.project.name}" />
    
   
    <!-- this is an override point; components call this -component -->
    <property name="jarfile.suffix" value=""/>
    <property name="jarfile.extension" value="jar"/>
    <property name="artifact.name" value="${project.name}" />
    <property name="jarfile.stub" value="${artifact.name}${jarfile.suffix}-${artifact.version}" />
    <property name="jarfile.name" value="${jarfile.stub}.${jarfile.extension}"/>
<!--    <antcall target="settarget"/>-->
    
    <property name="target.jar"
    location="${dist.lib.dir}/${jarfile.name}"/>

<!--     name JAR files that tests go into. this is for signing all
    test code (inc deployment descriptors) for deployment onto secure
    boxes
 -->
    <property name="test.jar.name" value="${artifact.name}-${artifact.version}-test.jar"/>
    <property name="test.jar" 
        location="${dist.lib.dir}/${test.jar.name}" /> 
  
  </target>
  
  
  <target name="init-m2">
     <property name="maven.url"
        value="http://ibiblio.org/maven2/"/>
  </target>
          
  <target name="configure-tests">
    <property name="system.tests" value="true" />
    <property name="unit.tests" value="true" />

    <condition property="system.tests.enabled">
      <istrue value="${system.tests}"/>
    </condition>

    <condition property="unit.tests.enabled">
      <istrue value="${unit.tests}"/>
    </condition>
    
    <presetdef name="sf-junit">
      <junit printsummary="no"
           fork="true"
           includeantruntime="true"
           showoutput="true"
           >
       <jvmarg value="-ea"/>
       <jvmarg value="-esa"/>
        <!-- #Tests take system property parameters -->
        <!-- #Formatters for capture and display -->
        <formatter type="xml"/>
        <formatter type="brief" usefile="false"/>
      </junit>
    </presetdef>
    
  </target>
              
  <target name="macros" >
    <!-- Compile options for Smartfrog Release -->
    <property name="javac.debug.mode" value="true"/> 
    <property name="javac.deprecation.mode" value="false"/> 
    <property name="javac.debug.level" value="lines,vars,source" />
    <property name="javac.java.version" value="1.4" />
    <property name="smartfrog.daemon.port" value="3800" /> 
    
    <!-- define a new javac task with new default options -->  
    <presetdef name="sf-javac">
       <javac debug="${javac.debug.mode}" 
            nowarn="true"  
            deprecation="${javac.deprecation.mode}"
            source="${javac.java.version}"
            target="${javac.java.version}"
            includeAntRuntime="false"
            includes="**/*.java"
            >
       </javac>
    </presetdef>
    
    <!-- an extension of the previous javac, this with ant classpath included -->
    <presetdef name="sf-javac-with-ant">
       <sf-javac  
          includeAntRuntime="true" />
    </presetdef>    
    
    
    <!-- a new version of the java task that always forks, does not include
    the ant runtime by default, and fails on any error -->
    <presetdef name="sf-java">
      <java 
        includeantruntime="false"
        fork="true"
        failonerror="true"
        >
       </java>
    </presetdef>
    
    <!-- junit wrapper;
      enables forking, turns assertions on in the code, 
      and enables XML output.
      Timeout is set to 10 minutes, so we dont ever hang.
      User is still required to 
        -specify failure properties 
        -provide test or batch test patterns
        -set up the classpath. Dont forget to 
        include a reference to smartfrog.classpath to get the core stuff
      --> 
    <presetdef name="sf-junit">
      <junit printsummary="no"
           fork="true"
           includeantruntime="true"
           showoutput="true"
           >
       <jvmarg value="-ea"/>
       <jvmarg value="-esa"/>
        <!-- #Tests take system property parameters -->
        <!-- #Formatters for capture and display -->
        <formatter type="xml"/>
        <formatter type="brief" usefile="false"/>
      </junit>
    </presetdef>
    
    <!-- testing for a server being present; set a property to set -->
    
    <presetdef name="sf-daemonfound">
      <condition >
        <socket port="${smartfrog.daemon.port}" server="localhost" />
      </condition>
    </presetdef>
    
    <!-- wait for 10 seconds for a daemon. Set maxwait to a different
    value for more or less time, timeoutproperty to the name of a property
    to set on failure -->
    <presetdef name="sf-waitfordaemon">
        <waitfor maxwait="10" maxwaitunit="second">
            <socket server="localhost" port="${smartfrog.daemon.port}"/>
        </waitfor>
    </presetdef>
    
    <!-- reporting wrapper -->
    <macrodef name="sf-test-report">
      <attribute name="data"/>
      <attribute name="reports"/>
      <attribute name="failed"/>
      <sequential>
        <junitreport todir="@{data}">
          <fileset dir="@{data}">
            <include name="TEST-*.xml"/>
          </fileset>
          <report format="frames" todir="@{reports}"/>
        </junitreport>
        <fail if="@{failed}">Unit tests failed see @{reports}</fail>
      </sequential>
    </macrodef>
    
    <!-- 
    Copy useful files from the source to dest directories. Use this for adding
    extra stuff to the bin directory. By default it pulls in 
    **/*.xml,**/*.dtd,**/*.xsd,**/*.sf,**/*.properties; 
    override the pattern property to set more
     -->
    <macrodef name="copy-useful-files">
     <attribute name="src"/>
     <attribute name="dest"/>
     <attribute name="failonerror" default="false"/>
     <attribute name="pattern" default="**/*.ini,**/*.xml,**/*.dtd,**/*.xsd,**/*.sf,**/*.wsdl,**/*.properties,**/*.wsdd,**/*.cdl" />
     <sequential>
       <echo level="verbose">copying @{pattern} from @{src} to @{dest}</echo>
       <copy todir="@{dest}" failonerror="@{failonerror}">
         <fileset dir="@{src}"
           includes="@{pattern}"/>
        </copy>
      </sequential>
    </macrodef>
    
    <!-- rmic configuration -->
    <presetdef name="sf-rmic">
      <rmic 
        verify="true"
        stubversion="1.2" />
    </presetdef>
  </target>
  
  <target name="init" 
    depends="configure-artifact-names,create-output-dirs,macros" />
  
  <target name="m2-files" depends="m2-tasks">
    <property file="libraries.properties" />
    <m2-libraries pathID="m2.classpath">
      <dependency groupID="jaxen"
        artifactID="jaxen"
        version="${jaxen.version}"/>
      <dependency groupID="commons-logging"
        artifactID="commons-logging-api"
        version="${commons-logging.version}"/>
      <dependency groupID="log4j"
        artifactID="log4j"
        version="${log4j.version}"/>
      <dependency groupID="org.smartfrog"
        artifactID="smartfrog"
        version="${smartfrog.version}"/>
      <dependency groupID="xom"
        artifactID="xom"
        version="${xom.version}"/>
      <dependency groupID="xerces"
        artifactID="xerces"
        version="${xerces.version}"/>        
      <dependency groupID="xalan"
        artifactID="xalan"
        version="${xalan.version}"/>
    </m2-libraries>
  </target>

  
  
  <target name="declare-compile.classpath"
    depends="m2-files">
    <path id="compile.classpath">
      <path refid="m2.classpath"/>
<!--       <fileset dir="${lib.dir}">
        <include name="**/*.jar"/>
      </fileset>
 -->
   </path>
  </target>
  
  
  
  <target name="compile" depends="declare-compile.classpath">
        <depend srcdir="${src.dir}"
          destdir="${build.classes.dir}"
          cache="${build.dir}/depends"
          closure="yes"/>
      <sf-javac
          classpathref="compile.classpath"
          srcdir="${src.dir}"
          destdir="${build.classes.dir}"
          />
      <copy-useful-files src="${src.dir}" dest="${build.classes.dir}"/>
  </target>
  
  <target name="rmi" depends="compile"
      description="create the RMI classes">
      <sf-rmic
          base="${build.classes.dir}"
          verify="true"
          includes="**/*.class">
          <classpath refid="compile.classpath"/>
      </sf-rmic>
  </target>  
  
  
  <!-- ========================================================== -->
  <!-- this is an override point -->
  <!-- create the JAR ${target.jar}-->
  <!-- ========================================================== -->
  <target name="package" depends="compile,rmi"
    description="create the JAR files">
    <jar destfile="${target.jar}" 
             basedir="${build.classes.dir}" 
             includes="**/*"/>
     <echo level="verbose">created package ${target.jar}</echo>
  </target>  

  
  <!-- ========================================================== -->
  <!-- Security corner -->
  <!-- ========================================================== -->

  <target name="init-security" depends="init" >
    <!-- TODO -->
  </target>
  
  <target name="sign-dependent-jars" depends="init-security"
    description="sign all jars that we depend upon">
    <!-- TODO -->
  </target>
  
  <target name="sign-target-jar"
    description="sign our target jar" depends="package,init-security">
    <!-- TODO -->
  </target>

  <target name="checksum-target-jar"
    description="checksum our target jar" depends="sign-target-jar">
    <checksum file="${target.jar}" algorithm="md5"/>
    <checksum file="${target.jar}" algorithm="sha1"/>
  </target>
  
  <!-- ========================================================== -->
  <!-- init all the maven2 support   -->
  <!-- ========================================================== -->
   <target name="m2-init" depends="init" >

    <!-- Maven2 stuff
      All components build into the org.smartfrog group, unless otherwise stated, but
      are their own artifacts. 
      -->
    <property name="m2.repository" location="${user.home}/.m2/repository" />
    
        
    <!-- make the root path of an artifact -->
    <macrodef name="m2-makepath">
      <attribute name="property"/>
      <attribute name="groupIDpath"/>
      <attribute name="artifactID" default="@{groupIDpath}"/>
      <attribute name="version"/>
      <sequential>
        <property name="@{property}" 
          location="${m2.repository}/@{groupIDpath}/@{artifactID}/@{version}" />
      </sequential>
    </macrodef>
    
    <property name="m2.groupID" value="org.smartfrog" />
    <property name="m2.groupID.path" value="org/smartfrog" />
    <m2-makepath property="m2.subdir"
      groupIDpath="${m2.groupID.path}"
      artifactID="${artifact.name}"
      version="${artifact.version}" />
<!--     <property name="m2.subdir" 
      location="${m2.repository}/${m2.groupID.path}/${artifact.name}/${Version}" />
 -->
    <!-- pom setup -->
    <property name="target.pom" location="${dist.lib.dir}/${jarfile.stub}.pom" />
    <property name="project.pom" location="project-template.pom" />
    <available property="project.haspom" file="${project.pom}" />
    <property name="m2.tasks.uri" value= "antlib:org.apache.maven.artifact.ant" />
    <available property="m2.tasks.available"
      resource="org/apache/maven/artifact/ant/antlib.xml" />
      <!-- location of the bit of the repository we keep under SCM -->
<!--     <property name="m2.smartfrog.scm.repository"
      location="${smartfrog.components.dir}/lib" />
    <sf-tourl file="${m2.smartfrog.scm.repository}"
        property="m2.smartfrog.scm.repository.url" />
 -->
 </target>
   
   
   <target name="m2-tasks" depends="m2-init" xmlns:artifact="antlib:org.apache.maven.artifact.ant">
     <fail unless="m2.tasks.available">
     you need the maven2 tasks from http://maven.apache.org/maven2/ant-tasks.html
     </fail>
    <presetdef name="m2-libraries">
      <artifact:dependencies>
        <localRepository location="${m2.repository}" />
        <!-- look in SCM first -->
<!--         <remoteRepository url="${m2.smartfrog.scm.repository.url}" />
 -->
       <!-- then hit ibiblio -->
        <remoteRepository url="http://ibiblio.org/maven2" />
      </artifact:dependencies>
    </presetdef>

   </target>
   
   <!-- look for local then remote definitions of library versions -->
  <target name="m2-load-versions" depends="init">
    <property file="libraries.properties"/>
  </target>   

  <!-- ========================================================== -->
  <!-- POM creation/copy, depending on whether it exists or not   -->
  <!-- ========================================================== -->
  
   <target name="m2-copy-pom" depends="m2-init" if="project.haspom">
     <copy file="${project.pom}" tofile="${target.pom}" > 
      <!-- we expand ant properties here.  -->
       <filterchain>
        <expandproperties/>
       </filterchain>
     </copy>
   </target>

   <!-- inline creation of a very minimal (zero dependency) pom -->
   <target name="m2-make-pom" depends="m2-init" unless="project.haspom">
   <echo message="Creating Pom ${target.pom}" level="verbose"/>
   <echo file="${target.pom}">
<![CDATA[<project>
  <modelVersion>4.0.0</modelVersion>
  <groupId>${m2.groupID}</groupId>
  <artifactId>${artifact.name}</artifactId>
  <packaging>jar</packaging>
  <version>${artifact.version}</version>
</project>
]]></echo>
   
   </target>
   
   <target name="m2-pom" depends="m2-copy-pom,m2-make-pom" />
  
  <!-- ========================================================== -->
  <!-- this is not  normally for overriding -->
  <!-- install the jar, to the local maven2 repository -->
  <!-- ========================================================== -->
  <target name="m2-install" depends="checksum-target-jar,m2-pom"
      description="copy the JAR file local maven repository">
      
    <mkdir dir="${m2.subdir}"/>    
    <copy file="${target.jar}" todir="${m2.subdir}"/>
    <!-- copy a pom -->
    <copy file="${target.pom}" todir="${m2.subdir}" failonerror="false"/>
    <copy file="${target.jar}.md5" todir="${m2.subdir}" failonerror="false"/>

  </target>
  
  
</project>
