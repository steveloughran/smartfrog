Initial thoughts
----------------

* Wouldn't lead with CDDLM
* Major points need really beating
  - bigger type is ok but you want to have the notes on why accompanying
  - O/X mapping slide is ambiguous (they aren't opposites so what does this mean)
  - Danger of grouping implementation limitations with interface limitations
  - Case in point, Axis argument undermines your stance here.
  - Problems with blocking RPC need examination
  - What are interoperability problems in JAX-RPC (_intrinsic_? - exceptions?)
  - Discussion points not productive
  
Proposal
--------

General: 

- Talk has to be taut.  

- Small words are more convincing than long ones.

- The key position we are fighting against (the people that disagree
with us, judging by the reaction) is that web services have to be
available to anyone who has ever written a program (no matter how
small, kids) and that XML is too "hard" for these people, even though
the complexities of long haul distributed systems are no problem at
all. Looked at this way, its clearly a product of marketing agendas
rather than any real merit.

Phase 1: Intro

Step 1:

Explain what SOAP is about: why do we look to SOAP, what does SOAP try
to accomplish, 

Must build relevance of any anecdote before it is given (or audience
lose track - assume average attention span < 1 minute)

Pick a short list of unarguable and important things that JAX-RPC 1.0
breaks. Avoid giving audience any troublesome doubts by not including
things it doesnt break.

---------------------------------------------

Slide 1:

Objectives of SOAP

Loose coupling
Interoperability
Flexibility
Long-haul connections

---------------------------------------------

Need to now introduce JAX-RPC in a simple way. Best to avoid assuming
they are experts, because if they were so expert they wouldn't need to
be convinced by this talk. Avoid claiming anything about JAX-RPC 2.0
after this point, the fact that its still a draft means anyone who has
real live client deployment experience of it should be fired for their
stupidity. 

---------------------------------------------

Slide 2:

Java Web Services

JAX-RPC 1.0
- Tries to look like "normal" programming
- Encourages generated service descriptions 

JAX-RPC 2.0
- Makes the messages more accessible.
- More of the same in terms of emphasis.
- Still a draft specification.

---------------------------------------------

Phase 2:

Next we need to go through these problems in turn. A neat motif to
remind people of where we've got to might be a small list with the
current one highlighted (again assuming low attention span.)

First up loose coupling. Key point here seems to be that rediscovering
distributed objects just with different transport doesn't change the
things that made them not work originally.

---------------------------------------------

Slide 3:

Loose coupling

JAX-RPC says services are just objects, but...

Distributed object systems didn't work very well:
- Brittle.
- Hard to maintain code synchronisation.
- Too tightly coupled.

---------------------------------------------

Next up we should talk about long-haul stuff. Key point we want to get
across here is that if people want to work with a simple blocking-rpc
model, they'd be better off with CORBA or RMI; SOAP is just overhead
at that point.

---------------------------------------------

Slide 4:

Long-haul Connections

JAX-RPC says service calls are method calls, but...

Lots of things can go wrong on a WAN:
- The network can die at any point.
- Things can take much longer than expected.
- If you can ignore this stuff, use RMI or CORBA.

  SOAP is just overhead otherwise.

---------------------------------------------

We need to nail the flexibility angle... I'm thinking the obvious
thing to throw against it is O/X mapping, as an example of something
that really and truthfully does not even begin to degrade gracefully
as messages evolve.

---------------------------------------------

Slide 5:

Flexibility

JAX-RPC says message contents are objects, but...

Theres no good way to map XML to objects reliably:
- Allowed names are different.
- Allowed structures are different.
- A small change in the schema can totally change your mapping.

---------------------------------------------

Last up I think should be interoperability, because people always
remember the last thing and the one thing they can't pretend to not
care about is interop. The key point here maybe is that generating
WSDL is a shortcut to a service that you better have written perfectly
first time because your chances of managing changes to its interface
are nil.

---------------------------------------------

Slide 6:

Interoperability

JAX-RPC says a service interface can come from code, but..

An implementation is not an interface:
- Code is not generally portable.
- It's hard to manage interface stability like this.
- IDL's were invented to solve this, not vice versa.

---------------------------------------------

Now I think we recap these points. Again, assuming a 1 minute
attention span, most of the audience is hazy on slide 5 by now. So we
bring back a summary of why JAX RPC sucks for SOAP... Key point here
is to make sure noone, no matter how slow or distracted can be in any
doubt as to JAX-RPC's inability to fulfill these 4 requirements. Any
other limitations it has jus tdon't matter, 4 is enough.

---------------------------------------------

Slide 7:

Identified Problems

JAX-RPC
- encourages coupling, as in older systems.
- handles long haul connections badly.
- reduces flexibility of XML messages.
- hinders interoperability.

At this point SOAP is just overhead,

---------------------------------------------

Phase 3:

Now we should start to introduce Alpine. The key is going to be to
make it seem like an inevitability. The ideal reaction to a talk like
this is not people saying "what a great idea" its them saying, "man
that was obvious all along." I think we need a lead in to alpine, so
maybe we start by introducing the idea that XML is good..

---------------------------------------------

Slide 8:

SOAP Uses XML

Maybe we should just admit theres XML involved.

- No more complicated, error-prone object mapping.
- No more self-defeating interface generation.

Avoid ostrich first development.

---------------------------------------------

Now we should probably point out that messages are involved. Gosh
wouldn't everything be a lot simpler if we faced up to the realities
of the situation. The ostrich effect is costing us all time and money
that would be better spent on other things.

---------------------------------------------

Slide 9:

SOAP Involves Messaging

Its a lot simpler if you work with messages:

- No need to pretend there are remote "objects"
- Sending a message isn't naturally blocking.

Avoid design patterns that are known to fail.

---------------------------------------------

By this point, Alpine will either seem inevitable to them or they're
rabid and you'll be lynched as you leave the stage. Either way it's
safe to introduce it now.

---------------------------------------------

Slide 10:

Alpine - A Breakthrough

Imagine if we worked with XML messages:
- Use latest XML tools to work with them.
- Send and receive asynchronously.
- Write our WSDL so we can manage it.

---------------------------------------------

This seems like a sensible place to put pointers to all the other
projects that are working on similar concepts. It might help to
reinforce the feeling of inevitability and unquestionable authority
the audience should be feeling.

---------------------------------------------

Slide 11:

We Aren't The Only Ones

Several groups are working on XML message based systems:

- Axis 2 (http://ws.apache.org/axis/)
- ActiveSOAP (http://activesoap.codehaus.org/)
- Alpine "M32" prototype

---------------------------------------------

At this point there isn't a whole lot left to say. We should probably
conclude by hitting them over the head again with why Alpine is good
and JAX-RPC is bad.

---------------------------------------------

Slide 12:

Conclusions

SOAP is an XML messaging system.

- Hiding the messages and the XML doesn't make them go away..
- SOAP isn't the solution to every problem.
- But if your problem needs SOAP, JAX-RPC 1.0 won't solve it.

The way forward is lightweight XML messaging stacks.

---------------------------------------------

And that should be all? I don't think I have enough slides in this
reorganisation though.
