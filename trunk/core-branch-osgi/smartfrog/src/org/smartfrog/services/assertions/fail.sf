/** (C) Copyright 2007 Hewlett-Packard Development Company, LP

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

For more information: www.smartfrog.org

*/
#include "/org/smartfrog/components.sf"
 

/**
 * This is a component that will fail on demand.
 * Its original role was for testing workflows such as repeat, retry, etc,
 * but users may find other uses for the component, taking advantage of
 * its conditional failure and ability to choose a normal or abnormal
 * termination.
 * It's very useful for testing that composite components handle
 * all expected outcomes.
 *
 * Failure is triggered in a separate thread than the one that
 * executes sfStart; it will delay a specified number of seconds, <=0
 * means 'no delay'
 */
Fail extends Prim {
  sfClass "org.smartfrog.services.assertions.FailComponent";
  failSchema extends Schema {
    //exit message
    message extends String;
    //should the failure be a normal or abnormal termination
    normal extends Boolean;
    //expression that must evaluate to true to trigger failure
    condition extends Boolean;
    //delay in seconds before termination.
    delay extends Integer;
    //should we detach from our parent
    detach extends Boolean;
    //notify the parent?
    notifyParent extends Boolean;
  }

  message "Failure Component initiating termination";
  normal true;
  condition true;
  delay 0;
  detach false;
  notifyParent true;
}

/**
 * this is an abnormal failure
 */
FailAbnormal extends Fail {
  normal false;
}

