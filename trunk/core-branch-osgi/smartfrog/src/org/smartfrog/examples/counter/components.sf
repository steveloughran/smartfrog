/** (C) Copyright 1998-2004 Hewlett-Packard Development Company, LP

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

For more information: www.smartfrog.org

*/

/**
 * This component generates a counter with seed value "counter" and increments
 * it by 1 till it reaches the "limit".
 * The Counter component is a basic primitive component.
 */

#include "/org/smartfrog/predicates.sf"

Counter extends Prim {

    counterSchema extends Schema {
        counter extends OptionalInteger;
        message extends OptionalString;
        /**
         limit is not really optional, but
         setting it as mandatory breaks a lot of
         example files
         */
        limit extends OptionalInteger;
        //sleep time in milliseconds. 0 means no sleep.
        sleep extends OptionalInteger;

        /** debug flag */
        debug extends OptionalBoolean;

        /** pause flag -> pause "limit" secs during sfDeploy and sfStart.*/
        pause extends OptionalBoolean;

    }


   /**
    * Optional attribute: a seed value( integer) for the counter
    */
   counter 1;

   /**
    * Optional attribute: message(string) to be printed with the values
    */
   message "step";

   /**
    * Mandatory attribute: the class for component description
    */
   sfClass "org.smartfrog.examples.counter.CounterImpl";

   /**
    * Mandatory attribute: the upper limit(integer) for the counter
    * It is defined by the user.
    */
   //limit 2;

   /**
    * Optional attribute: pause "limit" secs during sfDeploy and sfStart.
    */
   //pause false;
}

