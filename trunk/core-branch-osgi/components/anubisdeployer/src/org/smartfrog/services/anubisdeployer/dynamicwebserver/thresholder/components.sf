/** (C) Copyright 1998-2004 Hewlett-Packard Development Company, LP

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

For more information: www.smartfrog.org

*/


#include "org/smartfrog/components.sf"
#include "org/smartfrog/examples/dynamicwebserver/gui/graphpanel/components.sf"

Thresholder extends Compound {
    sfClass "org.smartfrog.services.anubisdeployer.dynamicwebserver.thresholder.ThresholderImpl";
    //logTo
    //upperThreshold 100;              // arbitrary units
    //lowerThreshold 10;               // arbitrary units
    //pollFrequency 5;                 // gap in seconds
    //repeatMeasures 3;                // number to average over to decide on thresholds
    //stabilizationMeasures 5;         // number of measurements to wait after deploy or terminate of template
    minInstances 1;                    // minimum accepted instances of template (must be >= 0)
    maxInstances 1;                    // maximum accepted instances of template (must be >= 0)
    template extends LAZY {};          // template LAZY component description (obligatory)
    servers [];                        // vector of server names for deploying the templates - must contain at least one element
    //dataSourceName "dataSource";     // name of data source for values to compare to thresholds
    //dataSource;
    //isAuto false;                    // whether deployment/termination should be automatic
}

DisplayThresholder extends Graph {
    sfClass "org.smartfrog.examples.dynamicwebserver.thresholder.DisplayThresholderImpl";
    minY 0;             // the minimum value received
    maxY 100;               // the maximum value received
    gridStepY 10;           // the distance between horizontal lines on the grid
    // dataSource LAZY ...;
    panelWidth 400;         // width of the panel
    panelHeight 250;            // height of the panel
    xOffset 20;
    yOffset 20;

    // thresholder LAZY ...     // the thresholder that this display controls
    graphPencilWidth 2;         // in % of the panel's height

    fancyBars true;
}

