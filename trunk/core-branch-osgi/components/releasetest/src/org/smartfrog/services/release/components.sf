/** (C) Copyright 1998-2004 Hewlett-Packard Development Company, LP

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

For more information: www.smartfrog.org

*/

#include "org/smartfrog/components.sf"
#include "org/smartfrog/functions.sf"
#include "org/smartfrog/services/os/runshell/components.sf"
#include "org/smartfrog/services/ssh/scp.sf"
#include "org/smartfrog/sfcore/workflow/combinators/sequence.sf"
/**
 *  Component definition for release test.
 */

TestANode extends Sequence {
/*--------------------Begin-Parameters -------------------------------------*/
    hostType "Windows/Linux";
    repository "Host name where release files are available";
    repUser "user id required to login in to repository";

    // Not required if rep. allows anonymous ftp - Recommended
    repPasswordLocation "Some file containing passwd";
    repositoryLocation "Repository location";
    junitReleaseFile "path to Junit release file in release repository";
    sfReleaseFile "path to Junit release file in release repository";
    releaseTestScript "path to Release test scripts";
    sfReleaseName "Name of SF release";
    junitReleaseName "Name of SF release";
    localJunitReleaseFile "path to Junit release file in release repository";
    localSfReleaseFile "path to Junit release file in release repository";
    localReleaseTestScript "path to Release test scripts";
    path "path required for ant and jdk ";
    anthome "ant home in local machine";
    sfInstallDir "SmartFrog installtion dir";
    systemroot "System root directory";
    testHome "Directory where all test reports are collected";
/*--------------------End-Parameters -------------------------------------*/
    
    actions extends LAZY {
        // Use SCP component to copy SF/JUnit release files
        scp1 extends ScpSession {
            host PARENT:ATTRIB repository;
            userId PARENT:ATTRIB repUser;
            passwordFile PARENT:ATTRIB repPasswordLocation;
            remoteFiles [ (PARENT:ATTRIB repositoryLocation ++ "/" ++ PARENT:ATTRIB  sfReleaseFile), 
                          (PARENT:ATTRIB repositoryLocation ++ "/" ++ PARENT:ATTRIB  junitReleaseFile), 
                          (PARENT:ATTRIB repositoryLocation ++ "/" ++ PARENT:ATTRIB  releaseTestScript)
                        ];
            localFiles [PARENT:ATTRIB  localSfReleaseFile,
                        PARENT:ATTRIB  localJunitReleaseFile,
                        PARENT:ATTRIB  localReleaseTestScript
                       ];
            transferType "get";
        }
        chmod extends DefaultRunShellScripts {
            platform PARENT:ATTRIB  hostType;
            shellCmd "chmod";
            shellCmdAtt_Arg1 "755";
            shellCmdAtt_filename PARENT:ATTRIB localReleaseTestScript;
            processId IF (platform == "Windows") THEN "(winShell)" ELSE "(bash)" FI;
        }
        inst1 extends installAndRunTest {
            installDir PARENT:ATTRIB  sfInstallDir;        
            platform PARENT:ATTRIB  hostType;
             
            smartfrogReleaseFile PARENT:ATTRIB  localSfReleaseFile;
            junitReleaseFile PARENT:ATTRIB  localJunitReleaseFile;
            releaseTestFile  PARENT:ATTRIB  localReleaseTestScript;
            releaseName PARENT:ATTRIB sfReleaseName;
            junitReleaseName PARENT:ATTRIB junitReleaseName;
            path PARENT:ATTRIB path;
            anthome PARENT:ATTRIB anthome;
            systemroot PARENT:ATTRIB systemroot;
            hostName PARENT:ATTRIB sfProcessHost;
            testHome PARENT:ATTRIB testHome;
        }
    }
} 
/**
 * Installs SmartFrog release and runs Junit testcases.
 */

installAndRunTest extends Compound {
/*-----------Begin-Parameters ------------------------*/
    installDir;        
    platform;
    junitReleaseFile;
    releaseTestFile ;
    smartfrogReleaseFile;
    releaseName;
    junitReleaseName;
    path;
    anthome;
    hostName;
    testHome;
/*-----------End-Parameters --------------------------*/
    runInstallation extends DefaultRunShellScripts {
        //shellCmd releaseTestFile;
        shellCmd ATTRIB releaseTestFile;
        processId IF (platform == "Windows") THEN "(WinShell)" ELSE "(bash)" FI;
        envProperties [("INSTALL_DIR" ++ "=" ++ ATTRIB installDir),
                       ("JUNIT_RELEASE_FILE" ++ "=" ++ ATTRIB junitReleaseFile),
                       ("SF_RELEASE_FILE" ++ "=" ++ ATTRIB smartfrogReleaseFile),
                       ("SF_RELEASE" ++ "=" ++ ATTRIB releaseName),
                       ("JUNIT_RELEASE" ++ "=" ++ ATTRIB junitReleaseName),
                       ("ANT_HOME" ++ "=" ++ ATTRIB anthome),
                       ("PATH" ++ "=" ++ ATTRIB path),
                       ("SystemRoot"++ "=" ++ ATTRIB systemroot),
                       ("HOST_NAME"++ "=" ++ ATTRIB hostName),
                       ("TEST_HOME"++ "=" ++ ATTRIB testHome)
                      ]; 
    }
}

/**
 * Collects test reports from all the test nodes to driver node. So that at the end of run 
 * driver node (a windows m/c) would have node-name/reports under testhome directory.
 *
 */
collectTestReport extends Sequence {
    /*---------------Start-Parameters --------------------------*/
    remoteHost;
    loginId;
    passwdFile;
    remoteFile;
    localFile;
    testHome;
    path;
    scriptName;
    /*---------------End-Parameters ----------------------------*/
    actions extends LAZY {
       scpTestReport extends ScpSession {
            host ATTRIB remoteHost;
            userId ATTRIB loginId;
            passwordFile ATTRIB passwdFile;
            remoteFiles [ATTRIB remoteFile];
            localFiles [(ATTRIB testHome ++ "\\"++ ATTRIB localFile)];
            transferType "get";
        }
        extractTestReport extends DefaultRunShellScripts {
            shellCmd scriptName;
            processId "WinShell";
            envProperties [("PATH" ++ "=" ++ ATTRIB path),
                           ("TEST_HOME"++ "=" ++ ATTRIB testHome),
                           ("TEST_REPORT_FILE"++ "=" ++ ATTRIB localFile)
                          ];
        }
    }
}
/**
 * RunShellScript Component with default options.
 */
 
DefaultRunShellScripts extends RunShellScripts {
    exitCmd "exit 0"; 
    useExitCmd true; 
    shouldTerminate true; 
    processName "SmartFrog";
    logLevel 5;
    printStack true;
}
