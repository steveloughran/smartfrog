/*
 a smartfrog example: a multitier web service
 */
 
 
#include "/org/smartfrog/predicates.sf"

/*
* A webapp requires the warfile and the path to be defined. 
* the web.xml is autoextracted from the warfile unless you choose
* to override it with a custom one.
* The liveness page, if defined, is a path relative name of a page
* that something can use to probe for system happiness.
*/

WebAppSchema extends Schema {
    warfile extends String;
    path extends String;
    webinf extends OptionalString;
    livenessPage extends OptionalString;
}

WebApp extends {
    schema extends WebAppSchema;
}
 
/**
* a generic web server
*/
WebServer extends {
    hostname "";
    port 80;
}

/**
 * tomcat is a web server
 */
Tomcat extends WebServer {
    port 8080;
    tomcatOpts [];
}
 
/**
* a soap endpoint has a namespace, maybe other things like
* a rpc/enc versus doc/lit type, WSDL URL.
* If the declaration was to be used to configure the SOAP runtime
* then these and more would be needed.
*/
 
SoapEndpointSchema extends Schema {
    name extends String;
    namespace extends String;
}
  
SoapEndpoint extends {
    schema extends SoapEndpointSchema;
}
 



 /**
  an Apache axis implementation of a webapp. Axis
  has its own liveness page that selftests the system, 
  and one bundled endpoint for administration.
  The WsddDescriptor is a complex descriptor of the project, one
  that GT3 extends for its own purposes.
  */
  
ApacheAxisSchema extends Schema {
    //if the hostname is not empty, then it overrides the locally
    //determined hostname in Axis
    hostname extends OptionalString;
    //same for port. Axis normally determines its state
    //from incoming requests, but multi-tier systems force overrides
    port extends OptionalInteger;
    
    //this is the axis configuration file for a service
    wsddDescriptor extends String;
}

ApacheAxis extends WebApp {
    schema2 extends ApacheAxisSchema;
    
    path "/axis";

    //sets error code 500 if anything appears wrong
    livenessPage "happyaxis.jsp";

    
    // standard admin page
    AxisAdmin extends SoapEndpoint {
        name "admin";
        namespace "http://ws.apache.org/axis/admin";
    }
}
 
 /**
  * a renderer build on apache Axis, adding two new endpoints and a
  WSDD descriptor
  */
Renderer extends ApacheAxis {
    
    warfile "http://filestore/files/renderer.war";
    
    path "/renderer";
    
    //new liveness page
    livenessPage "happyrenderer.jsp";
    
    //deployment descriptor
    wsddDescriptor "WEB-INF/renderer.wsdd";
    
    rendererService extends SoapEndpoint {
        name "render";
        namespace "http://example.org/render/r1.xsd";
    }
    monitor extends SoapEndpoint {
        name "monitor";
        namespace "http://example.org/render/monitor.xsd";
    }
}


 
 /**
  the back end engine is the renderer on tomcat
  */
 BackEnd extends Tomcat {
     port 80;
     hostname;
     
     renderer extends Renderer {
        hostname PARENT:hostname;
        port  PARENT:port;
     }
     
     //tune the JVM
     tomcatOpts ["-Xmx256m","-Xincgc",
        "-Dnetwork.address.cache.ttl=60",
        "-Dnetwork.address.cache.negative.ttl=0"];
        
     livenessPage renderer:livenessPage;
 }
 
 
/**
* a pattern for redirection -one to match, one to generate from the
* match; in /s/r style. Only the paths under a server are used for
* matching
*/
RedirectPattern extends {
    pattern;
    redirectPattern;
}


RedirectTargetSchema extends Schema {
    hostname extends Vector;
    port extends Vector;
    livenessPage extends String;

}

RedirectTarget extends {
    schema extends RedirectTargetSchema;
    port 80;
}
 

 
/**
* the front end web server redirects patterns to destinations
*/
  
FrontEndSchema extends Schema {
    timeout extends Integer;
    backEndHost extends Vector;
    backEndPort extends Vector;
    backEndLivenessPage extends String;
}
      
FrontEnd extends WebServer {
    schema2 extends FrontEndSchema;
    timeout 60;

    loadBalance extends {
        pattern extends RedirectPattern {
            pattern "/svg/*";
            redirectPattern "/renderer/*";
        }
        dest extends RedirectTarget {
            hostname ATTRIB backEndHost;
            port ATTRIB backEndPort;
            livenessPage LAZY backEndLivenessPage;         
        }
    }
}
 
/**
* this is the glue that binds the machines together. 
*/
System extends {
 
    frontEndHost;
    frontEndPort 80;
    backEndHost;
    backEndPort 80;     
 
    frontEnd extends FrontEnd {
        //explicitly ask for parent attributes
        backEndHost LAZY PARENT:ATTRIB backEndHost;
        backEndPort LAZY PARENT:ATTRIB backEndPort;
        backEndLivenessPage LAZY PARENT:ATTRIB backEndLivenessPage;
    }
 
    backEnd extends BackEnd {
        hostname LAZY ATTRIB frontEndHost;
        port LAZY ATTRIB frontEndPort;
    }
    
    backEndLivenessPage backEnd:livenessPage;
}

/**
* this installation sets the front and back ends by name;
* but another installation could be more dynamic
*/
two_servers extends System {
    frontEndHost "front.example.org";
    backEndHost ["back.example.org"];
    backEndPort [80];
} 
 
/**
* this installation sets the front and back ends by name;
* but another installation could be more dynamic
*/
three_servers extends System {
    frontEndHost "front.example.org";
    backEndHost ["back.example.org", 
        "fallback.example.org"];
    backEndPort [80,80];
    
    //add another back end; this one is anonymous
    -- extends backEnd;
}
 
main extends two_servers;
//main extends three_servers;
 
sfConfig extends main;
 
