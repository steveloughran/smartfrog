<project name="security" default="init-security"
    xmlns:sec="http://security.smartfrog.org/"
    xmlns:sf="antlib:org.smartfrog.tools.ant">

  <import file="state.xml" />


  <target name="assert-secure" depends="initialized"
      description="halt the build if security is not turned on" unless="security.enabled">
    <fail>
      This is not a secure build. To make a secure build
      1. set security.enabled=true
      2. Create a CA and point the property security.ca.dir at the location.
      Currently this property is ${security.ca.dir}
    </fail>
  </target>

  <target name="init-security" depends="initialized,smartfrog-tasks">
    <property name="keystore.dir" location="${user.home}/.secret"/>
    <mkdir dir="${keystore.dir}"/>
    <chmod file="${keystore.dir}" perm="700"/>
    <property name="keystore" location="${keystore.dir}/local.keystore"/>
    <property file="${keystore.dir}/keystore.properties"/>
    <property name="keystore.alias" value="code.signer"/>

    <!--this is a flag that turns security on or off. by default it is off-->
    <!--this should be overridden with the real value-->
    <property name="security.ca.password" value="pleasechange2" />
    <property name="security.self.key" value="self" />

    <!--this needs to be set up with the CA that I want-->
    <property name="security.ca.dir" location="${smartfrog.home}/private/ca" />
    <property name="security.code.keystore" location="${security.ca.dir}/codesigner.st"/>

    <property name="security.keystore.type" value="JCEKS"/>

    <fail>
      <condition>
        <and>
          <isset property="${security.enabled}"/>
          <not>
            <available file="${security.code.keystore}" />
          </not>
        </and>
      </condition>
      The file in the property security.code.keystore:
      ${security.code.keystore}
      Does not exist.

      Check that it and the directory in security.ca.dir:
      ${security.ca.dir}
      Exist.
    </fail>

    <property name="security.uri" value="http://security.smartfrog.org/" />

    <!--the settins for our jar signings-->
    <presetdef name="signjar2" uri="${security.uri}">
      <signjar
          preservelastmodified="true"
          alias="${security.self.key}"
          keystore="${security.code.keystore}"
          storetype="${security.keystore.type}"
          storepass="${security.ca.password}"
          lazy="true"/>
    </presetdef>
    <!-- sign a jar when security.enabled is set and true -->
    <macrodef name="maybe-sign-jar" uri="${security.uri}">
      <attribute name="jar"/>
      <sequential>
        <sf-conditional if="security.enabled">
          <sec:signjar2 jar="@{jar}"/>
        </sf-conditional>
      </sequential>
    </macrodef>

  </target>

  <target name="get-password" depends="init-security">
    <input addproperty="security.ca.password">password for CA keystore:</input>
    <echo level="verbose">password = ${security.ca.password}</echo>
  </target>

  <target name="create-signing-key" depends="get-password">
    <genkey
        alias="${security.self.key}"
        keystore="${security.code.keystore}"
        storepass="${security.ca.password}"
        validity="366"
        >
      <dname>
        <param name="CN" value="autosigner"/>
        <param name="OU" value="SmartFrog"/>
        <param name="O" value="Hewlett-Packard laboratories"/>
        <param name="C" value="EU"/>
      </dname>
    </genkey>
  </target>

  <target name="delete-keystore" depends="init-security">
    <delete file="${security.code.keystore}"/>
  </target>


  <target name="check-keystore" depends="get-password">
    <fail message="no keystore ${security.code.keystore}, run create-signing-key ">
      <condition>
        <not>
          <available file="${security.code.keystore}"/>
        </not>
      </condition>
    </fail>
  </target>




  <target name="ready-to-sign-files" depends="init-security" />


</project>
