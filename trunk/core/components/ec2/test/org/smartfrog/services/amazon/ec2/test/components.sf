/** (C) Copyright 2007 Hewlett-Packard Development Company, LP

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

For more information: www.smartfrog.org

*/
#include "/org/smartfrog/services/filesystem/components.sf"
#include "/org/smartfrog/services/amazon/ec2/components.sf"
#include "/org/smartfrog/services/amazon/s3/components.sf"
#include "/org/smartfrog/services/amazon/test/components.sf";

BAD_IMAGE_ID "ami-bad-image-id";

DeployedService extends Compound {
   authentication extends AwsPassword;
   service TBD;
}



ExpectDeployedService extends  ExpectDeployOnEC2 {
  action DeployedService;
}



ExpectTerminatingService extends  ExpectDeployOnEC2 {
  expectTerminate true;
  exitType EXIT_TYPE_NORMAL;
  action DeployedService;

}


ListMyImages extends ListEC2Images {
  sfShouldTerminate true;
  id login;
}


ListMyInstances extends ListInstances {
  sfShouldTerminate true;
  id login;
}

KillMyInstances extends KillInstances {
  sfShouldTerminate true;
  id login;
}

StartupDelay extends Delay {
  time test.sleep.delay;
}



testListEC2Images extends  ExpectTerminatingService  {
  description "list the EC2 images available to our login";
  action:service extends ListMyImages  {
    key LAZY authentication;
  }
}

testListAmazonImages extends  testListEC2Images  {

  description "list images that belong to amazon";

  action:service:target LAZY action;
  action:service:owners [AmazonAMI:AMAZON_ID];

  tests extends Sequence {
    -- StartupDelay;
    
    assertHasValues extends AssertWorkflow {
      reference LAZY action;
      attribute "imageList";
      //at least two
      attributeVectorMinLength 2;
      attributeVectorMaxLength 10;
    }

    assertSingleton extends AssertWorkflow {
      reference LAZY action;
      attribute "imageID";
    }
  }
}

testListPrivateImages extends  testListEC2Images  {
  description "list the private images";
  action:service:target LAZY action;
  action:service:includePublic false;
}


testListEC2ImagesBadPassword extends  ExpectDeployFailureOnEC2  {

  description "try to list images with a bad login key";

  action extends ListEC2Images {
    id login;
    key "not a valid key";
  }

  exceptions [
    ["",""],
    ["","AWS was not able to validate the provided access credentials"]
  ];
}



testCreateInstance extends ExpectDeployOnEC2 {
  description "create a real instance" ;

  action extends DeployedService {
    service extends ImageInstance {
       sfShouldTerminate false;
       id login;
       imageID test.ec2.image.id;
       userData "test-data";
       key LAZY authentication;
    };
  }

 tests extends Sequence {
    -- StartupDelay;
 }

  Notests extends Sequence {
    -- StartupDelay;

/*
    instancesWithWrongID extends ListMyInstances  {
        description "expect to find no images when the ID is wrong";
        imageID  BAD_IMAGE_ID;
        maxCount 0;
        key LAZY action:authentication;
    }
*/

    //assert that an instance is live
    Instances extends ListMyInstances  {
        description "expect to find at least one instance with my name on it";
        minCount 1;
        key LAZY action:authentication;
    }

    instancesWithGivenID extends Instances  {
        description "test the imageID attribute for validity";
        imageID test.ec2.image.id;
    }


    instancesWithExplicitInstances extends Instances  {
        description "test the instance attribute for validity";
        instances [LAZY action:service:instance];
    }


    instancesWithExplicitInstancesWrongImageID extends Instances  {
        description "expect to find no images when the ID is wrong, even with a list of instances";
        imageID  BAD_IMAGE_ID;
        maxCount 0;
        instances LAZY action:service:instances;
    }

    instancesWithExplicitInstancesList extends Instances  {
        description "test the instances attribute for validity";
        instances LAZY action:service:instances;
    }


    killBadID extends KillMyInstances {
        description "nothing is killed if the image ID is wrong";
        imageID  BAD_IMAGE_ID;
        maxCount 0;
        key LAZY action:authentication;
    }

    killBadIDandInstances extends killBadID {
        description "the instances are irrelevant if the image ID is wrong";
        instances LAZY action:service:instances;
    }

    killWrongState extends kill {
        description "with the wrong state, there is nothing to kill";
        maxCount 0;
        minCount 0;
        state "not-valid-state";
    }

    kill extends KillMyInstances {
        minCount 1;
        key LAZY action:authentication;
        instances LAZY action:service:instances;
    }

  }

}

testCreateBadInstance extends ExpectDeployFailureOnEC2 {
  description "try to deploy an instance that doesnt exist" ;

  action extends DeployedService {
    service extends ImageInstance {
       id login;
       imageID  BAD_IMAGE_ID;
       userData "test-data";
       key LAZY authentication;
    };
  }

}




testListInstances extends  ExpectTerminatingService  {
  description "list the EC2 images running; fail if this is > 0";
  action:service extends ListMyInstances  {
    maxCount 0;
    key LAZY authentication;
  }
}

testKillInstances extends  ExpectTerminatingService  {
  description "kill any images that are running";
  action:service extends KillMyInstances  {
    key LAZY authentication;
  }
}


testKillInstancesBadID extends  ExpectTerminatingService  {
  description "kill any images that are running";
  action:service extends KillMyInstances  {
    imageID  BAD_IMAGE_ID;
    maxCount 0;
    key LAZY authentication;
  }
}


testKillUnknownInstance extends  ExpectTerminatingService  {
  description "kill any images that are running";
  action:service extends KillMyInstances  {
    instances  ["unknown-instance-id"];
    maxCount 0;
    key LAZY authentication;
  }
}

