/* (C) Copyright 2008 Hewlett-Packard Development Company, LP

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

For more information: www.smartfrog.org

*/

/**
 * A datanode represents a worker in the farm
 */


DataNode extends FileSystemNode {
  name "DataNode"
  sfClass "org.smartfrog.services.hadoop.components.datanode.DatanodeImpl";

  //hadoop configuration values below
  
  dfs.balance.bandwidthPerSec (1024 * 1024);

  dfs.blockreport.intervalMsec  (60 * 60 * 1000);
  //measured in seconds
  dfs.blockreport.initialDelay 60;


  //directory containing data
  //this is a list of comma separated strings (could move to a proper vector here?)
  //dfs.data.dir TBD;
  //this is a vector containing strings to directories
  dataDirectories TBD;

  dfs.datanode.dns.interface "default";
  dfs.datanode.dns.nameserver "default";
  //set to -1 to turn off
  dfs.datanode.scan.period.hours 0;

  //dfs.datanode.bindAddress TBD;
  //dfs.datanode.port TBD;
  dfs.datanode.address TBD;
  //dfs.datanode.info.bindAddress TBD;
  //dfs.datanode.info.port TBD;
  //dfs.datanode.http.address TBD;
  DEFAULT_RACK "/default-rack";
  dfs.datanode.rack DEFAULT_RACK;

  //script to exec to determine the rack location
  dfs.network.script NULL;

  //measured in seconds
  dfs.heartbeat.interval 3;

  dfs.socket.timeout (60*1000);

  dfs.datanode.simulateddatastorage false;

  dfs.max.objects 0;

  dfs.datanode.startup ACTION_REGULAR;

  io.bytes.per.checksum 512;
  io.file.buffer.size 4096;

}