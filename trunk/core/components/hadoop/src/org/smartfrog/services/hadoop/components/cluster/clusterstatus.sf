/* (C) Copyright 2008 Hewlett-Packard Development Company, LP

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

For more information: www.smartfrog.org

*/


/**
 * This component checks up on cluster status; can be used to validate a deployment without shipping any work its way
 * using JobClient#getClusterStatus()
 */
ClusterStatus extends JobTrackingWorkflowComponent {
  sfClass "org.smartfrog.services.hadoop.components.cluster.ClusterStatusCheckerImpl";

  // mapred.job.tracker is required to point to a job tracker (i.e. a URL)

  checkOnStartup true;
  checkOnLiveness false;

  //declares that we can handle the filesystem
  supportedFileSystem true;

  /**
   * Declares that the job tracker is live
   */
  jobTrackerLive true;

  /**
   For all the min/max values, <0 means 'dont check'
   */
  minActiveMapTasks 0;
  maxActiveMapTasks -1;
  minActiveReduceTasks 0;
  maxActiveReduceTasks -1;
  maxSupportedMapTasks -1;
  maxSupportedReduceTasks -1;

}

ClusterStatusCondition extends ClusterStatus {
  checkOnStartup false;
}

JobTrackerRunning extends ClusterStatus {
  supportedFileSystem false;
  minActiveMapTasks -1;
  minActiveReduceTasks -1;
}



/**
 * This component only checks job tracking. It can be used to block
 * actions until the job tracker is live
 */
JobTrackerRunningCondition extends ClusterStatusCondition {
  supportedFileSystem false;
  minActiveMapTasks -1;
  minActiveReduceTasks -1;
}