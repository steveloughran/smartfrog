#include "org/smartfrog/services/scripting/components.sf"
Output extends Prim {
    sfClass "org.smartfrog.regtest.arithmetic.OutputImpl";
    //to LAZY LinkToInput;
} 

Input extends Prim {
    sfClass "org.smartfrog.regtest.arithmetic.InputImpl";
}

NetElem extends Compound {
    inputs extends Compound;
    outputs extends Compound;
}

Dup extends NetElem {
    sfClass "org.smartfrog.regtest.arithmetic.Dup";
    inputs:lhs extends Input;
    outputs:copy1 extends Output;
    outputs:copy2 extends Output;
}


Constant extends NetElem {
    sfClass "org.smartfrog.regtest.arithmetic.Constant";
    outputs:value extends Output;
    constant 0;
}

Generator extends NetElem {
    sfClass "org.smartfrog.regtest.arithmetic.Generator";
    outputs:value extends Output;
    seed 6298426;
    max 10;
    min 0;
    interval 5;
}

Op extends NetElem {
    outputs:value extends Output;
}
UnaryOp extends Op {
    inputs:lhs extends Input;
}

BinaryOp extends Op {
    inputs:lhs extends Input;
    inputs:rhs extends Input;
}

Negate extends UnaryOp {
    sfClass "org.smartfrog.regtest.arithmetic.Negate";
}

Plus extends BinaryOp {
    sfClass "org.smartfrog.regtest.arithmetic.Plus";
}	
/**
 * This component evaluates the expression it is given under the 'operation' attribute (mandatory).
 * The inputs names & values are used for variables.
 * If all the inputs haven't yet been initialized, it passes 
 * the last input value on.
 */
Evaluator extends Op {
	sfClass "org.smartfrog.regtest.arithmetic.Evaluator";
	script extends ScriptPrim {}
	// put your inputs here, for example :
	// inputs:A extends Input;
	// inputs:B extends Input;
	// if you want to compute:
	// operation "(A+B)*(A-B)";	// any java operation that returns an int.
}		
Delay extends Op {
    sfClass "org.smartfrog.regtest.arithmetic.Delay";
    delay 1;
    inputs:lhs extends Input;
}

Times extends BinaryOp {
    sfClass "org.smartfrog.regtest.arithmetic.Times";
}

Printer extends NetElem {
    sfClass "org.smartfrog.regtest.arithmetic.Printer";
    inputs:printVal extends Input;
}
