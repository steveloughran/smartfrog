/** (C) Copyright 2007 Hewlett-Packard Development Company, LP

Disclaimer of Warranty

The Software is provided "AS IS," without a warranty of any kind. ALL
EXPRESS OR IMPLIED CONDITIONS, REPRESENTATIONS AND WARRANTIES,
INCLUDING ANY IMPLIED WARRANTY OF MERCHANTABILITY, FITNESS FOR A
PARTICULAR PURPOSE, OR NON-INFRINGEMENT, ARE HEREBY
EXCLUDED. SmartFrog is not a Hewlett-Packard Product. The Software has
not undergone complete testing and may contain errors and defects. It
may not function properly and is subject to change or withdrawal at
any time. The user must assume the entire risk of using the
Software. No support or maintenance is provided with the Software by
Hewlett-Packard. Do not install the Software if you are not accustomed
to using experimental software.

Limitation of Liability

TO THE EXTENT NOT PROHIBITED BY LAW, IN NO EVENT WILL HEWLETT-PACKARD
OR ITS LICENSORS BE LIABLE FOR ANY LOST REVENUE, PROFIT OR DATA, OR
FOR SPECIAL, INDIRECT, CONSEQUENTIAL, INCIDENTAL OR PUNITIVE DAMAGES,
HOWEVER CAUSED REGARDLESS OF THE THEORY OF LIABILITY, ARISING OUT OF
OR RELATED TO THE FURNISHING, PERFORMANCE, OR USE OF THE SOFTWARE, OR
THE INABILITY TO USE THE SOFTWARE, EVEN IF HEWLETT-PACKARD HAS BEEN
ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. FURTHERMORE, SINCE THE
SOFTWARE IS PROVIDED WITHOUT CHARGE, YOU AGREE THAT THERE HAS BEEN NO
BARGAIN MADE FOR ANY ASSUMPTIONS OF LIABILITY OR DAMAGES BY
HEWLETT-PACKARD FOR ANY REASON WHATSOEVER, RELATING TO THE SOFTWARE OR
ITS MEDIA, AND YOU HEREBY WAIVE ANY CLAIM IN THIS REGARD.

*/
#include "/org/smartfrog/regtest/arithmetic/netComponents.sf"
#include "/org/smartfrog/services/scripting/components.sf"
#include "/org/smartfrog/services/slp/components.sf"
/**
 * A component to wrap around a net whose global opertaion you want to advertise.
 * just point the final output of the internal net to the 'finalValue' Input of the BlackBox;
 * It is this output that can be picked up by other component looking for the service 'operator'
 * with an operation matching the one described under the 'operation' attribute.
 */
AdvOp extends NetElem{
	sfClass "org.smartfrog.regtest.arithmetic.BlackBox";
	inputs:finalValue extends Input;        
	//operation ...
	// myFinalResults:outputs:to LAZY ATTRIB inputs:finalValue;
	advertiser extends PrimAdvertiser {
   		sfAdvertisementServiceURL "service:operator://localhost/"; 
		sfAdvertisementAttributes extends LAZY {
			op PARENT:ATTRIB operation;
		}
      		toAdvertise:gen LAZY PARENT:outputs; //advertise the operator outputs compound
	}
}

AdvGen extends NetElem{
    sfClass "org.smartfrog.regtest.arithmetic.Generator";
    seed 6298426;
    max 10;
    min 0;
    interval 5;
    advertiser extends PrimAdvertiser {
        sfAdvertisementServiceURL "service:generator://localhost/"; 	
        toAdvertise:gen LAZY PARENT:outputs; //advertise the generator outputs compound
    }

}

/**
 * And finally a few components to correctly define the placeholder for location-based NetElem
 */

//Locator component to replace a real NetElem by a NetElem you want to discover. 
PlaceHolder extends NetElem {
	timeout 5000;
	sfServiceDescription extends LAZY {
		//sfServiceType "service:generator"; or "service:operator";
		sfServiceAttributes extends LAZY {}
	}
//	outputLinkTo LAZY ATTRIB ... // complete this with a correct link to the desired input 
	locateNExpand extends LocateAndDeploy {
		sfServiceDescription LAZY PARENT:ATTRIB sfServiceDescription;
		outputLinkTo PARENT:ATTRIB outputLinkTo;
		resultsCollector:threadType "activeWait";
		resultsCollector:display "false";
		onResults extends OnResults {
			display "false";
			sfClass "org.smartfrog.regtest.arithmetic.OnBlackBoxResults";
			serviceType PARENT:ATTRIB sfServiceDescription:sfServiceType;
			resultsCollector LAZY PARENT:ATTRIB resultsCollector;
			to ATTRIB outputLinkTo; 
			outputDescription extends LAZY Output {}
			onTimeout LAZY PARENT:ATTRIB onTimeout;
			timeout PARENT:ATTRIB timeout;
 		}
		// Deploy this component to find a description
		onTimeout extends LAZY Compound {
			serviceNeeded LAZY PARENT:ATTRIB sfServiceDescription;
			descriptionProvider LAZY descriptionProviderFinder:resultsCollector:serviceComponent;

			descriptionProviderFinder extends Compound {
				sfServiceDescription extends LAZY  {
					sfServiceType "service:descriptionProvider";
				}
				slpLocator extends SLPLocator{
					sfServiceDescription PARENT:ATTRIB sfServiceDescription;
				}
				resultsCollector extends PrimResultsCollector {
					threadType "activeWait";
					locator LAZY PARENT:ATTRIB slpLocator;
					display "false";
					//serviceComponent
				}
			}
		}
	}
}

GenLocator extends PlaceHolder {
	sfServiceDescription:sfServiceType "service:generator";
	//outputLinkTo LAZY ATTRIB ... 
	//timeout ...;
}

OpLocator extends PlaceHolder {
	sfServiceDescription:sfServiceType "service:operator";
	sfServiceDescription:sfServiceAttributes:op ATTRIB operation;
	//operation ...
	//outputLinkTo LAZY ATTRIB ... 
        //timeout 5000;
}

