/* (C) Copyright 2008 Hewlett-Packard Development Company, LP

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

For more information: www.smartfrog.org

*/
#include "/org/smartfrog/services/filesystem/components.sf"
#include "/org/smartfrog/services/assertions/components.sf"
#include "/org/smartfrog/services/rpm/dirload/components.sf"




  TestApp extends TextFile {
    dir LAZY deployDir;
    name "TestApp";
    filename (name ++ "/application.sf");

    createParentDirs true;

    text "#include \"/org/smartfrog/services/filesystem/components.sf\"\nsfConfig extends Compound { value 3; }";

    }

  FailingApp extends TestApp {
    name "FailingApp";
    text "#include \"/org/smartfrog/services/filesystem/components.sf\"\nsfConfig extends Compound { sfClass \"no.class\"; }";

    }

DirLoaderExample extends Compound {

  deployDir extends TempDirWithCleanup {
      deleteOnExit true;
      prefix "temp";
      suffix ".dir";
  }

  testApp extends TestApp;

  dirLoader extends DirLoader {
    filename LAZY deployDir;
  }

}




TestDirLoad extends ExpectDeploy {
  action extends DirLoaderExample;

  tests extends Sequence {
    a1 extends AssertWorkflow {
      reference LAZY action:dirLoader:TestApp;
      attribute "value";
      attributeEquals "3";
    }
  }
}

DirLoaderFailing extends DirLoaderExample {
  testApp extends FailingApp;
}

TestDirLoadSkipping extends ExpectDeploy {

  action extends DirLoaderFailing;

  tests extends Sequence {
    a1 extends AssertWorkflow {
      reference LAZY action:dirLoader;
      attribute "failedCount";
      attributeEquals "1";
    }

  }
}



TestDirLoadFailing extends ExpectDeployFailure {

  action extends DirLoaderFailing;
  action:dirLoader:onFailure FAILURE_HALT;

  tests extends Sequence {

  }
}