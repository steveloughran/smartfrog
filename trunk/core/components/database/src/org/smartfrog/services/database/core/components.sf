/** (C) Copyright 1998-2006 Hewlett-Packard Development Company, LP

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

For more information: www.smartfrog.org

*/




 /**
  * Include the core smartfrog components.
  */
#include "/org/smartfrog/components.sf"
#include "/org/smartfrog/predicates.sf"


/*
 * This is the binding to a database.
 * The component does a check on sfStart() for the driver class; this
 * should also force load it into the runtime so that database-specific
 * JBC URLs will resolve.
 */
DatabaseBinding extends Prim {
  sfClass "org.smartfrog.services.database.core.JdbcBindingImpl";
  jdbcBindingSchema extends Schema {
      //driver classname. No extra loading stuff here other than SF codebase.
      driver extends String {
        description "the classname of the driver, which must be in the current classpath";
      };
      //URL of the system
      url extends String {
        description "URL of the jdbc connection"
      };

      username extends OptionalString {
        description "username for the database";
      };
      //password
      password extends OptionalString{
        description "password for the database";
      };
      //any extra properties
      properties extends OptionalVector {
        description "list of name,value pairs for the JDBC connection"
      };
  };

}

/**
 * HSQLDB is good for embedding and testing
 */

HsqldbBinding extends DatabaseBinding {
  driver "org.hsqldb.jdbcDriver";
}


/**
 * We don't redist MySQL as it has interesting license
 * ramifications for non-OSS applications, though (LGPL) smartfrog
 * is free to redist it and retain its license
 * http://mysql.com
 */

MySqlBinding extends DatabaseBinding {
  driver "com.mysql.jdbc.Driver";
}



/**
 * an operation under a database
 */
DatabaseOperation extends Prim {
  operationSchema extends Schema {
    database extends Compulsory {
    description "reference to a database";
  };
}

/**
 * A transaction is a set of commands.
 * There is no way to ignore failures (e.g. you dont care about a DROP TABLE failing)
 * If you want that, wrap it in something that ignores failures.
 */


TransactionCommands extends DatabaseOperation {
  sfClass "org.smartfrog.services.database.core.TransactionCommandsImpl";

  transactionSchema extends Schema {
      autocommit extends Boolean {
        description "should every command commit after execution";
      }
      commands extends OptionalVector {
        description "a string list of commands to execute";
      };
  autocommit false;
}

/**
 * schema for selection
 */
SelectionSchema extends Schema {
 query extends String;
 minResultSize extends OptionalInteger;
 maxResultSize extends OptionalInteger;
}



/**
 * make a selection, results go into results.
 */
Selection extends DatabaseOperation {
  selectionSchema extends Schema {
     query extends String;
     minResultSize extends OptionalInteger;
     maxResultSize extends OptionalInteger;
  }
}


/**
 * this is an operation that should succeed
 * if the database is present
 */
LivenessOperation extends JdbcOperation {

}


/**
 * This component runs selections as a liveness test, so
 * that you can use the state of the database as a health check
 * use the min/max result size attributes to set the min/max number
 * of results.
 */

LivenessSelection extends Selection {

}






