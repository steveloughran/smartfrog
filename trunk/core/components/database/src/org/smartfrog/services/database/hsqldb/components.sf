/** (C) Copyright 2006 Hewlett-Packard Development Company, LP

 This library is free software; you can redistribute it and/or
 modify it under the terms of the GNU Lesser General Public
 License as published by the Free Software Foundation; either
 version 2.1 of the License, or (at your option) any later version.

 This library is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General Public
 License along with this library; if not, write to the Free Software
 Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

 For more information: www.smartfrog.org

 */


/*
 components for HSQLDB integration
  see http://www.hsqldb.org/doc/guide/ch04.html for more details
 */

#include "/org/smartfrog/services/database/core/components.sf";
#include "/org/smartfrog/services/os/java/components.sf";
#include "/org/smartfrog/services/os/java/library.sf"


/*

 * Run hsqldb as a separate process. Note that hsqldb is not-reentrant as
 * of version 1.8, so running as a server does not deliver performance
 * or enterprise-class persistence.
 * It does, however, give good isolation, and access from other processes.
Usage: java org.hsqldb.Server [options]

+----------------+-------------+----------+------------------------------+
|    OPTION      |    TYPE     | DEFAULT  |         DESCRIPTION          |
+----------------+-------------+----------+------------------------------|
| -?             | --          | --       | prints this message          |
| -address       | name|number | any      | server inet address          |
| -port          | number      | 9001/544 | port at which server listens |
| -database.i    | [type]spec  | 0=test   | name of database i           |
| -dbname.i      | alias       | --       | url alias for database i     |
| -silent        | true|false  | true     | false => display all queries |
| -trace         | true|false  | false    | display JDBC trace messages  |
| -tls           | true|false  | false    | TLS/SSL (secure) sockets     |
| -no_system_exit| true|false  | false    | do not issue System.exit()   |
+----------------+-------------+----------+------------------------------+

The server looks for a 'server.properties' file in the current directory and
loads properties from it if it exists.

Here is an example 'server.properties' file:

server.port=1234
#mounts a file-based (persistent) database with alias 'filetest'
#database connection url would be 'jdbc:hsqldb:hsql://host:1234/filetest'
#but '/filetest' can be omitted because database.0 is the default
server.database.0=file:/mydatbasedir/test
server.dbname.0=filetest
#mounts a 'file_in_jar' database with alias 'restest'
#database connection url would be 'jdbc:hsqldb:hsql://host:1234/restest'
server.database.1=res:/mypackage/test
server.dbname.1=restest
#mounts a 100% in-memory (transient) database with alias 'memtest'
#database connection url would be 'jdbc:hsqldb:hsql://host:1234/memtest'
server.database.2=mem:test
server.dbname.2=memtest
...
server.database.n=...
server.dbname.n=...
server.silent=true

#end of 'server.properties' file

Command line options override those loaded from the 'server.properties' file.

The default port is 9001 if tls is false and 544 if it is true.
When omitted, the value of tls is true iff the system property:

        javax.net.ssl.keyStore

is defined. An example command line invocation requesting TLS might look like:

        java -Djavax.net.ssl.keyStore=x -Djavax.net.ssl.keyStorePassword=y org.hsqldb.Server [options]

For information on secure sockets, see: http://java.sun.com/products/jsse/k2:
*/

HsqldbServerProcess extends Java {
    database TBD;
    database.name TBD;
    address "any";
    port "9001";
    processName "hsqldb";
    classname "org.hsqldb.Server";
    arguments [
        "-address",address,
        "-port", port,
        "-database.0",database,
        "-dbname.0",database.name
    ];
}


/*
Usage: java org.hsqldb.WebServer [options]

+----------------+------------ +------------+------------------------------+
|    OPTION      |    TYPE     |  DEFAULT   |         DESCRIPTION          |
+----------------+-------------+------------+------------------------------|
| -?             | --          | --         | prints this message          |
| -address       | name|number | any        | server inet address          |
| -port          | number      | 80/443     | port at which server listens |
| -database.i    | [type]spec  | 0=test     | name of database i           |
| -dbname.i      | alias       | --         | url alias for database i     |
| -root          | path        | ./         | path to web root             |
| -default_page  | file        | index.html | default web page             |
| -silent        | true|false  | true       | false => display all queries |
| -trace         | true|false  | false      | display JDBC trace messages  |
| -tls           | true|false  |            | HTTPS (secure) sockets       |
| -no_system_exit| true|false  | false      | do not issue System.exit()   |
+----------------+-------------+------------+------------------------------+

The web server looks for a 'webserver.properties' file in the current directory and
loads properties from it if it exists.

Here is an example 'webserver.properties' file:

server.port=8080
#mounts a file-based (persistent) database with alias 'filetest'
#database connection url would be 'jdbc:hsqldb:http://host:8080/filetest'
#but the alias 'filetest' can be omitted because database.0 is the default
server.database.0=file:/mydatabasedir/test
server.dbname.0=filetest
#mounts a 'file_in_jar' database with alias 'restest'
#database connection url would be 'jdbc:hsqldb:http://host:8080/restest'
server.database.1=res:/maypackage/test
server.dbname.1=restest
#mounts a 100% in-memory (transient) database with alias 'memtest'
#database connection url would be 'jdbc:hsqldb:http://host:8080/memtest'
server.database.2=mem:test
server.dbname.2=memtest
...
server.database.n=...
server.dbname.n=...
server.silent=true

#user-defined mime type mappings
#must start with '.' and be in lower case

.htm=text/html
.html=text/html
.txt=text/plain
.gif=image/gif
.class=application/octet-stream
.jpg=image/jpeg
.jgep=image/jpeg
.zip=application/x-zip-compressed

#end of 'weserver.properties' file

Command line options override those loaded from the 'webserver.properties' file.
The default port is 80 if tls is false and 433 if it is true.
When omitted, the value of tls is true iff the system property:

        javax.net.ssl.keyStore

is defined. An example command line invocation requesting TLS might look like:

        java -Djavax.net.ssl.keyStore=x -Djavax.net.ssl.keyStorePassword=y org.hsqldb.WebServer [options]

For information on secure sockets, see: http://java.sun.com/products/jsse/k2:~
*/

HsqldbWebServerProcess extends Java {
    database TBD;
    database.name TBD;
    address "any";
    port "8080";
    processName "hsqldb";
    classname "org.hsqldb.Server";
    arguments [
        "-address",address,
        "-port", port,
        "-database.0",database,
        "-dbname.0",database.name
    ];
}


/**
 * The JDBC driver is the database for hsql
 */


hsqldb.jar extends JarArtifact {
    project "hsqldb";
    artifact "hsqldb";
    version "1.8.0.7";
    sha1 "20554954120b3cc9f08804524ec90113a73f3015";
}


HsqldbBinding extends DatabaseBinding {
  driver "org.hsqldb.jdbcDriver";
  username "sa";
  password "";
}

HsqldbPrefixedBinding extends HsqldbBinding {
  _arg TBD;
  binding_prefix TBD;
  url (binding_prefix ++ LAZY _arg);
}

/**
 * the memory binding takes a name
 */
HsqldbInMemoryBinding extends HsqldbPrefixedBinding {
  database TBD;
  _arg LAZY database;
  binding_prefix "jdbc:hsqldb:mem:";
}

/**
 * the file binding takes a directory
 */
HsqldbFileBinding extends HsqldbBinding {
    directory TBD;
    _arg LAZY directory;
    binding_prefix "jdbc:hsqldb:file:";
}

/**
 * Shut down the database
 */
ShutdownCommand extends Transaction {
    sqlCommands [
        "SHUTDOWN"
    ];
}


/**
 * Shut down the database and compact it
 */
ShutdownAndCompactCommand extends Transaction {
    sqlCommands [
        "SHUTDOWN COMPACT"
    ];
}
