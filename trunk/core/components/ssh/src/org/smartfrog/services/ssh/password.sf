/** (C) Copyright 1998-2004 Hewlett-Packard Development Company, LP

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

For more information: www.smartfrog.org

*/

#include "org/smartfrog/components.sf"

/**
 * This component provides the password for components that need it
 *
 */

/**
 Extract a password from a file
 */
FilePassword extends Prim {
    // default password provides expects password from a password file 
    sfClass "org.smartfrog.services.ssh.FilePasswordProvider";
    passwordFile "password.txt";
}

/**
 * Although it is insecure to have a password inline, sometimes it is useful, especially when that password is
 * handed to the process via a property (in which case a ps can view it), or when it is
 * set programmatically
 */

InlinePassword extends Prim {
    sfClass "org.smartfrog.services.ssh.InlinePasswordProviderImpl";
    password TBD;
}


/**
 this is the base schema for SSH and SCP operations
 */
SshSchema extends Schema {
    host extends String;
    failOnError extends OptionalBoolean;
    keyFile extends  OptionalString;
    passwordProvider extends Compulsory;
    port extends Integer;
    shouldTerminate extends Boolean;
    timeout extends Long;
    //trustAllCertificates extends Boolean;
    username extends String;
}

     /**
      * define the default values for all SSH compounds
      */
SshCompound extends Compound {
    port 22;
    timeout 0;
    shouldTerminate true;
    failOnError true;
}