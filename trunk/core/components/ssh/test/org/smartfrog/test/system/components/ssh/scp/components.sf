/** (C) Copyright 2007 Hewlett-Packard Development Company, LP

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

For more information: www.smartfrog.org

*/
#include "/org/smartfrog/test/system/components/ssh/components.sf"


ScpSession extends ScpSessionInlinePassword {
    password "secret";
}



FullScpSession extends ScpSession {

    tempFile extends TempFileWithCleanup {
        suffix "txt";
    }

    username LAZY PROPERTY user.name;
    password  "secret";
    host testvalues:localhost;
    localFiles [LAZY tempFile];
    remoteFiles ["/tmp/1.txt"];
    transferType "get";
}

/**
 * This defines a public key session
 */
PublicKeyScpSession extends ScpSessionPublicKeyInlinePassword {
  //this is the temp file
  privateKey PrivateKeyFile;
  //this is a reference to it
  keyFile LAZY privateKey;
  //this is the password
  password testKey:passphrase;
}


FullPublicKeyScpSession extends PublicKeyScpSession {

    tempFile extends TempFileWithCleanup {
        suffix "txt";
    }
    username LAZY PROPERTY user.name;
    host testvalues:localhost;
    localFiles [LAZY tempFile];
    remoteFiles ["/tmp/1.txt"];
    transferType "get";
}


tcn83 extends ScpSessionFilePassword {
    description "Password file is missing"
    host testvalues:nonexistentHost;
    username "kumar";

   //PasswordProvider:passwordFile "password.txt";
    localFiles ["c:\\cvs\\forge\\vimrc_bak", "c:\\cvs\\forge\\anatomy.pdf"];
    remoteFiles ["/home/ashish/tmp/ssh/vimrc_bak", "/home/ashish/tmp/ssh/anatomy.pdf"];
    transferType "get";
}

// Host file is mising
tcn84 extends ScpSession {
    description "hostname is missing";
    username "kumar";
    localFiles ["c:\\cvs\\forge\\vimrc_bak", "c:\\cvs\\forge\\anatomy.pdf"];
    remoteFiles ["/home/ashish/tmp/ssh/vimrc_bak", "/home/ashish/tmp/ssh/anatomy.pdf"];

}

tcn85 extends ScpSessionAuthPass {
    host "ebnt171.india.hp.com";
    userId "xxx";
    passwordFile "c:\\cvs\\forge\\password.txt";
    localFiles ["c:\\cvs\\forge\\vimrc_bak", "c:\\cvs\\forge\\anatomy.pdf"];
    remoteFiles ["/home/ashish/tmp/ssh/vimrc_bak", "/home/ashish/tmp/ssh/anatomy.pdf"];
    transferType "get";
}

tcn86 extends ScpSessionInlinePassword {
    description "username is  missing";
    password  "secret";
    host "ebnt171.india.hp.com";
    localFiles ["c:\\cvs\\forge\\vimrc_bak", "c:\\cvs\\forge\\anatomy.pdf"];
    remoteFiles ["/home/ashish/tmp/ssh/vimrc_bak", "/home/ashish/tmp/ssh/anatomy.pdf"];
    transferType "get";
}

tcn87 extends ScpSessionAuthPass {
    description "localfiles are missing";
    host "ebnt171.india.hp.com";
    username "kumar";
    passwordFile "password.txt";

    remoteFiles ["/home/ashish/tmp/ssh/vimrc_bak", "/home/ashish/tmp/ssh/anatomy.pdf"];
    transferType "get";
}

tcn88 extends ScpSession {
    description "remote files are missing";
    host "ebnt171.india.hp.com";
    username "kumar";
    SCP:passwordFile "password.txt";
    SCP:localFiles ["c:\\cvs\\forge\\vimrc_bak", "c:\\cvs\\forge\\anatomy.pdf"];
    SCP:transferType "get";
}

tcn89 extends ExpectDeployFailure {
  description "ask for an unsupported transfer type, expect an error";
  action extends FullScpSession  {
    transferType "POST";
  }
  //exitText CONSTANT "org.smartfrog.services.ssh.ScpComponentImpl.UNSUPPORTED_ACTION";
  exceptions [
      ["",CONSTANT "org.smartfrog.services.ssh.ScpComponentImpl.UNSUPPORTED_ACTION" ]
    ];
}

tcn_nonexistent_host extends FullScpSession  {
    host testvalues:nonexistentHost;
}

tcn_nonexistent_hostTest extends ExpectDeployFailure {

    action extends tcn_nonexistent_host;

    exceptions [
        ["",""],
        ["com.jcraft.jsch.JSchException","java.net.UnknownHostException"]
      ];

}


tcn_mismatched_file_list extends ExpectDeployFailure {

    action extends FullScpSession {
        remoteFiles ["/tmp/1.txt","/tmp/1.txt","/tmp/1.txt"];
    }

    exitText CONSTANT "org.smartfrog.services.ssh.ScpComponentImpl.ERROR_FILE_COUNT_MISMATCH";
    Noexceptions [
      [SmartFrogExceptionNames:EXCEPTION_LIFECYCLE,
        CONSTANT "org.smartfrog.services.ssh.ScpComponentImpl.ERROR_FILE_COUNT_MISMATCH" ]
    ];

}

test_invalid_timeout extends ExpectDeployFailure {

    action extends FullScpSession  {
      SCP:timeout -1;
    }

 exceptions [
        ["",""],
        ["com.jcraft.jsch.JSchException","invalid timeout value"]
      ];
      
    Noexceptions [
      [SmartFrogExceptionNames:EXCEPTION_LIFECYCLE,
        CONSTANT "org.smartfrog.services.ssh.ScpComponentImpl.ERROR_FILE_COUNT_MISMATCH" ]
    ];
 }


test_host_timeout extends ExpectDeployFailure {

    action extends FullScpSession  {
      SCP:port testvalues:badLocalPort;
      SCP:timeout 10;
    }

    exceptions [
        ["",""],
        ["com.jcraft.jsch.JSchException",""]
      ];

}

test_public_key_timeout extends ExpectDeployFailure {

    action extends FullPublicKeyScpSession  {
      SCP:port testvalues:badLocalPort;
      SCP:timeout 10;
    }

/*
    exceptions [
        ["",""],
        ["com.jcraft.jsch.JSchException",""]
      ];
*/

}


  vmcommands extends ScpSessionPublicKeyFilePassword{
    host "vm-D0.sup.hpl.hp.com";
    username "root";
    keyfile "/home/rebeca/scratch/test/key";
    passwordFile "/home/rebeca/scratch/test/passphrase";
    localFiles ["/home/rebeca/scratch/test/one",
              "/home/rebeca/scratch/test/two"];
    remoteFiles ["/mnt/sfcluster/rebeca/test/one",
              "/mnt/sfcluster/rebeca/test/two"];
    transferType "put";
  }


test_vm_commands extends ExpectDeployFailure {

    action extends vmcommands  {
    }

    exceptions [
        ["",""],
        ["com.jcraft.jsch.JSchException",""]
      ];

}