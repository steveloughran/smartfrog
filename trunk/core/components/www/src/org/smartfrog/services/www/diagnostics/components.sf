/** (C) Copyright 2006-2007 Hewlett-Packard Development Company, LP

 This library is free software; you can redistribute it and/or
 modify it under the terms of the GNU Lesser General Public
 License as published by the Free Software Foundation; either
 version 2.1 of the License, or (at your option) any later version.

 This library is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General Public
 License along with this library; if not, write to the Free Software
 Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

 For more information: www.smartfrog.org

 */

/**
From the InetAddress javadocs
 Two Java security properties control the TTL values used for positive and negative host name resolution caching:

    networkaddress.cache.ttl (default: -1)
        Indicates the caching policy for successful name lookups from the name service. The value is specified as as integer to indicate the number of seconds to cache the successful lookup.

        A value of -1 indicates "cache forever".

    networkaddress.cache.negative.ttl (default: 10)
        Indicates the caching policy for un-successful name lookups from the name service. The value is specified as as integer to indicate the number of seconds to cache the failure for un-successful lookups.

        A value of 0 indicates "never cache". A value of -1 indicates "cache forever".

*/

#include "/org/smartfrog/components.sf"


/**
 * check that a host exists. The hostname is looked up and if resolution fails,
 * the component fails
 */
HostExists extends WorkflowPrim {
    schema extends Schema {
        hostname extends OptionalString;
        checkOnStartup extends Boolean;
        checkOnLiveness extends Boolean;
    }
    sfClass "org.smartfrog.services.www.diagnostics.HostExistsImpl";
    checkOnStartup true;
    checkOnLiveness false;
}

/**
 * This makes the component act as a condition, by dropping the startup check
 * the condition is then only checked in the evaluate() method
 */
HostExistsCondition extends HostExists {
  checkOnStartup false;
}

/**
 * As a function
 */
hostExists extends {
    phase.function "org.smartfrog.services.www.diagnostics.HostExistsFunction";
}

