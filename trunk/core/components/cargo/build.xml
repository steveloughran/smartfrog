<?xml version="1.0"?>
<project name="cargo" default="default">

  <!--
  /** (C) Copyright 2005 Hewlett-Packard Development Company, LP

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

  For more information: www.smartfrog.org

  */
  -->

  <description>
    Build file for the cargo project.
  </description>

  <!-- override point -->
  <property file="build.properties"/>


  <property name="root.dir" location="../.."/>
  <!-- Import common stuff -->
  <import file="${root.dir}/common.xml"/>

  <target name="m2-files" depends="m2-tasks">
    <m2-libraries pathID="m2.classpath">
      <dependency groupID="org.smartfrog"
                  artifactID="sf-www"
                  version="${Version}"/>
      <dependency groupID="cargo"
                  artifactID="cargo"
                  version="${cargo.version}"/>
      <dependency groupID="ant"
                  artifactID="ant"
                  version="${ant.m2.version}">
        <exclusion groupId="xml-apis" artifactId="xml-apis"/>
        <exclusion groupId="xerces" artifactId="xerces-impl"/>
      </dependency>
      <dependency groupID="xerces"
                  artifactID="xmlParserAPIs"
                  version="${xerces.version}"/>
      <dependency groupID="xerces"
                  artifactID="xercesImpl"
                  version="${xerces.version}"/>
    </m2-libraries>
  </target>

  <target name="declare-compile.classpath-lib-dir"
          depends="declare-base.compile.classpath,probe-lib-dir,m2-files">
    <path id="compile.classpath">
      <path refid="base.compile.classpath"/>
      <path refid="m2.classpath"/>
    </path>
  </target>

  <!-- ========================================================== -->
  <!-- ========================================================== -->
  <target name="init"
          depends="init-standard-output-dirs,use-smartfrog-tasks,use-smartfrog-testharness">


  </target>


  <!-- ========================================================== -->
  <!-- set up any properties for deployment -->
  <!-- ========================================================== -->
  <target name="init-deploy-properties" depends="init">
    <property name="deploy.host" value="localhost"/>
    <property name="application.name" value="${project.name}"/>
  </target>

  <!-- ========================================================== -->
  <!-- set-->
  <!-- ========================================================== -->
  <target name="init-codebase" depends="init-deploy-properties"
          description="set up the codebase property">
    <sf-tourl property="codebase">
      <fileset file="${target.jar}"/>
      <fileset file="${test.jar}"/>
      <path refid="compile.classpath"/>
    </sf-tourl>
    <echo>
      deploying to ${deploy.host}
      codebase=${codebase}</echo>
  </target>

  <!-- ========================================================== -->
  <!-- parse the file -->
  <!-- ========================================================== -->
  <target name="parse" depends="init,dist,init-codebase"
          description="parse the deployment descriptor">
    <property name="parse.quiet" value="true"/>
    <sf-parse quiet="${parse.quiet}">
      <classpath path="${target.jar}:${test.jar}"/>
      <sysproperty key="org.smartfrog.codebase"
                   value="${codebase}"/>
      <!-- source files -->
      <source dir="${test.src.dir}/org/smartfrog/services/www/cargo/test/"
          >
        <include name="**/test*.sf"/>
        <exclude name="**/testIncomplete.sf" />
      </source>
    </sf-parse>
  </target>


  <!-- ========================================================== -->
  <!-- deploy; requires a host -->
  <!-- ========================================================== -->
  <target name="deploy" depends="parse,init-codebase,init-deploy-properties"
          description="deploy">

    <sf-deploy classpathref="run.classpath"
               logStackTraces="true"
               host="${deploy.host}"
               timeout="30000"
        >
      <codebase url="${codebase}"/>

      <application name="${application.name}">
        sfCodeBase PROPERTY org.smartfrog.codebase;
        #include "/${deploy.sf}"
      </application>
    </sf-deploy>
  </target>

  <target name="undeploy" depends="init-deploy-properties"
          description="deploy">

    <sf-undeploy classpathref="run.classpath"
                 logStackTraces="true"
                 host="${deploy.host}"
                 timeout="30000"
                 application="${application.name}"/>
  </target>

  <!-- ========================================================== -->
  <!-- system tests -->
  <!-- ========================================================== -->
  <target name="system-tests" depends="parse,dist,compile-tests,init-codebase"
          description="run system tests"
          if="system.tests.enabled">
    <parallel>

      <!-- first thread runs the daemon -->
      <sequential>
        <antcall target="start-daemon-if-needed"/>
      </sequential>

      <!-- this is the next thread -->
      <sequential>

        <!--
          wait ten seconds for the harness to start
          without this the first tests will fail as there is no
          sf daemon around
        -->
        <sf-waitfordaemon maxwait="10" timeoutproperty="daemon.missing"/>
        <fail if="daemon.missing">No daemon</fail>
        <sf-junit
            errorProperty="test.failed"
            failureProperty="test.failed"
            >
          <classpath>
            <path refid="tests.run.classpath"/>
            <!-- <pathelement location="${test.classes.dir}"/> -->
          </classpath>
          <sysproperty key="org.smartfrog.codebase" value="${codebase}"/>
          <syspropertyset>
            <propertyref prefix="runtime"/>
          </syspropertyset>

          <!-- #Test case isolation technique -->
          <test name="${testcase}" if="testcase"/>
          <batchtest todir="${test.data.dir}" unless="testcase">
            <!-- bulk test case -->
            <fileset dir="${test.classes.dir}">
              <include name="org/smartfrog/services/www/cargo/test/**/*Test.class"/>
            </fileset>
          </batchtest>
        </sf-junit>

        <!-- conditionally stop the daemon -->
        <antcall target="conditional-daemon-exit"/>
        <!-- end the test thread -->
      </sequential>
    </parallel>
  </target>

  <target name="conditional-daemon-exit" unless="no.stop.daemon">
    <antcall target="stop-daemon-if-started"/>
  </target>  
</project>
