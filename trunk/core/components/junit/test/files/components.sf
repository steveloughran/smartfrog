/** (C) Copyright 1998-2004 Hewlett-Packard Development Company, LP

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

For more information: www.smartfrog.org

*/

#include "/org/smartfrog/services/junit/all.sf"
#include "/org/smartfrog/services/filesystem/tempfile.sf"
#include "/org/smartfrog/sfcore/workflow/conditional/conditions/components.sf"


/**
 * base for our tests
 */
TestBase extends JUnit3TestSuite {

    package "org.smartfrog.services.junit.test.targets";
}

/**
 * local junit tests.
 * We do not terminate afterwards because we want to examine the results
 * The tests are set up to not run until told to
 */
LocalJUnitTestRunner extends TestRunner {
    sfShouldTerminate false;
    runTests false;
    keepGoing true;
    failOnError false;
}

/**
 * This is the all test suite, used in -all targets.
 */

TestAll extends LocalJUnitTestRunner {

    tests extends MostTests {
        name "tests";
    }
}


    /**
     * run all tests in the suite.
     * output to a console listener
     */

ConsoleTestAll extends TestAll {

    listener extends ConsoleListener {

    }
}

/**
 * listen to a buffer
 */
BufferingTestRunner extends LocalJUnitTestRunner {
    //buffer the results
    listener extends BufferingListener;
}

/**
 * log to an XML file
 */

XmlTestRunner extends LocalJUnitTestRunner {
    listener extends XmlListener {

      preamble "<!-- generated by SmartFrog XmlTestRunner -->";
    }

}

XmlTestAll extends TestAll {

    //buffer the results

    listener extends XmlListener {
        outputDirectory PROPERTY test.data.xml.dir;
    }

}

HtmlTestAll extends TestAll {

    listener extends HtmlListener {
        outputDirectory PROPERTY test.data.html.dir;
    }

}

HtmlListener extends HtmlTestListener {
//    cssURL "file:///home/slo/Projects/SmartFrog/Forge/core/components/junit/src/org/smartfrog/services/junit/listeners/report.css";
}

/**
 * all but the very troublesome ones
 */
MostTests extends TestBase {
    name "MostTests";
    classes [
        FailureTest:classes,
        SuccessTest:classes,
        SetupTearDownTests:classes,
        BadClassnameTest:classes,
        "ThrowingTestTarget",
        "FunnyCharactersTestTarget",
        "OutputTestTarget"];
}

/**
 * test that arbitrary exceptions are processed
 */
NamedTest extends TestBase {
    name TBD;
    classes [name];
}


/**
 * system exit handling
 */
SystemExitTest extends NamedTest {
    name "SystemExitTestTarget";
}


/**
 * test failure
 */
FailureTest extends NamedTest {
    name "FailureTestTarget";
}


/**
 * test that arbitrary exceptions are processed
 */
ThrowingTest extends NamedTest {
    name "ThrowingTestTarget";
}

/**
 * test success
 */
SuccessTest extends NamedTest {
    name "SuccessTestTarget";
}

/**
 * test success
 */
SyspropsTest extends NamedTest {
    name "SyspropsTestTarget";
}

/**
 * setup and teardown failures
 */
SetupTearDownTests extends TestBase {
    name "SetupTearDownTests";
    classes [
        "ErrorInSetupTestTarget",
        "ErrorInTeardownTestTarget"
        ];
}



/**
 * This is a classname that we dont know of
 */
BadClassnameTest extends NamedTest {
    name "BadClassnameTestTarget";
}


ChainAll extends Compound {

  outputDirectory extends TempDir {
    dir LAZY PROPERTY java.io.tmpdir;
    prefix "junit-reports";
  }

  console extends ConsoleListener {
  }

  statistics extends StatisticsTestListener {
  }

  buffer extends BufferingListener {
  }

  xml extends XmlListener {
      outputDirectory LAZY PARENT:outputDirectory;
  }

  html extends HtmlListener {
      outputDirectory LAZY PARENT:outputDirectory;
  }

  tests extends TestAll {
    runTests true;
    
    listener extends ChainListener {
      listeners [ LAZY console,
        LAZY statistics,
        LAZY buffer,
        LAZY xml,
        LAZY html];
    }
 }
}

