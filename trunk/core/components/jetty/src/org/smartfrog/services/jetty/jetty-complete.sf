/** (C) Copyright 2005 Hewlett-Packard Development Company, LP

 This library is free software; you can redistribute it and/or
 modify it under the terms of the GNU Lesser General Public
 License as published by the Free Software Foundation; either
 version 2.1 of the License, or (at your option) any later version.

 This library is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General Public
 License along with this library; if not, write to the Free Software
 Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

 For more information: www.smartfrog.org

 */

#include "org/smartfrog/components.sf";
#include "org/smartfrog/sfcore/workflow/components.sf";
#include "org/smartfrog/functions.sf";
#include "/org/smartfrog/predicates.sf"
#include "org/smartfrog/services/utils/concat/components.sf"
#include "org/smartfrog/services/filesystem/components.sf"
//liveness and webserver
#include "/org/smartfrog/services/www/components.sf"
#include "/org/smartfrog/services/jetty/jetty-core.sf"
/**
* This defines a complete Jetty component
*/


/*==========================================
  declare extras
===========================================*/

/**
 * This component is a jetty http server, with
 * the standard listeners and contexts
 */

HttpServer extends CoreJettyServer {
   sfClass "org.smartfrog.services.jetty.SFJetty";
   listeners extends Listeners; //optional
   contexts extends Contexts;   //optional
   //if logging is enabled, then it logs to jettyhome/logs.
   enableLogging true;
   port 8080;
}


/*==========================================
  declare jetty contexts
===========================================*/

Contexts extends Compound {
  Context1 ATTRIB rootWAR;
  Context2 ATTRIB jettyDemo;
  Context3 ATTRIB jettyExamples;
  Context4 ATTRIB jettyJavadoc;
  Context5 ATTRIB context5;
  Context6 ATTRIB context6;
}

rootWAR extends JettyWebApplication {
 contextPath "/";
 warFile "/demo/webapps/root";
}

jettyDemo extends JettyWebApplication {
 contextPath "/jetty";
 warFile "/demo/webapps/jetty";
}

jettyExamples extends JettyWebApplication {
 contextPath "/examples";
 warFile "/demo/webapps/examples";
 requestId true; //optional
}

context4 extends JettyServletContext {
 contextPath "/demo";
 resourceBase "/demo/docroot";
 classpath "/demo/servlets";
 handlers extends Handlers; //optional
 servlets extends Servlets; //optional
}

jettyJavadoc extends JettyServletContext {
 contextPath "/javadoc";
 resourceBase "/javadoc";
}

context6 extends JettyServletContext {
 contextPath "/cgi-bin";
 resourceBase "/cgi-bin";
 servlets extends CGIservlet {
 }
}


/*==========================================
  declare handlers
===========================================*/

Handlers extends Compound {
 Handler1 extends JettyForwardHandler {}
 Handler2 extends JettyHTAccessHandler {}
 Handler3 extends JettyDumpHandler {};
}


JettyDumpHandler extends JettyHandler {
 sfClass "org.smartfrog.services.jetty.contexts.handlers.Dump";
}

JettyHTAccessHandler extends JettyHandler {
 sfClass "org.smartfrog.services.jetty.contexts.handlers.HTAccess";
 accessFile ".htaccess";
}

JettyForwardHandler extends JettyHandler {
 sfClass "org.smartfrog.services.jetty.contexts.handlers.Forward";
 mapfromPath "/forward/*";
 maptoPath "/dump";
}

/*==========================================
  declare servlets
===========================================*/

Servlets extends Compound {
 Servlet1 ATTRIB InvokerServlet;
 Servlet2 ATTRIB DumpServlet;
 Servlet3 ATTRIB Sessionservlet;
 Servlet4 ATTRIB DispatchServlet;
 Servlet5 ATTRIB JSPServlet;
 Servlet6 ATTRIB SrcDefaultServlet;
}



InvokerServlet extends JettyServlet {
 name "Invoker";
 pathSpec "/servlet/*";
 className "org.mortbay.jetty.servlet.Invoker";
}

DumpServlet extends JettyServlet {
 name "Dump";
 pathSpec "/dump/*:*.DUMP";
 className "org.mortbay.servlet.Dump";
 initParams [["InitParam","Value"]];
}

SessionServlet extends JettyServlet {
 name "Session";
 pathSpec "/session/*";
 className "org.mortbay.servlet.SessionDump";
}

DispatchServlet extends JettyServlet {
 name "Dispatch";
 pathSpec "/dispatch/*";
 className "org.mortbay.servlet.RequestDispatchTest";
}

JSPServlet extends JettyServlet {
 name "JSP";
 pathSpec "*.jsp";
 className "org.apache.jasper.servlet.JspServlet";
}

SrcDefaultServlet extends JettyServlet {
 name "SrcDefault";
 pathSpec "/src/*";
 className "org.mortbay.jetty.servlet.Default";
 initParams [["dirAllowed","true"], ["resourceBase", (jettyhome ++ "/src")]];
}

CGIservlet extends JettyServlet {
 name "Common Gateway Interface";
 pathSpec "/";
 className "org.mortbay.servlet.CGI";
 initParams [["Path","/bin:/usr/bin:/usr/local/bin"], ["ENV_TEST", ("Jetty home is " ++ jettyhome)]];
}

/*==========================================
  declare listeners
===========================================*/

Listeners extends Compound {
   Listener1 ATTRIB listener1;
   Listener2 ATTRIB listener2;
}

/**
 * this listens on a direct port
 */
listener1 extends JettyListener {
 listenerPort PARENT:PARENT:port;
 serverHost PARENT:PARENT:serverHost;
}

/**
 * this fields requests handed off from Apache HTTPD
 * this is not a secure protocol, and the port must not be externally visible.
 */
listener2 extends JettyListener {
 sfClass "org.smartfrog.services.jetty.listeners.AJPlistener";
 listenerPort 8009;
 serverHost PARENT:PARENT:serverHost;
}
