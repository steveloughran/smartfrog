#include "org/smartfrog/components.sf";
#include "org/smartfrog/sfcore/workflow/components.sf";
#include "org/smartfrog/functions.sf";
#include "/org/smartfrog/predicates.sf"
#include "org/smartfrog/services/utils/concat/components.sf"
#include "org/smartfrog/services/filesystem/components.sf"
//liveness and webserver
#include "/org/smartfrog/services/www/components.sf"

/*
 * The jetty components consist of
 * Listeners for incoming requests
*/


/**
 * schema for the base jetty server extends
 * base webserver schema
 */
CoreJettySchema extends WebServerSchema {
    jettyhome extends String;
    enableLogging extends Boolean;
    serverHost extends String;
    //log pattern
    logPattern extends String;
    //could be a file or a directory
    //relative paths are resolved relative to jetty home
    logDir extends Optional;
}

/**
 * this is jetty with no running listeners or contexts.
 * It is implemented as a compound; you can add anything underneath it and they
 * will be deployed.
 */
CoreJettyServer extends Compound {
   sfClass "org.smartfrog.services.jetty.SFJetty";
   coreJettySchema extends CoreJettySchema;
   serverHost "localhost";
   //synchronous deploy/undeploy policy
   sfSyncTerminate true;
   port 8080;

   //logging is optional. Once turned on, the pattern and logdir are mandatory
   enableLogging false;
   logPattern "yyyy_mm_dd.request.log";
   logDir "log";
}

/**
 * This component is a jetty http server, with
 * the standard listeners and contexts
 */

HttpServer extends CoreJettyServer {
   sfClass "org.smartfrog.services.jetty.SFJetty";
   listeners extends Listeners; //optional
   contexts extends Contexts;   //optional
   //if logging is enabled, then it logs to jettyhome/logs.
   enableLogging true;
   port 8080;
}

/**
 * this is the admin channel for jetty
 */
JettyAdminSchema extends Schema {
    listenerPort extends Integer;
    httpserverHost extends String;
    contextPath extends String;
}

HttpServerAdmin extends Prim {
    sfClass "org.smartfrog.services.jetty.SFJettyAdmin";
    listenerPort 8081;         // the port on which the http server listens
    httpserverHost "localhost";
    contextPath "/";
}


/**
 * a jetty servlet context is a compound
 * with a resource base
 * It defines something to be deployed on a jetty server
 */

JettyServletContextSchema extends Schema {
    resourceBase extends String;
    //server extends String;
}

JettyServletContext extends Compound {
    sfClass "org.smartfrog.services.jetty.contexts.Servlet";
    jettyServletContextSchema extends JettyServletContextSchema;
}


/**
 * a jetty web application has a context path
 * and a a path to its home directory
 */
JettyWebApplicationSchema extends Schema {

    //webapp is a name of an app or a directory
    warFile extends String;
}

JettyWebApplication extends JavaWebApplication {
  jettyWebApplicationSchema extends JettyWebApplicationSchema;
  sfClass "org.smartfrog.services.jetty.contexts.WebApplication";
}

/**
 * jetty handlers handle requests.
 * there is no schema, or other information, but we declare
 * an extra template for clarity
 */
JettyHandler extends Prim {
}


/**
 * listeners listen on ports
 */
JettyListenerSchema extends Schema {
    listenerPort extends Integer;
    serverHost extends String;
    server extends OptionalString;
}

JettyListener extends Prim {
    sfClass "org.smartfrog.services.jetty.listeners.Socketlistener";
    jettyListenerSchema extends JettyListenerSchema;
}


/**
 * and this implementing class binds the servlet to
 * jetty
 */
JettyServlet extends Servlet {
    sfClass "org.smartfrog.services.jetty.contexts.servlets.Servlet";
    jettyServletSchema extends Schema {
        //init order for the servlet;
        //Holders with order<0, are initialized on use.
        //Those with order>=0 are initialized in increasing order when the handler is started
        initOrder extends OptionalInteger;
     }

     initOrder 0;

}


/*==========================================
  declare jetty contexts
===========================================*/

Contexts extends Compound {
  Context1 ATTRIB context1;
  Context2 ATTRIB context2;
  Context3 ATTRIB context3;
  Context4 ATTRIB context4;
  Context5 ATTRIB context5;
  Context6 ATTRIB context6;
}

context1 extends JettyWebApplication {
 contextPath "/";
 warFile "/demo/webapps/root";
}

context2 extends JettyWebApplication {
 contextPath "/jetty";
 warFile "/demo/webapps/jetty";
}

context3 extends JettyWebApplication {
 contextPath "/examples";
 warFile "/demo/webapps/examples";
 requestId true; //optional
}

context4 extends JettyServletContext {
 contextPath "/demo";
 resourceBase "/demo/docroot";
 classPath "/demo/servlets"; 
 handlers extends Handlers; //optional
 servlets extends Servlets; //optional
}

context5 extends JettyServletContext {
 contextPath "/javadoc";
 resourceBase "/javadoc";
}

context6 extends JettyServletContext {
 contextPath "/cgi-bin";
 resourceBase "/cgi-bin";
 servlets extends CGI; //optional
}

CGI extends Compound {
 servlet1 ATTRIB CGIservlet;
}

/*==========================================
  declare handlers
===========================================*/

Handlers extends Compound {
 Handler1 ATTRIB handler1;
 Handler2 ATTRIB handler2;
 Handler3 ATTRIB handler3;
}

handler1 extends Forward {}

handler2 extends HTAccess {}

handler3 extends Dump {}



Dump extends JettyHandler {
 sfClass "org.smartfrog.services.jetty.contexts.handlers.Dump";
}

HTAccess extends JettyHandler {
 sfClass "org.smartfrog.services.jetty.contexts.handlers.HTAccess";
 accessFile ".htaccess";
}

Forward extends JettyHandler {
 sfClass "org.smartfrog.services.jetty.contexts.handlers.Forward";
 mapfromPath "/forward/*";
 maptoPath "/dump";
}

/*==========================================
  declare servlets
===========================================*/

Servlets extends Compound {
 Servlet1 ATTRIB InvokerServlet;
 Servlet2 ATTRIB DumpServlet;
 Servlet3 ATTRIB Sessionservlet;
 Servlet4 ATTRIB DispatchServlet;
 Servlet5 ATTRIB JSPServlet;
 Servlet6 ATTRIB SrcDefaultServlet;
}



InvokerServlet extends JettyServlet {
 name "Invoker";
 pathSpec "/servlet/*";
 className "org.mortbay.jetty.servlet.Invoker";
}

DumpServlet extends JettyServlet {
 name "Dump";
 pathSpec "/dump/*:*.DUMP";
 className "org.mortbay.servlet.Dump";
 initParams [["InitParam","Value"]];
}

SessionServlet extends JettyServlet {
 name "Session";
 pathSpec "/session/*";
 className "org.mortbay.servlet.SessionDump";
}

DispatchServlet extends JettyServlet {
 name "Dispatch";
 pathSpec "/dispatch/*";
 className "org.mortbay.servlet.RequestDispatchTest";
}

JSPServlet extends JettyServlet {
 name "JSP";
 pathSpec "*.jsp";
 className "org.apache.jasper.servlet.JspServlet";
}

SrcDefaultServlet extends JettyServlet {
 name "SrcDefault";
 pathSpec "/src/*";
 className "org.mortbay.jetty.servlet.Default";
 initParams [["dirAllowed","true"], ["resourceBase", (jettyhome ++ "/src")]];
}

CGIservlet extends JettyServlet {
 name "Common Gateway Interface";
 pathSpec "/";
 className "org.mortbay.servlet.CGI";
 initParams [["Path","/bin:/usr/bin:/usr/local/bin"], ["ENV_TEST", ("Jetty home is " ++ jettyhome)]];
}

/*==========================================
  declare listeners
===========================================*/

Listeners extends Compound { 
   Listener1 ATTRIB listener1;
   Listener2 ATTRIB listener2;
}

/**
 * this listens on a direct port
 */
listener1 extends JettyListener {
 listenerPort PARENT:PARENT:port;
 serverHost PARENT:PARENT:serverHost;
}

/**
 * this fields requests handed off from Apache HTTPD
 * this is not a secure protocol, and the port must not be externally visible.
 */
listener2 extends JettyListener {
 sfClass "org.smartfrog.services.jetty.listeners.AJPlistener";
 listenerPort 8009;
 serverHost PARENT:PARENT:serverHost;
}


