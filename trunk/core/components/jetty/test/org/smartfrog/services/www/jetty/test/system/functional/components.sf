/** (C) Copyright 2007 Hewlett-Packard Development Company, LP

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

For more information: www.smartfrog.org

*/


#include "/org/smartfrog/services/www/jetty/test/system/components.sf"

#include "/org/smartfrog/services/www/jetty/test/system/testwar/components.sf"


tcp19Test extends JettyTestCompound {


	action extends LocalJettyServer;


    //we dont care which number comes back, only that we get a number
    tests extends Sequence {
        wait extends waitForAnyHttpResponse  {
            port PARENT:PARENT:action:port;
        }
    }

}

tcp20 extends Compound {

  server1 extends TempDirServer {
    server:maxThreads 20;
    port test.jetty.port.1;
  }

  server2 extends TempDirServer {
    port test.jetty.port.2;
  }

}

tcp20test extends JettyTestCompound {

    action extends tcp20;

    tests extends Sequence {
        wait extends waitForPage {
            port tcp20:server1:port;
        }
        wait2 extends waitForPage {
            port tcp20:server2:port;
        }
    }

}


TestLivenessURL extends JettyTestCompound {

	action extends LocalJettyServer;


    //we dont care which number comes back, only that we get a number
    tests extends Sequence {
        wait extends waitForAnyHttpResponse  {
            url ( "http://localhost:" ++ test.jetty.port.1 ++ "/");
        }
    }

}

TestSecurity extends JettyTestCompound {

	action extends TempDirServer {
	
	
	  port 5050;

	  security extends AdminSecurityRealm {
	    server LAZY PARENT:server;
    }
  }


  //we dont care which number comes back, only that we get a number
  tests extends Sequence {
    wait extends waitForAnyHttpResponse  {
      host "localhost";
      port action:port;
      path "/"      
      username "admin";
      password "password";      
      minimumResponseCode HttpCodes:START_2XX;
      maximumResponseCode HttpCodes:END_2XX;
    }
  }

}

testSecurityUnauth extends TestSecurity {

  //patch the login
  tests:wait extends waitForAnyHttpResponse  {
      url ( "http://localhost:" ++ test.jetty.port.1 ++ "/");
      minimumResponseCode HttpCodes:UNAUTHORIZED;
      maximumResponseCode HttpCodes:FORBIDDEN;
  }

}


TestNioConnector extends JettyTestCompound {

	action extends JettyOnNIO;

  //we dont care which number comes back, only that we get a number
   tests extends Sequence {
      wait extends waitForAnyHttpResponse  {
          port action:port;
      }
   }

}


TestRealm extends JettyTestCompound {
  description "SFOS-628 JettySecurityRealmImpl does not use the realm";
  
  links [["http://jira.smartfrog.org/jira/browse/SFOS-628"]];

	action extends LocalJettyServer {

    testRealm extends AdminSecurityRealm {
    	name "testRealm";
    	server LAZY PARENT:server;
    }
    
  }


  //we dont care which number comes back, only that we get a number
  tests extends Sequence {
    wait extends waitForAnyHttpResponse  {
      url ( "http://admin:password@localhost:" ++ test.jetty.port.1 ++ "/");
      port action:port;
    }
  }

}

ServerOnJetty extends Compound {
  port TBD;
	home TBD;

	jettyServer extends CoreJettyServer {
        jettyhome LAZY PARENT:home;
        port PARENT:port;
    }



    webApp extends WebApplication	{
    	contextPath "webApp";
    	filename "../test-project/target/test-project.war";
    	server LAZY jettyServer;
    }

    listener extends JettyListener {
    	serverHost "localhost";
    	listenerPort PARENT:port;
        server LAZY jettyServer;
    }
}

sfConfig extends ServerOnJetty {
    home "/var/lib/jetty";
    port 10080;
}


