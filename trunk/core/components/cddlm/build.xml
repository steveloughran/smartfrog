<?xml version="1.0"?>
<project name="cddlm" default="default">

    <!--
    /** (C) Copyright 1998-2004 Hewlett-Packard Development Company, LP

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

    For more information: www.smartfrog.org

    */
    -->

    <description>
     Build file for CDDLM.
     Important: set ${axis.lib.dir} to point to the directory of axis that contains
     the following files
      axis.jar
      wsdl4j.jar
      commons-discovery.jar
      commons-logging.jar
      log4j.jar (optional)
     This is usually ws-axis/java/build/lib in a source distribution.
     
     After deploying, get the WSDL From
     http://localhost:5050/axis/services/cddlm?wsdl
     
     Then deploy demos like
     org/smartfrog/examples/subprocesses/subprocess.sf
     org/smartfrog/examples/counter/example.sf

    </description>

    <!-- override point -->
    <property file="build.properties"/>


    <property name="root.dir" location="../.."/>
    <!-- Import common stuff -->
    <import file="${root.dir}/common.xml"/>


    <!-- ========================================================== -->
    <!-- ========================================================== -->
    <target name="init" depends="init-standard-output-dirs,use-smartfrog-tasks">

        <property name="target.jar" location="${dist.lib.dir}/cddlm.jar"/>
        <property name="deploy.sf" value="org/smartfrog/services/cddlm/cddlm.sf"/>

        <property name="default.ini" location="test/files/default.ini"/>
        <property name="default.sf" location="test/files/default.sf"/>



        <!-- the compile time path includes axis-->
        <path id="compile.classpath">
            <path refid="smartfrog.classpath"/>
            <fileset dir="${axis.lib.dir}">
                <include name="**/*.jar"/>
            </fileset>
        </path>

        <!-- check for axis. Because we pull in system classes too (the default),
             if axis is on the classpath it gets used, even if axis.lib.dir is unset
             -->
        <available property="axis.found"
            classname="org.apache.axis.transport.http.SimpleAxisServer"
            classpathref="compile.classpath"
            ignoresystemclasses="false"/>
        <fail unless="axis.found">No Axis found in ${axis.lib.dir}</fail>

        <!-- import Axis tasks-->
        <taskdef resource="axis-tasks.properties"
            classpathref="compile.classpath"/>
        <!-- set up the runtime path -->
        <path id="run.classpath">
            <path refid="compile.classpath"/>
            <path location="${target.jar}"/>
        </path>

    </target>

    <!-- ========================================================== -->
    <!-- compile -->
    <!-- ========================================================== -->
    <target name="compile"
        depends="verify-smartfrog,init">
        <depend srcdir="${src.dir}"
            destdir="${build.classes.dir}"
            cache="${build.dir}/depends"
            closure="yes"/>
        <sf-javac
            classpathref="compile.classpath"
            srcdir="${src.dir}"
            destdir="${build.classes.dir}"
            />
        <copy-useful-files src="${src.dir}" dest="${build.classes.dir}"/>
    </target>

    <!-- ========================================================== -->
    <!-- RMI compile-->
    <!-- ========================================================== -->
    <target name="rmi" depends="compile"
        description="create the RMI classes">
        <sf-rmic
            base="${build.classes.dir}"
            verify="true"
            includes="**/*.class">
            <classpath refid="compile.classpath"/>
        </sf-rmic>
    </target>

    <!-- ========================================================== -->
    <!-- create the jar -->
    <!-- ========================================================== -->
    <target name="dist" depends="compile,rmi"
        description="create the jar files">
        <jar destfile="${target.jar}" basedir="${build.classes.dir}" includes="**/*"/>
    </target>

    <!-- ========================================================== -->
    <!-- parse the file -->
    <!-- ========================================================== -->
    <target name="parse" depends="init,dist"
        description="parse the cddlm descriptor">

        <sf-parse quiet="true" file="${src.dir}/${deploy.sf}">
            <!--  <codebase file="${target.jar}"/> -->
            <classpath path="${target.jar}"/>
        </sf-parse>

        <sf-parse quiet="true">
            <classpath path="${target.jar}"/>
            <source dir="${build.classes.dir}"
                includes="org/cddlm/components/*.sf">
            </source>
        </sf-parse>

    </target>

    <!-- ========================================================== -->
    <!-- parse the test files -->
    <!-- ========================================================== -->
    <target name="parse-tests" depends="init,dist"
        description="parse the test descriptor">


        <sf-parse quiet="true">
            <classpath path="${target.jar}"/>
            <source dir="${build.classes.dir}"
                includes="org/cddlm/components/*.sf">
            </source>
        </sf-parse>

    </target>

    <!-- ========================================================== -->
    <!-- run the service inline -->
    <!-- ========================================================== -->
    <target name="start-daemon" depends="parse,dist"
        description="parse the cddlm descriptor">
        <sf-startdaemon classpathref="run.classpath"
            logStackTraces="true" spawn="true">
            <assertions enableSystemAssertions="true">
                <enable/>
            </assertions>
        </sf-startdaemon>
    </target>


    <!-- ========================================================== -->
    <!-- deploy; requires a host -->
    <!-- ========================================================== -->
    <target name="deploy" depends="parse,dist"
        description="parse the cddlm descriptor">
        <property name="deploy.host" value="localhost"/>
        <sf-deploy classpathref="run.classpath"
            logStackTraces="true"
            host="${deploy.host}"
            >
            <application name="cddlm" descriptor="/${deploy.sf}"/>
            <codebase file="target.jar"/>
        </sf-deploy>
    </target>


    <!-- ========================================================== -->
    <!-- deploy; requires a host -->
    <!-- ========================================================== -->
    <target name="create-WSDL" depends="dist">
        <axis-java2wsdl>
        </axis-java2wsdl>
    </target>


    <!-- ========================================================== -->
    <!-- system tests -->
    <!-- ========================================================== -->
    <target name="system-tests" depends="parse,dist"
        description="run system tests"
        if="system.tests.enabled">
        <parallel>

            <!-- first thread runs the daemon -->
            <sequential>
                <antcall target="start-daemon"/>
            </sequential>

            <!-- this is the next thread -->
            <sequential>

                <!--
                  wait ten seconds for the harness to start
                  without this the first tests will fail as there is no
                  sf daemon around
                -->
                <sf-waitfordaemon maxwait="10" timeoutproperty="daemon.missing"/>
                <fail if="daemon.missing">No daemon</fail>
                <!-- get the WSDL -->

                <!-- conditionally stop the daemon -->
                <antcall target="stop-daemon-if-started"/>
                <!-- end the test thread -->
            </sequential>
        </parallel>
    </target>

    <!-- ========================================================== -->
    <!-- default target -->
    <!-- ========================================================== -->
    <target name="default" depends="deploy" description="default target"/>

</project>
