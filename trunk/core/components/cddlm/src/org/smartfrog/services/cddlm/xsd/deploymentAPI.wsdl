<?xml version="1.0" encoding="UTF-8" ?>
<wsdl:definitions 
	targetNamespace="http://smartfrog.org/cddlm" 
	xmlns:api="http://smartfrog.org/cddlm" 
	xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" 
	xmlns:wsdlsoap="http://schemas.xmlsoap.org/wsdl/soap/" 
  xmlns:xsd="http://www.w3.org/2001/XMLSchema"
  xmlns:cdl="urn:cddlm/xml/0.1"
  xmlns:wsa="http://schemas.xmlsoap.org/ws/2003/03/addressing"
  xmlns:jsdl="http://www.gridforum.org/JSDL"
  >
  
  <!-- ============================================================= -->
<wsdl:documentation >  
    This is the WSDL Describing the service API for the public deployment
    services of a CDDLM Basic Services runtime. 
    
    Version: 0.1. 
    This is an initial draft for the first demonstration-grade prototypes. 
    It may change completely in future. 


    In the annotations of this document, MAY, SHOULD and MUST have the
    same strict meaning as in IETF documents (TODO: insert reference)
    
</wsdl:documentation>
     
  <!-- ============================================================= -->
  <!-- BEGIN IMPORTS -->
  <!-- ============================================================= -->
<!--     
  <import 
    namespace="urn:cddlm/xml/0.1" 
    schemaLocation="cddlm.xsd"/> 

  <import 
    namespace="http://schemas.xmlsoap.org/ws/2003/03/addressing" 
    schemaLocation="ws-addressing.xsd"/>
    
  <import 
    namespace="http://www.gridforum.org/JSDL" 
    schemaLocation="jsdl.xsd"/> 
 -->
 
      <xsd:schema 
        targetNamespace=
 "http://www.ibm.com/xmlns/stdwip/web-services/WS-BaseNotification" >
 
         <xsd:include schemaLocation=
 "http://www-106.ibm.com/developerworks/library/specification/ws-notification/WS-BaseN.xsd" />
         
         <xsd:import 
            namespace=
            "http://schemas.xmlsoap.org/ws/2003/03/addressing"
            schemaLocation=
            "http://schemas.xmlsoap.org/ws/2003/03/addressing" 
         />
         <xsd:import namespace=
  "http://www.ibm.com/xmlns/stdwip/web-services/WS-ResourceProperties" 
              schemaLocation= 
  "http://www-106.ibm.com/developerworks/webservices/library/ws-resource/WS-ResourceProperties.xsd" 
         />
         <xsd:import 
            namespace=
  "http://www.ibm.com/xmlns/stdwip/web-services/WS-ResourceLifetime"
            schemaLocation= 
  "http://www-106.ibm.com/developerworks/webservices/library/ws-resource/WS-ResourceLifetime.xsd" 
         />
                
       </xsd:schema>
  <!-- ============================================================= -->
  <!-- END IMPORTS -->
  <!-- ============================================================= -->
    
  <!-- ============================================================= -->
  <!-- begin WSDL types -->
  <!-- ============================================================= -->
 <wsdl:types>

  <!-- ============================================================= -->
  <!-- BEGIN WS-ADDRESSING SCHEMA -->
  <!-- This is an inline insertion of the 2003/03 version of WS-A    -->
  <!-- The terms and conditions of the following disclaimer apply    -->
  <!-- to this schema only.    -->
  <!-- ============================================================= -->

<!-- 
 
Legal Disclaimer

The presentation, distribution or other dissemination of the information 
contained in this document is not a license, either expressly or impliedly, 
to any intellectual property owned or controlled by BEA or IBM or Microsoft
and\or any other third party.  BEA and IBM and Microsoft and\or any other
third party may have patents, patent applications, trademarks, copyrights, 
or other intellectual property rights covering subject matter in this 
document.  The furnishing of this document does not give you any license 
to BEA's and IBM's and Microsoft's or any other third party's patents, 
trademarks, copyrights, or other intellectual property.

This document and the information contained herein is provided on an "AS IS"
basis and to the maximum extent permitted by applicable law, BEA and IBM 
and Microsoft provide the document AS IS AND WITH ALL FAULTS, and hereby 
disclaims all other warranties and conditions, either express, implied or 
statutory, including, but not limited to, any (if any) implied warranties, 
duties or conditions of merchantability, of fitness for a particular 
purpose, of accuracy or completeness of responses, of results, of 
workmanlike effort, of lack of viruses, and of lack of negligence, all with
regard to the document. ALSO, THERE IS NO WARRANTY OR CONDITION OF 
TITLE, QUIET ENJOYMENT, QUIET POSSESSION, CORRESPONDENCE TO DESCRIPTION OR 
NON-INFRINGEMENT OF ANY INTELLECTUAL PROPERTY RIGHTS WITH REGARD TO THE 
DOCUMENT.

IN NO EVENT WILL BEA or IBM or MICROSOFT BE LIABLE TO ANY OTHER PARTY FOR THE
COST OF PROCURING SUBSTITUTE GOODS OR SERVICES, LOST PROFITS, LOSS OF USE, 
LOSS OF DATA, OR ANY INCIDENTAL, CONSEQUENTIAL, DIRECT, INDIRECT, OR SPECIAL 
DAMAGES WHETHER UNDER CONTRACT, TORT, WARRANTY, OR OTHERWISE, ARISING IN ANY 
WAY OUT OF THIS OR ANY OTHER AGREEMENT RELATING TO THIS DOCUMENT, WHETHER OR 
NOT SUCH PARTY HAD ADVANCE NOTICE OF THE POSSIBILITY OF SUCH DAMAGES.

Copyright Notice

Copyright 2003 BEA Systems Inc. and IBM Corporation and Microsoft Corporation. All rights reserved.

-->
<!--
<xsd:schema targetNamespace="http://schemas.xmlsoap.org/ws/2003/03/addressing" elementFormDefault="qualified" blockDefault="#all">
  <xsd:element name="EndpointReference" type="wsa:EndpointReferenceType"/>
  <xsd:complexType name="EndpointReferenceType">
    <xsd:sequence>
      <xsd:element name="Address" type="wsa:AttributedURI"/>
      <xsd:element name="ReferenceProperties" type="wsa:ReferencePropertiesType" minOccurs="0"/>
      <xsd:element name="PortType" type="wsa:AttributedQName" minOccurs="0"/>
      <xsd:element name="ServiceName" type="wsa:ServiceNameType" minOccurs="0"/>
      <xsd:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded">
        <xsd:annotation>
          <xsd:documentation>
					 If "Policy" elements from namespace "http://schemas.xmlsoap.org/ws/2002/12/policy#policy" are used, they must appear first (before any extensibility elements).
          </xsd:documentation>
        </xsd:annotation>
      </xsd:any>
    </xsd:sequence>
    <xsd:anyAttribute namespace="##other" processContents="lax"/>
  </xsd:complexType>
  <xsd:complexType name="ReferencePropertiesType">
    <xsd:sequence>
      <xsd:any processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="ServiceNameType">
    <xsd:simpleContent>
      <xsd:extension base="xsd:QName">
        <xsd:attribute name="PortName" type="xsd:NCName"/>
        <xsd:anyAttribute namespace="##other" processContents="lax"/>
      </xsd:extension>
    </xsd:simpleContent>
  </xsd:complexType>
  <xsd:element name="MessageID" type="wsa:AttributedURI"/>
  <xsd:element name="RelatesTo" type="wsa:Relationship"/>
  <xsd:element name="To" type="wsa:AttributedURI"/>
  <xsd:element name="Action" type="wsa:AttributedURI"/>
  <xsd:element name="From" type="wsa:EndpointReferenceType"/>
  <xsd:element name="ReplyTo" type="wsa:EndpointReferenceType"/>
  <xsd:element name="FaultTo" type="wsa:EndpointReferenceType"/>
  <xsd:element name="Recipient" type="wsa:EndpointReferenceType"/>
  <xsd:complexType name="Relationship">
    <xsd:simpleContent>
      <xsd:extension base="xsd:anyURI">
        <xsd:attribute name="RelationshipType" type="xsd:QName" use="optional"/>
        <xsd:anyAttribute namespace="##other" processContents="lax"/>
      </xsd:extension>
    </xsd:simpleContent>
  </xsd:complexType>
  <xsd:simpleType name="RelationshipTypeValues">
    <xsd:restriction base="xsd:QName">
      <xsd:enumeration value="wsa:Response"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:complexType name="AttributedQName">
    <xsd:simpleContent>
      <xsd:extension base="xsd:QName">
        <xsd:anyAttribute namespace="##other" processContents="lax"/>
      </xsd:extension>
    </xsd:simpleContent>
  </xsd:complexType>
  <xsd:complexType name="AttributedURI">
    <xsd:simpleContent>
      <xsd:extension base="xsd:anyURI">
        <xsd:anyAttribute namespace="##other" processContents="lax"/>
      </xsd:extension>
    </xsd:simpleContent>
  </xsd:complexType>
</xsd:schema>
 
-->

  <!-- ============================================================= -->
  <!-- BEGIN SCHEMA -->
  <!-- ============================================================= -->
      
<!--       xmlns="http://www.w3.org/2001/XMLSchema" -->

  <xsd:schema elementFormDefault="qualified" 
    targetNamespace="http://smartfrog.org/cddlm" 
    >
    
  <!-- ============================================================= -->
  <!-- BEGIN SIMPLETYPES -->
  <!-- ============================================================= -->
    
  <xsd:simpleType name="callbackEnum">
    <xsd:annotation>
      <xsd:documentation>
      Enumeration of supported callback types. Any
      unexpected type constitutes an error and should be
      flagged. 
        -none: we have no callback
        -direct:  caller calls URL with a predefined event message
        -ws-notification:  callbacks via WS-N
        
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="none"/>
      <xsd:enumeration value="direct"/>
      <xsd:enumeration value="ws-notification"/>
      <xsd:enumeration value="ws-eventing"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="languageEnum">
    <xsd:annotation>
      <xsd:documentation>
      Enumeration of supported callback language types. Any
      unexpected type constitutes an error and should be
      flagged. 
        -smartfrog
        -cdl
      Commentary: we could make this self describing from the name
      of the deployment descriptor
        
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="smartfrog"/>
      <xsd:enumeration value="cdl"/>
    </xsd:restriction>
  </xsd:simpleType>
  

  <!-- ============================================================= -->
  <!-- naming rules for application -->
  <!-- ============================================================= -->
  <xsd:simpleType name="applicationNameType">
      <xsd:annotation>
        <xsd:documentation>
        This is the policy for the naming of applications
        </xsd:documentation>
      </xsd:annotation>  
    <xsd:restriction base="xsd:NCName"/>
<!--
    <xsd:restriction base="xsd:string">
      <xsd:pattern value="[\p{L}\-\.][\p{L}\-\.\P{Nd}]*"/>
    </xsd:restriction>
-->
  </xsd:simpleType>      

  <!-- ============================================================= -->
  <!-- The response to deployment requests is the URI to a endpoint
       within the Basic-Services generated component model -->
  <!-- Commentary: we may want to make this a WS-Addressing endpoint -->     
  <!-- ============================================================= -->
  
  <xsd:simpleType name="applicationReferenceType">
      <xsd:annotation>
        <xsd:documentation>
        This is the policy for the naming of applications
        </xsd:documentation>
      </xsd:annotation>  
    <xsd:restriction base="xsd:anyURI"/>
  </xsd:simpleType>

  <!-- ============================================================= -->
  <!-- allows the caller to pass a URL to a deploy descriptor, instead
       of the body itself. This allows signed descriptors inside
       files to be used as a source of data -->
  <!-- ============================================================= -->
  <xsd:simpleType name="remoteDescriptorType">
      <xsd:annotation>
        <xsd:documentation>
        Descriptors can also be URLs. 
        We extend the URI type in case of future needs to add attributes such as
        authentication information.
        </xsd:documentation>
      </xsd:annotation>  
    <xsd:restriction base="xsd:anyURI"/>
  </xsd:simpleType>      

  <!-- ============================================================= -->
  <!-- BEGIN COMPLEXTYPES -->
  <!-- ============================================================= -->
  

  <xsd:complexType name="addressType">
    <xsd:annotation>
      <xsd:documentation>
      holder for WS-Addressing address
      </xsd:documentation>
    </xsd:annotation>    
    <xsd:sequence>
      <xsd:any  namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>
  
  <xsd:complexType name="callbackAddressType">
    <xsd:annotation>
      <xsd:documentation>
      holder for different callback types
      </xsd:documentation>
    </xsd:annotation>    
    <xsd:choice>
      <xsd:element name="uri" type="xsd:anyURI"/>
      <xsd:element name="address" type="api:addressType"/>
      <xsd:any  processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xsd:choice>
  </xsd:complexType>    
  
  <!--
    we could actually explicitly declare both the smartfrog
    and CDL types in here, where smartfrog is a simple
    element containing arbitrary text inside, and with a language
    attribute
  -->  
  <xsd:complexType name="deploymentDescriptorType">
    <xsd:sequence>
      <xsd:any  processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

<!--   
  <xsd:complexType name="cdlDeploymentDescriptorType" type="cdl:cdlDocumentType">
  </xsd:complexType>  
  
 
  <xsd:complexType name="smartFrogDeploymentDescriptorType">
      <xsd:annotation>
      <xsd:documentation>
        SmartFrog deployment Descriptor. 
        Contains the payload as a string, the language version as an attribute
      </xsd:documentation>
    </xsd:annotation>  
      <xsd:element name="smartfrog" type="xsd:string" 
        minOccurs="0" maxOccurs="1"/>
    <xsd:attribute name="version" type="xsd:string" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="deploymentDescriptorType">
    <xsd:choice>
      <xsd:element name="remoteURL" type="api:remoteDescriptorType"/>
      <xsd:element name="smartfrog" type="api:smartFrogDeploymentDescriptorType"/>
      <xsd:element ref="cdl:cdl"/>
      <xsd:any  processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xsd:choice>
  </xsd:complexType>  
-->

  <!-- TODO: incorporate JSDL into the specification -->
  <xsd:complexType name="jsdlType">
    <xsd:annotation>
      <xsd:documentation>
        This is the jsdl content. It should be in the namespace http://www.gridforum.org/JSDL.
        The reason we are not explicitly declaring the JSDL import is to 
        (a) stop the SOAP stack trying to parse it.
        (b) decouple the API from changes in the spec. 
        (c) handle WSDL parsers that are no good at taking in extra schemas
            (like the Mono implementation)
      </xsd:documentation>
    </xsd:annotation>    
    <xsd:sequence>
      <xsd:any  processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>
  
  <xsd:complexType name="statusType">
    <xsd:annotation>
      <xsd:documentation>
        This is the server status response. If the endpoint returns with anything
        then the system is partially alive; a SOAPFault is always a sign of failure
        from the perspective of the far end or the transport. 
        Interpretation of a server status into a proper health metric is left to
        tools of the caller's choice.
      </xsd:documentation>
    </xsd:annotation>  
    <xsd:sequence>
        <!-- namespace="##other" -->
      <xsd:any  processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>
  
  <xsd:complexType name="propertyTupleType">
    <xsd:annotation>
      <xsd:documentation>
        A name/value pair of properties. Names are restricted to NCName type;
        values are any string. Why restrict name type? For easier incorporation
        into the language
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="name" type="xsd:NCName" minOccurs="1" maxOccurs="1"/>
      <xsd:element name="value" type="xsd:string" minOccurs="1" maxOccurs="1"/>
    </xsd:sequence>
  </xsd:complexType>  
  
  <xsd:complexType name="propertyMapType">
    <xsd:annotation>
      <xsd:documentation>
        A set of name/value pair of properties. Only one instance of each name
        is allowed. This is essentially a serialisation of a map/hash table.
      </xsd:documentation>
    </xsd:annotation>  
    <xsd:sequence>
      <xsd:element name="property" type="api:propertyTupleType" 
        minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>  
  
  <xsd:complexType name="applicationNameOrReferenceType">
    <xsd:annotation>
      <xsd:documentation>
      A type that can contain either an application name or a reference.
      Names are only unique to a host, but the combination of (host,name) is
      guaranteed to be unique and valid over multiple deployment.
      References are only valid for a single deployment.
      URL information
      </xsd:documentation>
    </xsd:annotation>  
      <xsd:choice>
        <xsd:element name="name" type="api:applicationNameType"/>
        <xsd:element name="reference" type="api:applicationReferenceType"/>
      </xsd:choice>
  </xsd:complexType>  
  
  
      
  <!-- ============================================================= -->
  <!-- Requests and responses. These are the complex types that
  get sent/received as messages-->
  <!-- ============================================================= -->
    
  <xsd:element name="deployRequest">
    <xsd:complexType>
      <xsd:annotation>
        <xsd:documentation>
          This is our deployment request.
          Rather than have so many typed options, 
          a core few mandatory options are specified inline, and the rest
          are referred to in the deployment_options map.
          TODO: what if a deployment option is not understood by the destination?
          Do we need a mustUnderstand flag?
        </xsd:documentation>
      </xsd:annotation>
     <xsd:sequence>
      <xsd:element name="jsdl" type="api:jsdlType">
        <xsd:annotation>
          <xsd:documentation>
          </xsd:documentation>
        </xsd:annotation>  
      </xsd:element>

      <xsd:element name="application" type="api:applicationNameType"/>
      <xsd:element name="descriptor" type="api:deploymentDescriptorType"/>
      <xsd:element name="callbackType" type="api:callbackEnum"/>
      <xsd:element name="callbackAddress" type="api:callbackAddressType"/>
      <xsd:element name="hostname" type="xsd:string"/>
      <xsd:element name="synchronous" type="xsd:boolean">
        <xsd:annotation>
          <xsd:documentation>
            A flag to indicate whether deployment should be synchronous or not.
            synchronous deployment implies the call does not return until the
            deployment as initiated. The return from the call will then be
            a valid reference to an application.
            
            An asynchronous deployment implies that the deployment has been queued
            for deployment at the next possible opportunity, and that callbacks
            will include information about the status of the deployment. 
            
            There are no guarantees in async deployment as to whether or not
            the deployment descriptor is parsed or validated during the synchronous
            part of the call.
          </xsd:documentation>
        </xsd:annotation>  
      </xsd:element>
      <xsd:element name="deployment_options" type="api:propertyMapType">
        <xsd:annotation>
          <xsd:documentation>
          This is for optional deployment options. 
          </xsd:documentation>
        </xsd:annotation>  
      </xsd:element>
      <xsd:element name="properties" type="api:propertyMapType">
        <xsd:annotation>
          <xsd:documentation>
            This is for properties that are to be passed directly to the 
            deployment engine, using whatever property binding mechanism is
            included in the language. 
          </xsd:documentation>
        </xsd:annotation>  
      </xsd:element>
     </xsd:sequence>
    </xsd:complexType>
   </xsd:element>
   
   <xsd:element name="deployResponse">
    <xsd:complexType>
      <xsd:annotation>
        <xsd:documentation>
        This is our deployment response. 
        It consists of a reference to the application, which can be used
        for future references.
        For an asynchronous deployment, the reference may be nil. This means 
        that a reference cannot be returned until the deployment is complete. 
        </xsd:documentation>
      </xsd:annotation>      
     <xsd:sequence>
      <xsd:element name="applicationReference" type="api:applicationReferenceType"
        nillable="true"/>
     </xsd:sequence>
    </xsd:complexType>
   </xsd:element>
   
   <xsd:element name="undeployRequest" >
    <xsd:complexType>
      <xsd:annotation>
        <xsd:documentation>
          Request to terminate an application. Takes either a name or a reference
        </xsd:documentation>
      </xsd:annotation>
     <xsd:sequence>
      <xsd:element name="application" type="api:applicationNameOrReferenceType"/>      
      <xsd:element name="reason" type="xsd:string"/>
      <xsd:element name="synchronous" type="xsd:boolean"/>
     </xsd:sequence>
    </xsd:complexType>   
   </xsd:element>   

   <xsd:element name="undeployResponse" type="api:statusType" >
   </xsd:element>      
   
   <xsd:element name="listLanguagesRequest">
      <xsd:annotation>
        <xsd:documentation>
        This is an empty message
        </xsd:documentation>
      </xsd:annotation>     
    <xsd:complexType/>
   </xsd:element>
   
   
   <xsd:element name="listLanguagesResponse">
    <xsd:complexType>
      <xsd:annotation>
        <xsd:documentation>
        The list of languages that is supported
        </xsd:documentation>
      </xsd:annotation>      
     <xsd:sequence>
      <xsd:element name="listLanguagesReturn" type="xsd:string"
        maxOccurs="unbounded" minOccurs="1"/>
     </xsd:sequence>
    </xsd:complexType>
   </xsd:element>
   
   <xsd:element name="serverStatusRequest">
      <xsd:annotation>
        <xsd:documentation>
        This is an empty message
        </xsd:documentation>
      </xsd:annotation>     
    <xsd:complexType/>
   </xsd:element>   

   <xsd:element name="serverStatusResponse" type="api:statusType" >
   </xsd:element>   

   <xsd:element name="applicationStatusRequest">
      <xsd:annotation>
        <xsd:documentation>
        Request the status of an individual application
        </xsd:documentation>
      </xsd:annotation>     
    <xsd:complexType>
      <xsd:sequence>
        <xsd:element name="application" type="api:applicationNameOrReferenceType"/>
      </xsd:sequence> 
    </xsd:complexType>
   </xsd:element>   
  
   <xsd:element name="applicationStatusResponse" type="api:statusType" >
   </xsd:element>      

   <xsd:element name="lookupApplicationRequest">
      <xsd:annotation>
        <xsd:documentation>
        Look up an application: pass in the name and get a reference back
        (or an error, if there is no such application or security prevents
         the caller seeing it)
        </xsd:documentation>
      </xsd:annotation>     
    <xsd:complexType>
      <xsd:sequence>
        <xsd:element name="application" type="api:applicationNameOrReferenceType"/>
      </xsd:sequence> 
    </xsd:complexType>
   </xsd:element>   
  
   <xsd:element name="lookupApplicationResponse" type="api:applicationReferenceType" >
   </xsd:element>      
   
   
   
  <!-- ============================================================= -->
  <!-- end schema-->
  <!-- ============================================================= -->

  </xsd:schema>
  
  <!-- ============================================================= -->
  <!-- end WSDL types -->
  <!-- ============================================================= -->
  
 </wsdl:types>

  <!-- ============================================================= -->
  <!-- begin WSDL message types-->
  <!-- ============================================================= -->

 <wsdl:message name="deployRequest">
  <wsdl:part element="api:deployRequest" name="deploy"/>
 </wsdl:message>
 
 <wsdl:message name="deployResponse">
  <wsdl:part element="api:deployResponse" name="response"/>
 </wsdl:message> 

 <wsdl:message name="undeployRequest">
  <wsdl:part element="api:undeployRequest" name="undeploy"/>
 </wsdl:message>
 
 <wsdl:message name="undeployResponse">
  <wsdl:part element="api:undeployResponse" name="response"/>
 </wsdl:message> 
 
 <wsdl:message name="listLanguagesRequest">
  <wsdl:part element="api:listLanguagesRequest" name="request"/>
 </wsdl:message>

 <wsdl:message name="listLanguagesResponse">
  <wsdl:part element="api:listLanguagesResponse" name="languages"/>
 </wsdl:message>
 
 <wsdl:message name="serverStatusRequest">
  <wsdl:part element="api:serverStatusRequest" name="serverStatus"/>
 </wsdl:message>
 
 <wsdl:message name="serverStatusResponse">
  <wsdl:part element="api:serverStatusResponse" name="response"/>
 </wsdl:message> 

 <wsdl:message name="applicationStatusRequest">
  <wsdl:part element="api:applicationStatusRequest" name="applicationStatus"/>
 </wsdl:message>
 
 <wsdl:message name="applicationStatusResponse">
  <wsdl:part element="api:applicationStatusResponse" name="response"/>
 </wsdl:message> 

 <wsdl:message name="lookupApplicationRequest">
  <wsdl:part element="api:lookupApplicationRequest" name="lookupApplication"/>
 </wsdl:message>
 
 <wsdl:message name="lookupApplicationResponse">
  <wsdl:part element="api:lookupApplicationResponse" name="response"/>
 </wsdl:message> 
 
  
 
  <!-- ============================================================= -->
  <!-- begin WSDL operations -->
  <!-- ============================================================= -->

 <wsdl:portType name="DeploymentEndpoint">
 
  <!-- deploy -->
  <wsdl:operation name="deploy">
   <wsdl:input message="api:deployRequest" name="deployRequest"/>
   <wsdl:output message="api:deployResponse" name="deployResponse"/>
  </wsdl:operation>
  
  <!-- list languages -->
  <wsdl:operation name="listLanguages">
   <wsdl:input message="api:listLanguagesRequest" name="listLanguagesRequest"/>
   <wsdl:output message="api:listLanguagesResponse" name="listLanguagesResponse"/>
  </wsdl:operation>
  
  <!-- undeploy -->
  <wsdl:operation name="undeploy">
   <wsdl:input message="api:undeployRequest" name="undeployRequest"/>
   <wsdl:output message="api:undeployResponse" name="undeployResponse"/>
  </wsdl:operation>
  
  <!--  server status -->
  <wsdl:operation name="serverStatus">
   <wsdl:input message="api:serverStatusRequest" name="serverStatusRequest"/>
   <wsdl:output message="api:serverStatusResponse" name="serverStatusResponse"/>
  </wsdl:operation>
  
  <!--  application status -->
  <wsdl:operation name="applicationStatus">
   <wsdl:input message="api:applicationStatusRequest" name="applicationStatusRequest"/>
   <wsdl:output message="api:applicationStatusResponse" name="applicationStatusResponse"/>
  </wsdl:operation>
  
    
  
  <!--  lookup application -->
  <wsdl:operation name="lookupApplication">
   <wsdl:input message="api:lookupApplicationRequest" name="lookupApplicationRequest"/>
   <wsdl:output message="api:lookupApplicationResponse" name="lookupApplicationResponse"/>
  </wsdl:operation>
  
  
 </wsdl:portType>
 
 
  <!-- ============================================================= -->
  <!-- Bind WSDL to doc/lit SOAP1.2 -->
  <!-- ============================================================= -->
 
 <wsdl:binding name="cddlmSoapBinding" type="api:DeploymentEndpoint">
  <wsdlsoap:binding style="document" 
    transport="http://schemas.xmlsoap.org/soap/http"/>
    
    <!-- deploy -->
  <wsdl:operation name="deploy">
    <wsdlsoap:operation soapAction=""/>
    <wsdl:input name="deployRequest">
      <wsdlsoap:body use="literal"/>
    </wsdl:input>
    <wsdl:output name="deployResponse">
      <wsdlsoap:body use="literal"/>
    </wsdl:output>
  </wsdl:operation>
  
  <wsdl:operation name="undeploy">
    <wsdlsoap:operation soapAction=""/>
    <wsdl:input name="undeployRequest">
      <wsdlsoap:body use="literal"/>
    </wsdl:input>
    <wsdl:output name="undeployResponse">
      <wsdlsoap:body use="literal"/>
    </wsdl:output>
  </wsdl:operation>

  <wsdl:operation name="listLanguages">
    <wsdlsoap:operation soapAction=""/>
    <wsdl:input name="listLanguagesRequest">
      <wsdlsoap:body use="literal"/>
    </wsdl:input>
    <wsdl:output name="listLanguagesResponse">
      <wsdlsoap:body use="literal"/>
    </wsdl:output>
  </wsdl:operation>

  <wsdl:operation name="serverStatus">
    <wsdlsoap:operation soapAction=""/>
    <wsdl:input name="serverStatusRequest">
      <wsdlsoap:body use="literal"/>
    </wsdl:input>
    <wsdl:output name="serverStatusResponse">
      <wsdlsoap:body use="literal"/>
    </wsdl:output>
  </wsdl:operation>  


  <wsdl:operation name="applicationStatus">
    <wsdlsoap:operation soapAction=""/>
    <wsdl:input name="applicationStatusRequest">
      <wsdlsoap:body use="literal"/>
    </wsdl:input>
    <wsdl:output name="applicationStatusResponse">
      <wsdlsoap:body use="literal"/>
    </wsdl:output>
  </wsdl:operation>  

  
  <wsdl:operation name="lookupApplication">
    <wsdlsoap:operation soapAction=""/>
    <wsdl:input name="lookupApplicationRequest">
      <wsdlsoap:body use="literal"/>
    </wsdl:input>
    <wsdl:output name="lookupApplicationResponse">
      <wsdlsoap:body use="literal"/>
    </wsdl:output>
  </wsdl:operation>  

 </wsdl:binding>
 
  <!-- ============================================================= -->
  <!-- begin WSDL service declaration -->
  <!-- this is just a sample declaration; the real location of the service -->
  <!-- has to be determined through other means -->
  <!-- ============================================================= -->

 
 <wsdl:service name="CDDLMDeploymentService">
  <wsdl:documentation >
    This is a sample CDDLM deployment service, and is only for testing
  </wsdl:documentation>
  <wsdl:port binding="api:cddlmSoapBinding" name="cddlm">
   <wsdlsoap:address location="http://localhost:5050/axis/services/cddlm"/>
  </wsdl:port>
 </wsdl:service>
 
 
  <!-- ============================================================= -->
  <!-- end WSDL definitions-->
  <!-- ============================================================= -->

</wsdl:definitions>
