<?xml version="1.0" encoding="UTF-8" ?>
<wsdl:definitions 
	targetNamespace="http://smartfrog.org/cddlm" 
	xmlns:api="http://smartfrog.org/cddlm" 
	xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" 
	xmlns:wsdlsoap="http://schemas.xmlsoap.org/wsdl/soap/" 
  xmlns:xsd="http://www.w3.org/2001/XMLSchema"
  xmlns:cdl="urn:cddlm/xml/0.1"
  xmlns:wsa="http://schemas.xmlsoap.org/ws/2003/03/addressing"
  xmlns:jsdl="http://www.gridforum.org/JSDL"
  >
  
  <!-- ============================================================= -->
<wsdl:documentation >  
    This is the WSDL Describing the service API for the public deployment
    services of a CDDLM Basic Services runtime. 
    
    Version: 0.1. 
    This is an initial draft for the first demonstration-grade prototypes. 
    It may change completely in future. 


    The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
    NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED",  "MAY", and
    "OPTIONAL" in this document are to be interpreted as described in
    RFC 2119.
    http://www.ietf.org/rfc/rfc2119.txt
      
</wsdl:documentation>
     
  <!-- ============================================================= -->
  <!-- BEGIN IMPORTS -->
  <!-- ============================================================= -->
    <!-- 
    
  <import 
    namespace="urn:cddlm/xml/0.1" 
    schemaLocation="cddlm.xsd"/> 
 -->

 <import 
    namespace="http://schemas.xmlsoap.org/ws/2003/03/addressing" 
    schemaLocation="ws-addressing.xsd"/>
    
<!--     
  <import 
    namespace="http://www.gridforum.org/JSDL" 
    schemaLocation="jsdl.xsd"/> 
 
  -->
    <!--
      <xsd:schema 
        targetNamespace=
 "http://www.ibm.com/xmlns/stdwip/web-services/WS-BaseNotification" >
 
         <xsd:include schemaLocation="WS-BaseN.xsd" />
         
         <xsd:import 
            namespace=
            "http://schemas.xmlsoap.org/ws/2003/03/addressing"
            schemaLocation=
            "http://schemas.xmlsoap.org/ws/2003/03/addressing" 
         />
         <xsd:import namespace=
  "http://www.ibm.com/xmlns/stdwip/web-services/WS-ResourceProperties" 
              schemaLocation= 
  "http://www-106.ibm.com/developerworks/webservices/library/ws-resource/WS-ResourceProperties.xsd" 
         />
         <xsd:import 
            namespace=
  "http://www.ibm.com/xmlns/stdwip/web-services/WS-ResourceLifetime"
            schemaLocation= 
  "http://www-106.ibm.com/developerworks/webservices/library/ws-resource/WS-ResourceLifetime.xsd" 
         />
                
       </xsd:schema>
       
       -->
  <!-- ============================================================= -->
  <!-- END IMPORTS -->
  <!-- ============================================================= -->
    
  <!-- ============================================================= -->
  <!-- begin WSDL types -->
  <!-- ============================================================= -->
 <wsdl:types>

  <!-- ============================================================= -->
  <!-- BEGIN SCHEMA -->
  <!-- ============================================================= -->
      

  <xsd:schema elementFormDefault="qualified" 
    targetNamespace="http://smartfrog.org/cddlm" 
    >
<!--     
  <xsd:import 
    namespace="http://schemas.xmlsoap.org/ws/2003/03/addressing" 
    schemaLocation="ws-addressing.xsd"/>    
     -->
  <!-- ============================================================= -->
  <!-- BEGIN SIMPLETYPES -->
  <!-- ============================================================= -->
    
  <xsd:simpleType name="callbackEnum">
    <xsd:annotation>
      <xsd:documentation>
      Enumeration of supported callback types. Any
      unexpected type constitutes an error and should be
      flagged. 
        -none: we have no callback
        -direct:  caller calls URL with a predefined event message
        -ws-notification:  callbacks via WS-N
        -ws-eventing
        
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="none"/>
      <xsd:enumeration value="direct"/>
      <xsd:enumeration value="ws-notification"/>
      <xsd:enumeration value="ws-eventing"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="languageEnum">
    <xsd:annotation>
      <xsd:documentation>
      Enumeration of supported callback language types. Any
      unexpected type constitutes an error and should be
      flagged. 
        -smartfrog
        -cdl
      Commentary: we could make this self describing from the name
      of the deployment descriptor
        
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="smartfrog"/>
      <xsd:enumeration value="cdl"/>
    </xsd:restriction>
  </xsd:simpleType>
  

  <!-- ============================================================= -->
  <!-- naming rules for application -->
  <!-- ============================================================= -->
  <xsd:simpleType name="applicationNameType">
      <xsd:annotation>
        <xsd:documentation>
        This is the policy for the naming of applications
        </xsd:documentation>
      </xsd:annotation>  
    <xsd:restriction base="xsd:NCName"/>
<!--
    <xsd:restriction base="xsd:string">
      <xsd:pattern value="[\p{L}\-\.][\p{L}\-\.\P{Nd}]*"/>
    </xsd:restriction>
-->
  </xsd:simpleType>      

  <!-- ============================================================= -->
  <!-- The response to deployment requests is the URI to a endpoint
       within the Basic-Services generated component model -->
  <!-- Commentary: we may want to make this a WS-Addressing endpoint -->     
  <!-- ============================================================= -->
  
  <xsd:simpleType name="applicationReferenceType">
      <xsd:annotation>
        <xsd:documentation>
        This is the policy for the naming of applications
        </xsd:documentation>
      </xsd:annotation>  
    <xsd:restriction base="xsd:anyURI"/>
  </xsd:simpleType>

  <!-- ============================================================= -->
  <!-- allows the caller to pass a URL to a deploy descriptor, instead
       of the body itself. This allows signed descriptors inside
       files to be used as a source of data -->
  <!-- ============================================================= -->
  <xsd:simpleType name="remoteDescriptorType">
      <xsd:annotation>
        <xsd:documentation>
        Descriptors can also be URLs. 
        We extend the URI type in case of future needs to add attributes such as
        authentication information.
        </xsd:documentation>
      </xsd:annotation>  
    <xsd:restriction base="xsd:anyURI"/>
  </xsd:simpleType>      

  <!-- ============================================================= -->
  <!-- BEGIN COMPLEXTYPES -->
  <!-- ============================================================= -->
  

  <xsd:simpleType name="addressType">
    <xsd:annotation>
      <xsd:documentation>
      holder for WS-Addressing address
      </xsd:documentation>
    </xsd:annotation>    
    <xsd:restriction base="wsa:EndpointReferenceType"/>
  </xsd:simpleType>
  
  <xsd:complexType name="callbackAddressType">
    <xsd:annotation>
      <xsd:documentation>
      holder for different callback types
      </xsd:documentation>
    </xsd:annotation>    
    <xsd:choice>
      <xsd:element name="uri" type="xsd:anyURI"/>
      <xsd:element name="address" type="api:addressType"/>
      <!-- <xsd:any  processContents="lax" minOccurs="0" maxOccurs="unbounded"/> -->
    </xsd:choice>
  </xsd:complexType>    
  
  <!--
    we could actually explicitly declare both the smartfrog
    and CDL types in here, where smartfrog is a simple
    element containing arbitrary text inside, and with a language
    attribute
  -->  
  <xsd:complexType name="deploymentDescriptorType">
    <xsd:sequence>
      <xsd:any  processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

<!--   
  <xsd:complexType name="cdlDeploymentDescriptorType" type="cdl:cdlDocumentType">
  </xsd:complexType>  
  
 
  <xsd:complexType name="smartFrogDeploymentDescriptorType">
      <xsd:annotation>
      <xsd:documentation>
        SmartFrog deployment Descriptor. 
        Contains the payload as a string, the language version as an attribute
      </xsd:documentation>
    </xsd:annotation>  
      <xsd:element name="smartfrog" type="xsd:string" 
        minOccurs="0" maxOccurs="1"/>
    <xsd:attribute name="version" type="xsd:string" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="deploymentDescriptorType">
    <xsd:choice>
      <xsd:element name="remoteURL" type="api:remoteDescriptorType"/>
      <xsd:element name="smartfrog" type="api:smartFrogDeploymentDescriptorType"/>
      <xsd:element ref="cdl:cdl"/>
      <xsd:any  processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xsd:choice>
  </xsd:complexType>  
-->

  <!-- TODO: incorporate JSDL into the specification -->
  <xsd:complexType name="jsdlType">
    <xsd:annotation>
      <xsd:documentation>
        This is the jsdl content. It should be in the namespace http://www.gridforum.org/JSDL.
        The reason we are not explicitly declaring the JSDL import is to 
        (a) stop the SOAP stack trying to parse it.
        (b) decouple the API from changes in the spec. 
        (c) handle WSDL parsers that are no good at taking in extra schemas
            (like the Mono implementation)
      </xsd:documentation>
    </xsd:annotation>    
    <xsd:sequence>
      <xsd:any  processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>
  
  <xsd:complexType name="statusType">
    <xsd:annotation>
      <xsd:documentation>
        This is the server status response. If the endpoint returns with anything
        then the system is partially alive; a SOAPFault is always a sign of failure
        from the perspective of the far end or the transport. 
        Interpretation of a server status into a proper health metric is left to
        tools of the caller's choice.
      </xsd:documentation>
    </xsd:annotation>  
    <xsd:sequence>
        <!-- namespace="##other" -->
      <xsd:any  processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>
  
  <xsd:complexType name="propertyTupleType">
    <xsd:annotation>
      <xsd:documentation>
        A name/value pair of properties. Names are restricted to NCName type;
        values are any string. Why restrict name type? For easier incorporation
        into the language
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="name" type="xsd:NCName" minOccurs="1" maxOccurs="1"/>
      <xsd:element name="value" type="xsd:string" minOccurs="1" maxOccurs="1"/>
    </xsd:sequence>
  </xsd:complexType>  
  
  <xsd:complexType name="propertyMapType">
    <xsd:annotation>
      <xsd:documentation>
        A set of name/value pair of properties. Only one instance of each name
        is allowed. This is essentially a serialisation of a map/hash table.
      </xsd:documentation>
    </xsd:annotation>  
    <xsd:sequence>
      <xsd:element name="property" type="api:propertyTupleType" 
        minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>  
  
  <xsd:complexType name="applicationNameOrReferenceType">
    <xsd:annotation>
      <xsd:documentation>
      A type that can contain either an application name or a reference.
      Names are only unique to a host, but the combination of (host,name) is
      guaranteed to be unique and valid over multiple deployment.
      References are only valid for a single deployment.
      URL information
      </xsd:documentation>
    </xsd:annotation>  
      <xsd:choice>
        <xsd:element name="name" type="api:applicationNameType"/>
        <xsd:element name="reference" type="api:applicationReferenceType"/>
      </xsd:choice>
  </xsd:complexType>  
  
  
      
  <!-- ============================================================= -->
  <!-- Requests and responses. These are the complex types that
  get sent/received as messages-->
  <!-- ============================================================= -->
    
  <xsd:element name="deployRequest">
    <xsd:complexType>
      <xsd:annotation>
        <xsd:documentation>
          This is our deployment request.
          Rather than have so many typed options, 
          a core few mandatory options are specified inline, and the rest
          are referred to in the deployment_options map.
          TODO: what if a deployment option is not understood by the destination?
          Do we need a mustUnderstand flag?
        </xsd:documentation>
      </xsd:annotation>
     <xsd:sequence>
      <xsd:element name="jsdl" type="api:jsdlType">
        <xsd:annotation>
          <xsd:documentation>
          </xsd:documentation>
        </xsd:annotation>  
      </xsd:element>

      <xsd:element name="application" type="api:applicationNameType"/>
      <xsd:element name="descriptor" type="api:deploymentDescriptorType"/>
      <xsd:element name="callbackType" type="api:callbackEnum"/>
      <xsd:element name="callbackAddress" type="api:callbackAddressType"/>
      <xsd:element name="hostname" type="xsd:string"/>
      <xsd:element name="synchronous" type="xsd:boolean">
        <xsd:annotation>
          <xsd:documentation>
            A flag to indicate whether deployment should be synchronous or not.
            synchronous deployment implies the call does not return until the
            deployment as initiated. The return from the call will then be
            a valid reference to an application.
            
            An asynchronous deployment implies that the deployment has been queued
            for deployment at the next possible opportunity, and that callbacks
            will include information about the status of the deployment. 
            
            There are no guarantees in async deployment as to whether or not
            the deployment descriptor is parsed or validated during the synchronous
            part of the call.
          </xsd:documentation>
        </xsd:annotation>  
      </xsd:element>
      <xsd:element name="deployment_options" type="api:propertyMapType">
        <xsd:annotation>
          <xsd:documentation>
          This is for optional deployment options. 
          </xsd:documentation>
        </xsd:annotation>  
      </xsd:element>
      <xsd:element name="properties" type="api:propertyMapType">
        <xsd:annotation>
          <xsd:documentation>
            This is for properties that are to be passed directly to the 
            deployment engine, using whatever property binding mechanism is
            included in the language. 
          </xsd:documentation>
        </xsd:annotation>  
      </xsd:element>
     </xsd:sequence>
    </xsd:complexType>
   </xsd:element>
   
   <xsd:element name="deployResponse">
    <xsd:complexType>
      <xsd:annotation>
        <xsd:documentation>
        This is our deployment response. 
        It consists of a reference to the application, which can be used
        for future references.
        For an asynchronous deployment, the reference may be nil. This means 
        that a reference cannot be returned until the deployment is complete. 
        </xsd:documentation>
      </xsd:annotation>      
     <xsd:sequence>
      <xsd:element name="applicationReference" type="api:applicationReferenceType"
        nillable="true"/>
     </xsd:sequence>
    </xsd:complexType>
   </xsd:element>
   
   <xsd:element name="undeployRequest" >
    <xsd:complexType>
      <xsd:annotation>
        <xsd:documentation>
          Request to terminate an application. Takes either a name or a reference
        </xsd:documentation>
      </xsd:annotation>
     <xsd:sequence>
      <xsd:element name="application" type="api:applicationNameOrReferenceType"/>      
      <xsd:element name="reason" type="xsd:string"/>
      <xsd:element name="synchronous" type="xsd:boolean"/>
     </xsd:sequence>
    </xsd:complexType>   
   </xsd:element>   

   <xsd:element name="undeployResponse" type="api:statusType" >
   </xsd:element>      
   
   <xsd:element name="listLanguagesRequest">
      <xsd:annotation>
        <xsd:documentation>
        This is an empty message
        </xsd:documentation>
      </xsd:annotation>     
    <xsd:complexType/>
   </xsd:element>
   
   
   <xsd:element name="listLanguagesResponse">
    <xsd:complexType>
      <xsd:annotation>
        <xsd:documentation>
        The list of languages that is supported
        </xsd:documentation>
      </xsd:annotation>      
     <xsd:sequence>
      <xsd:element name="listLanguagesReturn" type="xsd:string"
        maxOccurs="unbounded" minOccurs="1"/>
     </xsd:sequence>
    </xsd:complexType>
   </xsd:element>
   
   <xsd:element name="serverStatusRequest">
      <xsd:annotation>
        <xsd:documentation>
        This is an empty message
        </xsd:documentation>
      </xsd:annotation>     
    <xsd:complexType/>
   </xsd:element>   

   <xsd:element name="serverStatusResponse" type="api:statusType" >
   </xsd:element>   

   <xsd:element name="applicationStatusRequest">
      <xsd:annotation>
        <xsd:documentation>
        Request the status of an individual application
        </xsd:documentation>
      </xsd:annotation>     
    <xsd:complexType>
      <xsd:sequence>
        <xsd:element name="application" type="api:applicationNameOrReferenceType"/>
      </xsd:sequence> 
    </xsd:complexType>
   </xsd:element>   
  
   <xsd:element name="applicationStatusResponse" type="api:statusType" >
   </xsd:element>      

   <xsd:element name="lookupApplicationRequest">
      <xsd:annotation>
        <xsd:documentation>
        Look up an application: pass in the name and get a reference back
        (or an error, if there is no such application or security prevents
         the caller seeing it)
        </xsd:documentation>
      </xsd:annotation>     
    <xsd:complexType>
      <xsd:sequence>
        <xsd:element name="application" type="api:applicationNameOrReferenceType"/>
      </xsd:sequence> 
    </xsd:complexType>
   </xsd:element>   
  
   <xsd:element name="lookupApplicationResponse" type="api:applicationReferenceType" >
   </xsd:element>      
   
   
   
  <!-- ============================================================= -->
  <!-- end schema-->
  <!-- ============================================================= -->

  </xsd:schema>
  
  <!-- ============================================================= -->
  <!-- end WSDL types -->
  <!-- ============================================================= -->
  
 </wsdl:types>

  <!-- ============================================================= -->
  <!-- begin WSDL message types-->
  <!-- ============================================================= -->

 <wsdl:message name="deployRequest">
  <wsdl:part element="api:deployRequest" name="deploy"/>
 </wsdl:message>
 
 <wsdl:message name="deployResponse">
  <wsdl:part element="api:deployResponse" name="response"/>
 </wsdl:message> 

 <wsdl:message name="undeployRequest">
  <wsdl:part element="api:undeployRequest" name="undeploy"/>
 </wsdl:message>
 
 <wsdl:message name="undeployResponse">
  <wsdl:part element="api:undeployResponse" name="response"/>
 </wsdl:message> 
 
 <wsdl:message name="listLanguagesRequest">
  <wsdl:part element="api:listLanguagesRequest" name="request"/>
 </wsdl:message>

 <wsdl:message name="listLanguagesResponse">
  <wsdl:part element="api:listLanguagesResponse" name="languages"/>
 </wsdl:message>
 
 <wsdl:message name="serverStatusRequest">
  <wsdl:part element="api:serverStatusRequest" name="serverStatus"/>
 </wsdl:message>
 
 <wsdl:message name="serverStatusResponse">
  <wsdl:part element="api:serverStatusResponse" name="response"/>
 </wsdl:message> 

 <wsdl:message name="applicationStatusRequest">
  <wsdl:part element="api:applicationStatusRequest" name="applicationStatus"/>
 </wsdl:message>
 
 <wsdl:message name="applicationStatusResponse">
  <wsdl:part element="api:applicationStatusResponse" name="response"/>
 </wsdl:message> 

 <wsdl:message name="lookupApplicationRequest">
  <wsdl:part element="api:lookupApplicationRequest" name="lookupApplication"/>
 </wsdl:message>
 
 <wsdl:message name="lookupApplicationResponse">
  <wsdl:part element="api:lookupApplicationResponse" name="response"/>
 </wsdl:message> 
 
  
 
  <!-- ============================================================= -->
  <!-- begin WSDL operations -->
  <!-- ============================================================= -->

 <wsdl:portType name="DeploymentEndpoint">
 
  <!-- deploy -->
  <wsdl:operation name="deploy">
   <wsdl:input message="api:deployRequest" name="deployRequest"/>
   <wsdl:output message="api:deployResponse" name="deployResponse"/>
  </wsdl:operation>
  
  <!-- list languages -->
  <wsdl:operation name="listLanguages">
   <wsdl:input message="api:listLanguagesRequest" name="listLanguagesRequest"/>
   <wsdl:output message="api:listLanguagesResponse" name="listLanguagesResponse"/>
  </wsdl:operation>
  
  <!-- undeploy -->
  <wsdl:operation name="undeploy">
   <wsdl:input message="api:undeployRequest" name="undeployRequest"/>
   <wsdl:output message="api:undeployResponse" name="undeployResponse"/>
  </wsdl:operation>
  
  <!--  server status -->
  <wsdl:operation name="serverStatus">
   <wsdl:input message="api:serverStatusRequest" name="serverStatusRequest"/>
   <wsdl:output message="api:serverStatusResponse" name="serverStatusResponse"/>
  </wsdl:operation>
  
  <!--  application status -->
  <wsdl:operation name="applicationStatus">
   <wsdl:input message="api:applicationStatusRequest" name="applicationStatusRequest"/>
   <wsdl:output message="api:applicationStatusResponse" name="applicationStatusResponse"/>
  </wsdl:operation>
  
    
  
  <!--  lookup application -->
  <wsdl:operation name="lookupApplication">
   <wsdl:input message="api:lookupApplicationRequest" name="lookupApplicationRequest"/>
   <wsdl:output message="api:lookupApplicationResponse" name="lookupApplicationResponse"/>
  </wsdl:operation>
  
  
 </wsdl:portType>
 
 
  <!-- ============================================================= -->
  <!-- Bind WSDL to doc/lit SOAP1.2 -->
  <!-- ============================================================= -->
 
 <wsdl:binding name="cddlmSoapBinding" type="api:DeploymentEndpoint">
  <wsdlsoap:binding style="document" 
    transport="http://schemas.xmlsoap.org/soap/http"/>
    
    <!-- deploy -->
  <wsdl:operation name="deploy">
    <wsdlsoap:operation soapAction=""/>
    <wsdl:input name="deployRequest">
      <wsdlsoap:body use="literal"/>
    </wsdl:input>
    <wsdl:output name="deployResponse">
      <wsdlsoap:body use="literal"/>
    </wsdl:output>
  </wsdl:operation>
  
  <wsdl:operation name="undeploy">
    <wsdlsoap:operation soapAction=""/>
    <wsdl:input name="undeployRequest">
      <wsdlsoap:body use="literal"/>
    </wsdl:input>
    <wsdl:output name="undeployResponse">
      <wsdlsoap:body use="literal"/>
    </wsdl:output>
  </wsdl:operation>

  <wsdl:operation name="listLanguages">
    <wsdlsoap:operation soapAction=""/>
    <wsdl:input name="listLanguagesRequest">
      <wsdlsoap:body use="literal"/>
    </wsdl:input>
    <wsdl:output name="listLanguagesResponse">
      <wsdlsoap:body use="literal"/>
    </wsdl:output>
  </wsdl:operation>

  <wsdl:operation name="serverStatus">
    <wsdlsoap:operation soapAction=""/>
    <wsdl:input name="serverStatusRequest">
      <wsdlsoap:body use="literal"/>
    </wsdl:input>
    <wsdl:output name="serverStatusResponse">
      <wsdlsoap:body use="literal"/>
    </wsdl:output>
  </wsdl:operation>  


  <wsdl:operation name="applicationStatus">
    <wsdlsoap:operation soapAction=""/>
    <wsdl:input name="applicationStatusRequest">
      <wsdlsoap:body use="literal"/>
    </wsdl:input>
    <wsdl:output name="applicationStatusResponse">
      <wsdlsoap:body use="literal"/>
    </wsdl:output>
  </wsdl:operation>  

  
  <wsdl:operation name="lookupApplication">
    <wsdlsoap:operation soapAction=""/>
    <wsdl:input name="lookupApplicationRequest">
      <wsdlsoap:body use="literal"/>
    </wsdl:input>
    <wsdl:output name="lookupApplicationResponse">
      <wsdlsoap:body use="literal"/>
    </wsdl:output>
  </wsdl:operation>  

 </wsdl:binding>
 
  <!-- ============================================================= -->
  <!-- begin WSDL service declaration -->
  <!-- this is just a sample declaration; the real location of the service -->
  <!-- has to be determined through other means -->
  <!-- ============================================================= -->

 
 <wsdl:service name="CDDLMDeploymentService">
  <wsdl:documentation >
    This is a sample CDDLM deployment service, and is only for testing
  </wsdl:documentation>
  <wsdl:port binding="api:cddlmSoapBinding" name="cddlm">
   <wsdlsoap:address location="http://localhost:5050/axis/services/cddlm"/>
  </wsdl:port>
 </wsdl:service>
 
 
  <!-- ============================================================= -->
  <!-- end WSDL definitions-->
  <!-- ============================================================= -->

</wsdl:definitions>
