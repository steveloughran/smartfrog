/* (C) Copyright 2009 Hewlett-Packard Development Company, LP

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

For more information: www.smartfrog.org

*/

#include "/org/smartfrog/services/amazon/ec2/components.sf"
#include "/org/smartfrog/services/cloudfarmer/server/components.sf"



/**
 * The cluster farmer implements the ClusterFarmer interface, and so lets trusted callers
 * create machines of a specific role.

 Conceptual Model
  - the farmer is deployed, it brings up models in a role. It can be set to delete all deployed nodes when terminated,
    or to leave them running (more robust, but can rack up bills)
  - for every role, define an AMI string, instance type and any user data

Roles are inserted in an undeployed bit of the system, just plain data. That's so we can have some basic image definitions

 */


/**
 * just something that is used to configure the farmer
 */

EC2ClusterRole extends EC2ImageSizes, EC2AvailabilityZones, ClusterRole   {
  sfClass "org.smartfrog.services.cloudfarmer.server.ec2.EC2ClusterRole";
  
  //the string value of the machine image to deploy. This must resolve before an attempt
  //to deploy a machine of the given role can work
  imageID TBD;
  
  //instance types
  instanceType SIZE_SMALL;

  //user data. This is going to change before long
  userData "";
  
  //name of the key to use for SSH from the list of key pairs
  keyName ""; 
  
  // where the image should live
  availabilityZone ZONE_US_EAST_1A;
  
  // a list of string names
  securityGroup [];

}

/**
 * This is our cluster farmer. 
 * Its exact functionality will evolve over time
 */

EC2ClusterFarmer extends AwsAuthorizedService {
  sfClass "org.smartfrog.services.cloudfarmer.server.ec2.EC2ClusterFarmerImpl"

    /**
     * This is there to stop users accidentally running up large bills. If <0, it means ignore
     */
  
  clusterLimit 10;
  
  /**
   * constant to ignore all cluster limits
   */
  NO_CLUSTER_LIMIT -1;
  
  /**
   * Should the farmer recycle old instances given out. 
   * For dev and test yes, but bear in mind that the machine may be in an unknown state. 
   * When recycling, the old image is rebooted and left alone until needed
   */
  recycle true;
  
  /**
    should you delete instances when terminating?
    For HA systems the answer MUST BE no, leave them up, somehow the next instance will rebind. 
    For test and dev systems, that can run up a large bill
    */
  deleteInstancesOnTermination true;
  
  /**
    roles go under here. Each one should have all the attributes of an EC2ClusterRole, so that you can
    create a cluster instance from the
   */
  roles extends Compound {

  }

  
  /**
   * Deployments fail unless you set up a proper configuration service
   */
  deploymentFactory extends NodeDeploymentUnsupportedFactory {
  
  }
}