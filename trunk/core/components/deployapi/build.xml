<?xml version="1.0"?>
<project name="deployapi" default="default"
  xmlns:ac="antlib:net.sf.antcontrib"
  xmlns:sf="antlib:org.smartfrog.tools.ant"
  xmlns:m2="antlib:org.apache.maven.artifact.ant"
  xmlns:core="http://smartfrog.org/build/core"
  >

  <!--
  /** (C) Copyright 2005 Hewlett-Packard Development Company, LP

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

  For more information: www.smartfrog.org

  */
  -->

  <description>
     Build file for deployment API
  </description>

  
  <!-- override point -->
  <property file="build.properties"/>
  <property name="javac.java.version" value="1.5"/>

  <property name="root.dir" location="../.."/>
  <property name="antbuild.dir" location="${root.dir}/antbuild"/>
  <property name="xml.dir" location="${antbuild.dir}/xml"/>
  
  
  <!-- Import common stuff -->
  <import file="${xml.dir}/core.xml"/>
  <import file="${xml.dir}/sftasks.xml"/>
  <import file="${xml.dir}/m2.xml"/>
  <import file="${xml.dir}/dist.xml"/>
  <import file="${xml.dir}/unittest.xml"/>

  <!-- ========================================================== -->
  <!-- ========================================================== -->
  <target name="init" depends="core.init-standard-output-dirs,sftasks.smartfrog-tasks,core.core-tasks,core.artifact-names">
    <property name="war.dir" location="war" />
    <property name="webinf.dir" location="${war.dir}/WEB-INF" />
    <property name="services.dir" location="${webinf.dir}/services" />
    <property name="build.axis2.dir" location="${build.dir}/axis2" />
    <property name="build.axis2.src.dir" location="${build.axis2.dir}/src" />
    <property name="target.war.name"  
      value="${artifact.name}-war-${artifact.version}.war" />
    <property name="target.war"  
      location="${dist.dir}/${target.war.name}" />
    
  </target>
  
  <target name="declare-compile.classpath" 
    depends="core-libraries,axis2-libraries,smartfrog-modules-classpath,smartfrog-core-classpath,jetty-classpath">
    <path id="compile.classpath">
      <path refid="core.classpath"/>
      <path refid="smartfrog.core.classpath"/>
      <path refid="smartfrog.modules.classpath"/>
      <path refid="axis2.classpath"/>
    </path>
    <property name="compile.classpath.value" refid="compile.classpath"/>
    <echo level="verbose">compile.classpath=${compile.classpath.value}</echo>    
  </target>

    <target name="core-libraries" depends="m2.m2-tasks">
    <m2:libraries pathID="core.classpath">
      <dependency groupID="org.ggf"
        artifactID="cddlm"
        version="${cddlm.version}"/>
      <dependency groupID="commons-lang"
        artifactID="commons-lang"
        version="${commons-lang.version}"/>
      <dependency groupID="commons-logging"
        artifactID="commons-logging-api"
        version="${commons-logging.version}"/>
      <dependency groupID="log4j"
        artifactID="log4j"
        version="${log4j.version}"/>
      <dependency groupID="junit"
        artifactID="junit"
        version="${junit.version}"/>
      <dependency groupID="xom"
        artifactID="xom"
        version="${xom.version}"/>
      <dependency groupID="xalan"
        artifactID="xalan"
        version="${xalan.version}"/>
    </m2:libraries>
  </target>
  
  <target name="smartfrog-core-classpath" 
    depends="core.load-version-info,m2.m2-tasks">
    <m2:libraries pathID="smartfrog.core.classpath">
      <dependency groupID="org.smartfrog"
        artifactID="smartfrog"
        version="${smartfrog.version}"
        scope="compile"
        />  
      <dependency groupID="org.smartfrog"
        artifactID="sfServices"
        version="${smartfrog.version}"
        scope="compile"
        /> 
    </m2:libraries>
  </target>
  
  <target name="smartfrog-modules-classpath" 
    depends="core.load-version-info,m2.m2-tasks">
    <m2:libraries pathID="smartfrog.modules.classpath">
      <dependency groupID="org.smartfrog"
        artifactID="sf-xml"
        version="${smartfrog.version}"/>
      <dependency groupID="org.smartfrog"
        artifactID="sf-www"
        version="${smartfrog.version}"/>        
      <dependency groupID="org.smartfrog"
        artifactID="sf-jetty"
        version="${smartfrog.version}"/>        
    </m2:libraries>
  </target>

  <!-- jetty classes -->
  <target name="jetty-classpath" 
    depends="core.load-version-info,m2.m2-tasks">
    <m2:libraries  pathID="jetty.classpath">
      <dependency groupID="jetty"
        artifactID="jetty"
        version="${jetty.version}"/>
      <dependency groupID="jetty"
        artifactID="jasper-compiler"
        version="${jetty.version}"/>
      <dependency groupID="jetty"
        artifactID="jasper-runtime"
        version="${jetty.version}"/>
      <dependency groupID="servletapi"
        artifactID="servletapi"
        version="${servletapi.version}"/>
    </m2:libraries >
  </target>
  
    


  <target name="axis2-libraries" depends="m2.m2-tasks">
    <m2:libraries  pathID="axis2.classpath">
      <dependency groupID="log4j"
        artifactID="log4j"
        version="${log4j.version}"/>    
      <dependency groupID="junit"
        artifactID="junit"
        version="${junit.version}"/>
      <dependency groupID="axis"
        artifactID="axis-wsdl4j"
        version="${axis-wsdl4j.version}"/>
      <dependency groupID="commons-codec"
        artifactID="commons-codec"
        version="${commons-codec.version}"/>
      <dependency groupID="commons-httpclient"
        artifactID="commons-httpclient"
        version="${commons-httpclient.version}"/>
      <dependency groupID="commons-logging"
        artifactID="commons-logging"
        version="${commons-logging.version}"/>
      <dependency groupID="javax.activation"
        artifactID="activation"
        version="${activation.version}"/>
        
<!--      <dependency groupID="geronimo-spec"
        artifactID="geronimo-spec-javamail"
        version="${geronimo-spec-javamail.version}"/> -->
<!--       <dependency groupID="geronimo-spec"
        artifactID="geronimo-spec-activation"
        version="${geronimo-spec-activation.version}"/>
 -->
 <dependency groupID="stax"
        artifactID="stax"
        version="${stax.version}"/>
      <dependency groupID="stax"
        artifactID="stax-api"
        version="${stax-api.version}"/>
      <dependency groupID="jaxen"
        artifactID="jaxen"
        version="${jaxen.version}"/>
      <dependency groupID="commons-fileupload"
        artifactID="commons-fileupload"
        version="${commons-fileupload.version}"/>
     <dependency groupID="axis2"
        artifactID="axis2"
        version="${axis2.version}"/>
      <dependency groupID="xmlbeans"
        artifactID="xbean"
        version="${xmlbeans.version}"/>
      <dependency groupID="xmlbeans"
        artifactID="xbean_xpath"
        version="${xmlbeans.version}"/>
      <dependency groupID="xmlbeans"
        artifactID="xbean_xpath"
        version="${xmlbeans.version}"/>
      <dependency groupID="xmlbeans"
        artifactID="xmlpublic"
        version="${xmlbeans.version}"/>        
      <dependency groupID="saxon"
        artifactID="saxon"
        version="${saxon.version}"/>        
    </m2:libraries >
    </target>

      

<!--       <dependency groupID="axis2"
        artifactID="axis2-common"
        version="${axis2.version}"/>
      <dependency groupID="axis2"
        artifactID="axis2-core"
        version="${axis2.version}"/>
      <dependency groupID="axis2"
        artifactID="axis2-xml"
        version="${axis2.version}"/>
      <dependency groupID="axis2"
        artifactID="axis2-addressing"
        version="${axis2.version}"/>
      <dependency groupID="axis2"
        artifactID="axis2-wsdl"
        version="${axis2.version}"/>
 -->        

       
  
  <target name="declare-exec.classpath" depends="declare-compile.classpath" >  
    <path id="exec.classpath">
      <pathelement location="${target.jar}"/>
      <path refid="compile.classpath"/>
    </path>    
    <property name="exec.classpath.value" refid="exec.classpath"/>
    <echo level="verbose">exec.classpath=${exec.classpath.value}</echo>
  </target>

  <!-- declares the testharness and junit path -->
  
  <target name="test-libraries" depends="m2.m2-tasks">
    <m2-libraries pathID="test-libraries.classpath">

      <dependency groupID="org.smartfrog"
        artifactID="sf-jetty"
        version="${smartfrog.version}"/>
      <dependency groupID="org.smartfrog"
        artifactID="sf-junit"
        version="${smartfrog.version}"/>
      <dependency groupID="org.smartfrog"
        artifactID="sf-testharness"
        version="${smartfrog.version}"/>
      <dependency groupID="junit"
        artifactID="junit"
        version="${junit.version}"/>
    </m2-libraries>
  </target>
  



  <!-- ========================================================== -->
  <!-- this is an override point -->
  <!-- it does nothing but declare all the dependencies for compilation -->
  <!-- anything that overrides compile can declare a dependency on this -->
  <!-- target to get its dependencies right -->
  <!-- ========================================================== -->
  <target name="pre-compile"
      depends="init,declare-classpaths,core.core-tasks">
  </target>

  
  <target name="archives" depends="init"
    description="create the .aar files">
  
    <property name="build.archives.dir" location="${build.dir}/archives" />
    <mkdir dir="${build.archives.dir}" /> 
    <property name="portal.aar" location="${build.archives.dir}/portal.aar" />
    <property name="system.aar" location="${build.archives.dir}/system.aar" />
    <property name="archives.dir" location="archives" />
    <jar destFile="${portal.aar}">
      <fileset dir="${archives.dir}/portal" includes="**/*" />
    </jar>
    <jar destFile="${system.aar}">
      <fileset dir="${archives.dir}/system" includes="**/*" />
    </jar>
  </target>  

  <target name="copy-archives" depends="archives">
    <copy todir="${services.dir}">
      <fileset dir="${build.archives.dir}" includes="*.aar" /> 
    </copy>
  </target>
  

  <target name="default" depends="war" />
    
  
  <target name="specifications" depends="init" >
  
    <fail unless="deployment.project.dir" >
     Need to specify the location of the sourceforge deploy project
     deployment.project.dir
    </fail>
    <property name="deployment.xml.dir"
      location="${deployment.project.dir}/xml"/>
    <property name="cddlm.dir"
      location="${deployment.xml.dir}/api"/>
    <property name="cdl.dir"
      location="${deployment.xml.dir}/cdl"/>
    <property name="constants.xml.dir"
      location="${cddlm.dir}"/>
    <property name="wsrf.dir"
      location="${deployment.xml.dir}/wsrf"/>
    <property name="soap.dir"
      location="${deployment.xml.dir}/wsrf"/>
      
    <!--XML Schemas -->
    <property name="xml-cdl.xsd"
      location="${cddlm.dir}/xml-cdl.xsd"/>

    <property name="component-model.xsd"
      location="${cddlm.dir}/component-model.xsd"/>
    <property name="component-model-events.xml"
      location="${cddlm.dir}/component-model-events.xml"/>

    <property name="deployment-api.xsd"
      location="${cddlm.dir}/deployment-api.xsd"/>

    <!-- ws-topics -->
    <property name="deployment-api-portal-events.xml"
      location="${cddlm.dir}/deployment-api-portal-events.xml"/>
    <property name="deployment-api-system-events.xml"
      location="${cddlm.dir}/deployment-api-system-events.xml"/>


    <!-- WSDL -->
    <property name="deployment-api.wsdl"
      location="${cddlm.dir}/deployment-api.wsdl"/>

    <!-- generic XML -->
    <property name="constants.xml"
      location="${constants.xml.dir}/constants.xml"/>
    <property name="transform.xsl"
      location="${transforms.dir}/createJavaConstants.xsl"/>

    <!-- incoming specs -->
    <property name="soap12.xsd"
      location="${soap.dir}/soap12.xsd"/>
    <property name="ws-addressing.xsd"
      location="${soap.dir}/ws-addressing.xsd"/>
    <property name="wsrf-rp.xsd"
      location="${wsrf.dir}/wsrf-WS-ResourceProperties-1.2-draft-01.xsd"/>
    <property name="wsrf-rp.wsdl"
      location="${wsrf.dir}/wsrf-WS-ResourceProperties-1.2-draft-01.wsdl"/>
    <property name="wsrf-rl.xsd"
      location="${wsrf.dir}/wsrf-WS-ResourceLifetime-1.2-draft-01.xsd"/>
    <property name="wsrf-rl.wsdl"
      location="${wsrf.dir}/wsrf-WS-ResourceLifetime-1.2-draft-01.wsdl"/>

    <property name="wsrf-n.xsd"
      location="${wsrf.dir}/wsn-WS-BaseNotification-1.2-draft-01.xsd"/>
    <property name="wsrf-n.wsdl"
      location="${wsrf.dir}/wsn-WS-BaseNotification-1.2-draft-01.wsdl"/>
    <property name="wsrf-bf.xsd"
      location="${wsrf.dir}/wsrf-WS-BaseFaults-1.2-draft-01.xsd"/>
    <property name="wstop.xsd"
      location="${wsrf.dir}/wsn-WS-Topics-1.2-draft-01.xsd"/>

    <property name="muws-p1.xsd"
      location="${wsrf.dir}/wsdm-muws-part1.xsd"/>
    <property name="muws-p2.xsd"
      location="${wsrf.dir}/wsdm-muws-part2.xsd"/>
    <property name="wsdm-mows.xsd"
      location="${wsrf.dir}/wsdm-mows.xsd"/>

    <property name="test-helper.xsd"
      location="${cddlm.dir}/test-helper.xsd"/>
    <property name="smartfrog.xsd"
      location="${cddlm.dir}/smartfrog.xsd"/>
    <property name="system-binding.wsdl"
      location="${cddlm.dir}/system-binding.wsdl"/>      
  </target>
   
  <target name="axis2-tasks" depends="axis2-libraries" >
    <taskdef name="codegen"
        uri="http://ws.apache.org/axis2"
        onerror="failall"
        classname="org.apache.axis2.tool.ant.AntCodegenTask"
        classpath="axis2.classpath"/>
  </target>
  
  
  <target name="wsdl2java" depends="init,declare-classpaths,specifications" >
    <mkdir dir="${build.axis2.src.dir}"  />

    <core:java
      classname="org.apache.axis2.wsdl.WSDL2Java"
      classpathref="compile.classpath">
        <arg value="-o" />
        <arg file="${build.axis2.src.dir}" />
        <arg value="-p" />
        <arg value="org.ggf.cddlm.generated.axis2" />
        <arg value="-l" />
        <arg value="java" />
<!--         <arg value="-a" /> -->
<!--         <arg value="-t" /> -->
<!--         <arg value="-ss" /> -->
<!--         <arg value="-sd" /> -->
       <arg value="-uri" />
      <!--  <arg file="test/files/deployapi.wsdl" /> -->
             <!-- <arg file="${system-binding.wsdl}" />  -->
       <arg file="${deployment-api.wsdl}" /> 
    </core:java>
  </target>
  
  <target name="prepare-libraries" depends="declare-classpaths" >
    <property name="build.temp.lib.dir" location="${build.dir}/temp/lib" />
    <mkdir dir="${build.temp.lib.dir}" />
    <copypath destDir="${build.temp.lib.dir}" pathref="axis2.classpath">
      <flattenmapper/>
    </copypath>
    <copypath destDir="${build.temp.lib.dir}" pathref="core.classpath">
      <flattenmapper/>
    </copypath>
  </target>
  
  <!-- here to verify that all the downloaded jars are valid
    because javac was bailing out with some error about unzipping -->
  <target name="validate-libraries" depends="prepare-libraries" >
    <property name="build.temp.unzip.dir" location="${build.temp.lib.dir}/unzip" />
    <mkdir dir="${build.temp.unzip.dir}" />
        <copypath destDir="${build.temp.lib.dir}" pathref="compile.classpath">
      <flattenmapper/>
    </copypath>
    <copypath destDir="${build.temp.lib.dir}" pathref="tests.compile.classpath">
      <flattenmapper/>
    </copypath>

    <ac:for param="name">
       <path> 
        <fileset dir="${build.temp.lib.dir}" includes="*.jar" />
       </path>
       <sequential>
        <echo>@{name}</echo>
        <exec executable="jar" dir="${build.temp.unzip.dir}" failonerror="true">
          <arg value="-xf"/>
          <arg value="@{name}"/>
        </exec>
        <!-- <unzip src="@{name}" dest="${build.temp.unzip.dir}"/> -->
       </sequential>
      </ac:for>
  </target>
  
  <!--
    add extra actions after compilation, before making the JAR
  -->
   <target name="post-compile" depends="dist.post-compile,prepare-libraries" />
  
  <!-- make the WAR file -->
  <target name="war" depends="post-compile,copy-archives" >
    <property name="target.war.name"  
      value="${artifact.name}-war-${artifact.version}.war" />
    <property name="target.war"  
      location="${dist.dir}/${target.war.name}" />

      
    <jar destFile="${target.war}" 
      compress="false" 
      duplicate="fail">
      <!--  WAR file, includes WEB-INF stuff-->
      <fileset dir="${war.dir}" includes="**/*" />
      <zipfileset prefix="WEB-INF/lib" dir="${build.temp.lib.dir}" 
        includes="*.jar" />
      <zipfileset prefix="WEB-INF/lib" file="${target.jar}" /> 
      
    </jar>
  </target>

  
    


  <!-- ========================================================== -->
  <!-- set up any properties for deployment -->
  <!-- ========================================================== -->
  
  <target name="init-deploy-properties" depends="init">
    <property name="deploy.host" value="localhost"/>
    <property name="application.name" value="${project.name}"/>
    <property name="deploy.sf" value="files/deployserver.sf" />
    <property name="deployapi.war.dir" value="${war.dir}" />
    <property name="parse.quiet" value="true"/>
  </target>


  <!-- we copy the files so as to
    -eliminate duplicates and the complications that causes on a secure system
    -put everything in one place for when we need to sign it
    -see at a glance what is in there
    -->
  <target name="prepare-codebase" depends="declare-classpaths" >
    <property name="build.codebase.dir" location="${build.dir}/codebase" />
    <mkdir dir="${build.codebase.dir}" />
    <copypath destDir="${build.codebase.dir}" pathref="axis2.classpath">
      <flattenmapper/>
    </copypath>
    <copypath destDir="${build.codebase.dir}" pathref="core.classpath">
      <flattenmapper/>
    </copypath>
    <copypath destDir="${build.codebase.dir}" pathref="jetty.classpath">
      <flattenmapper/>
    </copypath>
    <copypath destDir="${build.codebase.dir}" pathref="smartfrog.modules.classpath">
      <flattenmapper/>
    </copypath>
  </target>
  
  <!-- ========================================================== -->
  <!-- set-->
  <!-- ========================================================== -->
  
  <target name="init-codebase" depends="init-deploy-properties,prepare-codebase"
    description="deploy">
    <sf:tourl property="codebase">
      <fileset file="${target.jar}"/>
      <fileset file="${test.jar}"/>
      <fileset dir="${build.codebase.dir}" includes="*.jar" />
    </sf:tourl>
    <echo level="verbose">
        deploying to ${deploy.host}
        codebase=${codebase}</echo>
  </target>
   
  <!-- ========================================================== -->
  <!-- parse the file -->
  <!-- ========================================================== -->
  <target name="parse" depends="package-tests,war,init-codebase"
    description="parse the deployment descriptor">
    <property name="warfile.timestamp"
      location="${build.dir}/warfile.timestamp"/>
    <ac:if>
      <or>
        <isset property="parse.needed" />
        <not>
          <uptodate 
            srcfile="${target.war}" 
            targetfile="${warfile.timestamp}"/>
        </not>
      </or>
      <ac:then>
        <sf:parse quiet="${parse.quiet}">
          <classpath path="${target.jar}:${test.jar}"/>
          <sysproperty key="deployapi.war.dir"
            value="${deployapi.war.dir}"/>      
          <sysproperty key="org.smartfrog.codebase"
            value="${codebase}"/>
          <!-- source files -->
          <source file="${test.src.dir}/${deploy.sf}" />
        </sf:parse>
        <!-- on success, we touch a property file to note we got it out -->
        <touch file="${warfile.timestamp}" />
      </ac:then>
    </ac:if>
  </target>
  
  

  <!-- ========================================================== -->
  <!-- deploy; requires a host -->
  <!-- ========================================================== -->
  <target name="deploy" depends="parse,init-codebase,init-deploy-properties,war"
    description="deploy">

    <sf:deploy classpathref="run.classpath"
      logStackTraces="true"
      host="${deploy.host}"
      timeout="30000"
      >
      <codebase url="${codebase}"/>
      <sysproperty key="deployapi.war.dir"
        value="${deployapi.war.dir}"/>
      <application name="${application.name}">
              #include "/${deploy.sf}"
              sfCodeBase PROPERTY org.smartfrog.codebase;
              sfConfig extends Application {
                sfProcessName "deployapi-subprocess";
              }
              _sfConfig extends Compound {
                sfProcessName "deployapi-subprocess";
              }
      </application>
    </sf:deploy>
  </target>

  <target name="undeploy" depends="init-deploy-properties"
    description="deploy">

    <sf:undeploy classpathref="run.classpath"
      logStackTraces="true"
      host="${deploy.host}"
      timeout="30000"
      application="${application.name}"/>
  </target>
    
  
  
  
</project>