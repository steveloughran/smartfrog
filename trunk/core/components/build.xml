<?xml version="1.0"?>
<project name="components" default="default" basedir=".">

<!--
/** (C) Copyright 1998-2004 Hewlett-Packard Development Company, LP

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

For more information: www.smartfrog.org

*/
-->


<description>
     Build file for components.
     Each component supported must have the following targets in 
     its build.xml
      maybe-dist        distribute if prereqs are met
      maybe-test        test if prereqs are met
      maybe-install     conditional install
      clean             clean up the output dirs
      m2-install        install into the local maven2 repository
      
    The easiest way to do this is import root.dir/common.xml 
    as a common build file; it provides template operations for this process.  
     
</description>
 <!-- ========================================================== -->
 <!--
    Implementation notes
    
    This build file is cutting-edge Ant1.6 scalability at work. It is 
    not going to run on older versions, and the documentation for what
    is in use is still sparse. 
    Best docs so far: http://otn.oracle.com/pub/articles/bodewig_ant1.6.html
    
    <subant> is a new task that delegates the same task to any build files
    listed in files and directores. We set up a path for this task,
    which is ordered such that projects other components depend on 
    must build first. Then we create a preset wrapper for the process,
    called <delegate>.
    
    It is inevitable that not all projects will have their dependent
    libraries in place on all machines. So each component build file must
    have conditional targets that only do a dist or test if they are 
    present.
    
    This has one adverse consequence: if something needs a predecessor, and
    the predecessor wont build, the build file does not automatically stop.
    Every build file must therefore consider the problem of the dependent
    components being missing.
    
  -->
 <!-- ========================================================== -->
   <!-- override point -->
  <property file="build.properties" />

  <property name="root.dir" location=".."  />

  <!-- Import common stuff -->
  <import file="${root.dir}/common.xml"/>

  <property name="is.component" value="true"  />

  <!-- ========================================================== -->
  <!-- initialisation -->
  <!-- ========================================================== -->
  <target name="init" >
    <!-- add new components here, in alphabetical order. this is
      not where dependency logic is imposed -->
    <property name="arithmetic-testharness.project" location="arithmetic-testharness" />
    <property name="cddlm.project" location="cddlm" />
    <property name="emailer.project" location="emailer" />
    <property name="jetty.project" location="jetty" />
    <property name="junit.project" location="junit" />
    <!--property name="logger.project" location="logger" /-->
    <property name="net.project" location="net" />
    <property name="scripting.project" location="scripting" />
    <property name="sfcoreloggers.project" location="sfcoreloggers" />
    <property name="ssh.project" location="ssh" />
    <property name="slp.project" location="slp" />
    <property name="utils.project" location="utils" />
    <property name="releasetest.project" location="releasetest" />
        
    <!--where the files for release will go-->
    <property name="bin" value="bin"/>
    <property name="lib" value="lib"/>
    <property name="docs" value="docs"/>
    <property name="src" value="src"/>
    <property name="jdocs" value="jdocs"/>
    <property name="build" value="build"/>      
    <property name="comp.dist.dir" value="dist"/>         <!-- where the files to zip go -->
    <property name="comp.dist.bin.dir" value="${comp.dist.dir}/${bin}"/>
    <property name="comp.dist.lib.dir" value="${comp.dist.dir}/${lib}"/>
    <property name="comp.dist.src.dir" value="${comp.dist.dir}/${src}"/>
    <property name="comp.dist.docs.dir" value="${comp.dist.dir}/${docs}"/>
    <property name="comp.dist.jdocs.dir" value="${comp.dist.docs.dir}/${jdocs}"/>

    <property name="componentsFiles" value="org/smartfrog/services/**/*"/>
    
    <!-- this is where dependency logic is imposed
         the path must be ordered such that dependent projects
         come in the path after the things they depend on
    -->
    
    <path id="component.path">
      <pathelement location="${utils.project}"/>
      <!--pathelement location="${logger.project}"/-->
      <pathelement location="${ssh.project}"/>
      <pathelement location="${net.project}"/>
      <pathelement location="${emailer.project}"/>
       <pathelement location="${jetty.project}"/>
      <pathelement location="${slp.project}"/>
      <pathelement location="${scripting.project}"/>
      <pathelement location="${sfcoreloggers.project}"/>
    <!--pathelement location="${arithmetic-testharness.project}"/-->
      <!--pathelement location="${junit.project}"/-->
      <!--pathelement location="${cddlm.project}"/-->
      <!--pathelement location="${releasetest.project}"/-->
    </path>
    <property name="component.path.asproperty"
      refid="component.path"/>
    <echo level="verbose">component.path :=   ${component.path.asproperty}    </echo>
    
  <presetdef name="delegate">
      <subant buildpathref="component.path"
        antfile="build.xml"
        inheritall ="false" inheritrefs="false"/>
    </presetdef>
  
  <presetdef name="delegateBuild">
      <subant buildpathref="component.path"
        antfile="buildRelease.xml"
        inheritall ="false" inheritrefs="false"/>
    </presetdef>

  </target>
  

  <target name="clean" depends="init, clean-dist"
    description="clean all projects">
    <delegate target="clean"/>
  <delete dir="src"/> <!-- Forrest releated -->
  <delete dir="build"/>  <!-- Forrest releated -->
  <delete file="forrest.properties"/>
  <delete file="status.xml"/>


  </target>
  
  <target name="test" depends="init"
    description=" all projects">
    <delegate target="maybe-test"/>
  </target>

  <target name="dist" depends="init"
    description="build distributions of all projects">
    <delegate target="maybe-dist"/>
  </target>
  
  <target name="install" depends="init"
    description="install all projects">
    <delegate target="maybe-install"/>
  </target> 
  
  <target name="m2-install" depends="init"
    description="install all projects">
    <delegate target="maybe-install"/>
  </target>
  
  <target name="diagnostics" depends="init"
    description="diagnostics">
    <delegate target="diagnostics"/>
  </target>  
  
  <target name="diag2" depends="init"
    description="diagnostics">
    <delegate target="diag2"/>
  </target>


  <target name="buildrelease" depends ="init" description="buildRelease fopr all components" >
    <delegateBuild target="maybe-buildrelease"/>
  </target>


 

  <!-- =================================================================== -->
  <!-- clean jdocs                                                               -->
  <!-- =================================================================== -->
  <target name="clean-dist" description="Cleans the dist and build directories">
    <delete dir="${comp.dist.dir}"/>
    <delete dir="${build.dir}"/>
  </target>
  
   <!-- =================================================================== -->
  <!-- Initialization target                                               -->
  <!-- =================================================================== -->
  <target name="initjdocs">
    <tstamp/>
    <property name="Name.System" value="SmartFrog"/>
    <property name="Name.Company" value="(C) Copyright 1998-2004 Hewlett-Packard Development Company, LP"/>
    <property name="version" value="COMPONENTS"/>
    <property name="Version" value="1.00.000_beta"/>
    <property name="year" value="2004"/>
    <property name="javac.java.version" value="1.4" />
    <echo level="verbose"/>
  </target>

  <!-- =================================================================== -->
  <!--   JDocs                                                             -->
  <!-- =================================================================== -->
  <target name="jdocs" depends="init, initjdocs" description="Generates the API documentation">
    <!--  Java Docs for all                                                -->
    <echo message=""/>
    <echo message="------------------------------------------------------------------------"/>
    <echo message="  Creating Java Docs for ${Name.System} ${version} [${dist.jdocs.dir}]"/>
    <echo message="------------------------------------------------------------------------"/>
    <javadoc packagenames="org.*"
             destdir="${comp.dist.jdocs.dir}"
             author="true"
             version="true"
             use="true"
             windowtitle="${Name.System}"
             Header="${Name.System} ${Version}"
             Footer="${Name.System} ${version} ${Version}"
             doctitle="${Name.System}"
             bottom="${Name.Company}"
             source="${javac.java.version}"
       >
     <sourcepath> 
       <!--pathelement path="${cddlm.project}/${src}"/-->
       <pathelement path="${emailer.project}/${src}"/>
       <pathelement path="${jetty.project}/${src}"/>
       <!--pathelement path="${logger.project}/${src}"/-->
       <pathelement path="${net.project}/${src}"/>
       <pathelement path="${scripting.project}/${src}"/>
       <pathelement path="${sfcoreloggers.project}/${src}"/>
       <pathelement path="${slp.project}/${src}"/>
       <pathelement path="${ssh.project}/${src}"/>
       <pathelement path="${utils.project}/${src}"/>
      </sourcepath>     
      <group title="SmartFrog Component Packages" packages="org.smartfrog.*"/>
    </javadoc>

    
  </target>

  <!-- =================================================================== -->
  <!-- Initialization target                                               -->
  <!-- =================================================================== -->
  <target name="initdist" depends="init">
      <mkdir dir="${comp.dist.dir}"/>
      <mkdir dir="${comp.dist.bin.dir}"/>
      <mkdir dir="${comp.dist.lib.dir}"/>
      <mkdir dir="${comp.dist.docs.dir}"/>
      <mkdir dir="${comp.dist.jdocs.dir}"/>
      <mkdir dir="${comp.dist.src.dir}"/>
  </target>

  <!-- =================================================================== -->
  <!--                                                                     -->
  <!-- =================================================================== -->
  <target name="copybuild" depends="init">
  
    <macrodef name="copybuild" >
      <attribute name="project" description="component to copy"/>
      <attribute name="builddir" default="${build}" />
      <attribute name="includes" default="**/*" />
      
      <sequential>
        <copy todir="${build.dir}">
          <fileset dir="@{project}/@{builddir}" includes="@{includes}" />
        </copy>
      </sequential>
    </macrodef>

    <copybuild project="${emailer.project}" />
    <copybuild project="${jetty.project}" />
    <!--copybuild project="${logger.project}" /-->
    <copybuild project="${net.project}" />
    <copybuild project="${scripting.project}" />
    <copybuild project="${sfcoreloggers.project}" />
    <copybuild project="${slp.project}"  />
    <copybuild project="${ssh.project}" />
    <copybuild project="${utils.project}" />

  </target>
    
  <!-- =================================================================== -->
  <!--                                                                     -->
  <!-- =================================================================== -->
  <target name="copybins" depends="init-common,initdist,dist">
  
    <macrodef name="copybins" >
      <attribute name="project" description="component to copy"/>
      <attribute name="bindir" default="${dist.bin.dir}" />
      <attribute name="includes" default="**/*" />
      
      <sequential>
        <copy todir="${comp.dist.bin.dir}">
          <fileset dir="@{project}/@{bindir}" includes="@{includes}" />
        </copy>
      </sequential>
    </macrodef>

    <copybins project="${emailer.project}" />
    <copybins project="${jetty.project}" />
    <!--copybins project="${logger.project}" /!-->
    <copybins project="${net.project}" />
    <copybins project="${scripting.project}" />
    <copybins project="${sfcoreloggers.project}"/>
    <copybins project="${slp.project}"  />
    <copybins project="${ssh.project}" />
    <copybins project="${utils.project}" />

  </target>
  
  <!-- =================================================================== -->
  <!--                                                                     -->
  <!-- =================================================================== -->
  <target name="copylibs" depends="init-common,initdist,dist">
  
    <macrodef name="copylibs" >
      <attribute name="project" description="component to copy"/>
      <attribute name="libdir" default="${dist.lib.dir}" />
      <attribute name="includes" default="**/*" />
      
      <sequential>
        <copy todir="${comp.dist.lib.dir}">
          <fileset dir="@{project}/@{libdir}" includes="@{includes}" />
        </copy>
      </sequential>
    </macrodef>

    <copylibs project="${emailer.project}" />
    <copylibs project="${jetty.project}" />
    <!--copylibs project="${logger.project}" /-->
    <copylibs project="${net.project}" />
    <copylibs project="${scripting.project}" />
    <copylibs project="${sfcoreloggers.project}" />
    <copylibs project="${slp.project}"  />
    <copylibs project="${ssh.project}" />
    <copylibs project="${utils.project}" />

  </target>

  <!-- =================================================================== -->
  <!--                                                                     -->
  <!-- =================================================================== -->
  <target name="copycomponents" depends="init-common,initdist">
  
    <macrodef name="copycomponents" >
      <attribute name="project" description="component to copy"/>
      <attribute name="srcdir" default="${dist.src.dir}" />
      <attribute name="includes" default="**/*" />
      <sequential>
        <copy todir="${comp.dist.src.dir}">
          <fileset dir="@{project}/@{srcdir}" >
            <include name="@{includes}" />
            <exclude name="**/*.dfPackage"/>
          </fileset>
        </copy>
      </sequential>
    </macrodef>

    <copycomponents project="${emailer.project}" />
    <copycomponents project="${jetty.project}" />
    <!--copycomponents project="${logger.project}" /-->
    <copycomponents project="${net.project}"  />
    <copycomponents project="${scripting.project}" />
    <copycomponents project="${sfcoreloggers.project}" />
    <copycomponents project="${net.project}"  />
    <copycomponents project="${slp.project}"  />
    <copycomponents project="${ssh.project}" />
    <copycomponents project="${utils.project}" />
  </target>

  <!-- =================================================================== -->
  <!--                                                                     -->
  <!-- =================================================================== -->
  <target name="copydocs" depends="init-common,initdist,dist">
  
    <macrodef name="copydocs" >
      <attribute name="project" description="component to copy"/>
      <attribute name="docdir" default="${dist.doc.dir}" />
      <attribute name="includes" default="**/*" />
      
      <sequential>
        <copy todir="${comp.dist.docs.dir}">
          <fileset dir="@{project}/@{docdir}" includes="@{includes}" />
        </copy>
      </sequential>
    </macrodef>

    <copydocs project="${emailer.project}" />
    <copydocs project="${jetty.project}" />
    <!--copydocs project="${logger.project}" /-->
    <copydocs project="${net.project}" />
    <copydocs project="${scripting.project}" />
    <copydocs project="${sfcoreloggers.project}" />
    <copydocs project="${slp.project}" />
    <copydocs project="${ssh.project}" />
    <copydocs project="${utils.project}" />
  </target>

  <!-- =================================================================== -->
  <!-- src.zip                                                             -->
  <!-- =================================================================== -->
  <target name="srczip" depends="initdist"  description="Creates src.zip with Components sources">
  
    <zip destfile="${comp.dist.dir}/src.zip" >
      <!--zipfileset dir="${cddlm.project}/${src}">
        <include name="**/**"/>
        <exclude name="**/*.dfPackage"/>
      </zipfileset-->
      <zipfileset dir="${emailer.project}/${dist.src.dir}">
        <include name="**/**"/>
        <exclude name="**/*.dfPackage"/>
      </zipfileset>
      <zipfileset dir="${jetty.project}/${dist.src.dir}">
        <include name="**/**"/>
        <exclude name="**/*.dfPackage"/>
      </zipfileset>
      <!--zipfileset dir="${logger.project}/${dist.src.dir}">
        <include name="**/**"/>
        <exclude name="**/*.dfPackage"/>
      </zipfileset-->
      <zipfileset dir="${net.project}/${dist.src.dir}">
        <include name="**/**"/>
        <exclude name="**/*.dfPackage"/>
      </zipfileset>
      <zipfileset dir="${scripting.project}/${dist.src.dir}">
        <include name="**/**"/>
        <exclude name="**/*.dfPackage"/>
      </zipfileset>
     <zipfileset dir="${sfcoreloggers.project}/${dist.src.dir}">
        <include name="**/**"/>
        <exclude name="**/*.dfPackage"/>
      </zipfileset>
      <zipfileset dir="${slp.project}/${dist.src.dir}">
        <include name="**/**"/>
        <exclude name="**/*.dfPackage"/>
      </zipfileset>
      <zipfileset dir="${ssh.project}/${dist.src.dir}">
        <include name="**/**"/>
        <exclude name="**/*.dfPackage"/>
      </zipfileset>
      <zipfileset dir="${utils.project}/${dist.src.dir}">
        <include name="**/**"/>
        <exclude name="**/*.dfPackage"/>
      </zipfileset>
    </zip>
  </target>

<!-- =================================================================== -->
  <!--  Generte Forrest Docs -->
  <!-- =================================================================== -->
  

  <target name="generatedoc" depends="init" description="Document Generation" if="env.FORREST_HOME">
    <ant antfile="documentation.xml" inheritall="false" />
  <delete dir="build"/>  <!-- Forrest build dir -->
  </target>

  <!-- =================================================================== -->
  <!-- update version                                                      -->
  <!-- =================================================================== -->
 <target name="updateversion" depends="init-common, init">
    <property name="skin.dir" location="forrest_skin" />
    <!--replace 
        file="buildRelease.xml"
      propertyFile="version.properties">
      <replacefilter 
        token="@version" 
        property="component.version"/>
    </replace-->

  <!--replace 
        file="releaseBuild.xml"
      propertyFile="version.properties">
      <replacefilter 
        token="@version" 
        property="component.version"/>
    </replace-->

    <macrodef name="updateversion" >
      <attribute name="project" description="component to update"/>
     <attribute name="compname" description="component to update"/> 
     
     <sequential>
  <!--replace 
        file="@{project}/buildRelease.xml"
      propertyFile="version.properties">
      <replacefilter 
        token="@version" 
        property="@{compname}.version"/>
  </replace>
  
  <replace 
        file="@{project}/build.xml"
      propertyFile="version.properties">
      <replacefilter 
        token="@version" 
        property="@{compname}.version"/>
  </replace-->

  <!--replace 
        file="@{project}/releaseBuild.xml"
	propertyFile="@{project}/version.properties">
      <replacefilter 
        token="@version" 
        property="sf.build.version"/>
  </replace-->
  
  
  
  <replace 
        file="${skin.dir}/SFComponents.xml"
	propertyFile="@{project}/version.properties">
      <replacefilter 
        token="@{compname}-ver" 
        property="sf.build.version"/>
      <replacefilter 
        token="@{compname}-minver" 
        property="sf.min.version"/>
      <!--replacefilter 
        token="@{compname}-maxver" 
        property="@{compname}.maxversion"/-->
  </replace>
      </sequential>

    </macrodef>


    <updateversion project="${emailer.project}" compname="emailer"/>
    <updateversion project="${jetty.project}" compname="jetty" />
    <!--updateversion project="${logger.project}" compname="logger" /-->
    <updateversion project="${net.project}" compname="net"/>
    <updateversion project="${scripting.project}" compname="scripting"/>
    <updateversion project="${sfcoreloggers.project}" compname="sfcoreloggers"/>
    <updateversion project="${slp.project}" compname="slp"/>
    <updateversion project="${ssh.project}" compname="ssh"/>
    <updateversion project="${utils.project}" compname="utils"/>
  </target>

  <!-- =================================================================== -->
  <!--  Release                                                            -->
  <!-- =================================================================== -->
  <target name="release"  depends=" verify-smartfrog,  clean, dist, updateversion, initdist, copybuild, copybins, copylibs, copydocs, copycomponents, srczip,generatedoc, buildrelease " description="Creates clean new release">
    <copy tofile="${dist.dir}/build.xml" file="releaseBuild.xml"/>
    <copy tofile="${dist.dir}/build.example.properties" file="build.example.properties"/>
    <copy file="version.properties" todir="${dist.dir}" />
  </target>

  <target name="default" depends="dist"
    description="default target creates a distribution" />
    
  <!-- =================================================================== -->
  <!--  Library update                                                     -->
  <!-- =================================================================== -->
    

  <target name="fetch-libraries" depends="init,init-common,setproxy" >
    <property file="libraries.properties" />
      <libraries destdir="${maven.lib.dir}">
      <mavenrepository url="${maven.url}"/>
      <library project="xerces"
        archive="xercesImpl" 
        version="${xerces.version}" />
      <library project="xerces"
        archive="xmlParserAPIs" 
        version="${xerces.version}" />
<!--       <library project="xom"  
        version="${xom.version}" /> 
        -->
      <library project="jaxen"  
        version="${jaxen.version}" />
      <library project="commons-net"  
        version="${commons-net.version}" />
      <library project="junit"  
        version="${junit.version}" />
      <library project="log4j"  
        version="${log4j.version}" />
      <library project="bsh"  
        version="${bsh.version}" />
      <library project="rhino"  
        version="${rhino.version}" />
      <library project="velocity"  
        version="${velocity.version}" />
<!--       <library project="ant" archive="ant-testutil"  
        version="${ant-testutil.version}" /> -->
<!-- 
      <library project=""  
        version="${.version}" archive=""/>
       -->  
    </libraries>
  </target>


</project>
