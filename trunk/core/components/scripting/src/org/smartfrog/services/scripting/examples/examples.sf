/** (C) Copyright 1998-2004 Hewlett-Packard Development Company, LP

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

For more information: www.smartfrog.org

*/

#include "/org/smartfrog/components.sf"
#include "/org/smartfrog/functions.sf"
#include "/org/smartfrog/services/scripting/bsh/components.sf"

/**
 * This basic example shows how to set a variable in the interpreter,
 * and use it in different phases of the lifecycle
 */
ScriptPrinter extends ScriptPrim {
        descriptionOfMyNumber 1;

        attributesAsVariables false;

        // you can use multiline !
        sfDeployCode
                ##
                // here prim refers to the ScriptPrinter component
                Object o = prim.sfResolve("descriptionOfMyNumber");
                this.interpreter.set("myNumber",o); // myNumber is now an object you can use in the interpreter!
                #;

        // but if you don't, you have to use \" to actually
        // write Java strings between two quotes in a single line:
        sfStartCode "System.out.println(\"I am starting as n\" + myNumber);";
}

/**
 * The code call a script file, using an URL.
 * If sfCodeBase is specified, its value will be added as a URL prefix
 * to all 'sf...Code' scripts in this component.
 * You can also specify the URL in full.
 */
FileScriptUser extends ScriptPrim {
        sfCodeBase "http://mywebserver:1234/";
        sfDeployCode "AllMyScripts/theOneThatIWant.bsh";   // will use 'http://mywebserver:1234/AllMyScripts/theOneThatIWant.bsh'
        sfStartCode "anotherScript.bsh";		   // will use 'http://mywebserver:1234/anotherScript.bsh'
}
/**
 * Same principle. Note the usage of TerminationRecord 'status'
 * in the termination phase: it is, with 'prim', the second fixed word.
 */
Verbose extends ScriptPrim {
        sfDeployCode
                ##
                String name = prim.sfCompleteNameSafe().toString(); // direct binding also works
                System.out.println(name+ " Deployed ");
                #;

        sfStartCode
                ##
                System.out.println(name+ " Started ");
                #;

        sfTerminateWithCode
                ##
                System.out.println(name+ " Terminated for reason : "+ status.description);
                #;
}


/**
 * This component looks for another description, launches the
 * corresponding component and then kills it after 'lifetime' seconds.
 */
DeathWish extends ScriptPrim {
        attributesAsVariables true;
        lifetime 5000; // in ms

        // description of the victim
        victim extends LAZY Verbose;

        // now is the actual core of DeathWish;
        // For thread creation we're using the loose syntax of beanshells.
        sfDeployCode
                ##
                import org.smartfrog.sfcore.prim.*;
                import org.smartfrog.sfcore.reference.*;

                // deploy the victim
                Prim p = prim.sfParent().sfDeployComponentDescription(
                        "Poor Victim",
                        prim.sfParent(),
                        victim,
                        null);
                p.sfDeploy();
                #;

        // We don't need to start p as long as DeathWish's parent (prim.sfParent())
        // has not started yet. It will be call as part of the parent's own lifecycle
        sfStartCode
                ##
                // create the killer thread
                deathClock() {
                        run() {
                                Thread.sleep( ((Integer) lifetime ).intValue());
                                p.sfTerminate(new TerminationRecord("normal","Gotcha",null));
                        }
                        return this;
                }
                // and launch it...
                deathClock = deathClock();
                new Thread( deathClock ).start();
                #;
}

/**
 * This example demonstrates how to use SmartFrog and BeanShell
 * to communicate data between host.
 * Two components are defined, then launched on several hosts.
 * 'Chick' reads its classpath during its deployment phase, and puts the result in the 'classpath' compound.
 * 'CPChecker' reads the 'classpath compound and print the different classpaths found there.
 * 'MotherGoose' just deploys and starts the 'classpaths' compound. It can contain as many chicks as you want.
 * Thanks to SmartFrog the start phase is guaranteed to follow the deploy phase;
 * therefore the classpaths are updated in the 'classpaths' compound iff all 'chicks' have correctly deployed.
 */
Chick extends ScriptPrim {
        classpaths LAZY PARENT:classpaths;
        sfDeployCode
                ##
                cp = getClassPath();
                resPath = new StringBuffer() ;
                for (i = 0 ; i < cp.length ; i ++) {
                         resPath.append(cp[i].toString()+"\\n");
                }
                print("My classpath is : "+resPath.toString());
                String refName = "classpath of " + prim.sfCompleteName().toString();
                prim.sfResolve("classpaths").sfAddAttribute(refName,resPath.toString());
                #;
}
CPChecker extends ScriptPrim {
        classpaths LAZY PARENT:classpaths;
        sfStartCode
                ##
                cpHolder = prim.sfResolve("classpaths").sfContext();
                for(e = cpHolder.keys();e.hasMoreElements();){
                        name = e.nextElement();
                        if (name.indexOf("classpath")!=-1 ) { // only list the classpath
                                print( name + " is " + cpHolder.get(name));
                        }
                }
                #;
}

MotherGoose extends Compound {
        hostA PARENT:ATTRIB hostA;
        hostB PARENT:ATTRIB hostB;

        classpaths extends Compound {} // provided for cpChecker and chicks as a data recipient
        cpChecker extends CPChecker;
        chick extends Chick {
                sfProcessHost ATTRIB hostA;
        }
        anotherchick extends Chick {
                sfProcessHost ATTRIB hostB;
        } //etc.

}

/**
 * Using remote consoles. Simply specify a port in the ScriptPrim component...
 * The console you get gives you access to BeanShell, the 'prim' object, and all its SmartFrog APIs.
 */
BigBrother extends Compound {
        hostA PARENT:ATTRIB hostA;
        hostB PARENT:ATTRIB hostB;
        portA 1234;
        portB 4321;
        local extends ScriptPrim {
                sfProcessHost ATTRIB hostA;
                port PARENT:portA;
        }
        remote extends ScriptPrim{
                sfProcessHost ATTRIB hostB;
                port PARENT:portB;
        }
}


//uncomment the example you want to see

sfConfig extends Compound {
   sfProcessName "BeanShell";
        hostA "localhost";
        hostB "localhost";

  myExample extends ScriptPrinter;
	myExample2 extends Verbose;
	myExample3 extends DeathWish;
	myExample4 extends MotherGoose;
	myExample5  extends BigBrother;
}