/** (C) Copyright 1998-2004 Hewlett-Packard Development Company, LP

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

For more information: www.smartfrog.org

*/

#include "/org/smartfrog/components.sf"
#include "/org/smartfrog/functions.sf"
#include "/org/smartfrog/services/scripting/bsh/components.sf"


value1 11;
value2 5;
value3 "Math.PI";

string1 " 'The' value is: ";
string2 "\n";

Message extends ScriptPrim {
    sfDeployCode ##
	System.out.println(message);
    #;
    attributesAsVariables true;
    message "default message";
}

// exp can be a simple operation :
SimpleExpression extends expression{
        exp "8+6";
}

// but you can also define variables, make some somputation and return them as value of the expression:
LoopExpression extends expression{
	n ATTRIB value2;
        exp ##
		int c = 1;
		for (i = 1; i <= n ; i++) {
			c = i * c;
		}
		return c;
	    #;

}

// or use any Java function:
CondExpression extends expression {
	a ATTRIB value1;	// a is a Double object
	b ATTRIB value2;	// so is b
	exp "Math.max(a.intValue(),b.intValue());";
}


// attributes are evaluated, so that in the following example e is replaced by the double PI
ComplexExpression extends expression{
	a ATTRIB string1;
	b ATTRIB string2;
	c ATTRIB value1;
	d ATTRIB value2;
	e ATTRIB value3;	// will evaluate to the Double PI
        exp ##a+(
		c*d+Math.cos(e.doubleValue())*eval("6+7")
	      )+b
	    #;

}


sfConfig extends Message {
   sfProcessName "BeanShell";
    message extends concat {
      hello "hello - I will build a message with three values:\n";

      first "The first is a basic evaluation expression (8+6) :\n";
      exp1 extends SimpleExpression;			// exp1 is replaced by 8+6

      second "\nThe second is an example of function use (Math.max(a,b)) :\n";
      exp2 extends CondExpression;			// exp2 is replaced by max(a,b)

      third "\nThe third is an example of loop (n!) :\n";
      exp3 extends LoopExpression;			// exp3 is replaced by n!

      fourth "\nThe last one is just for fun:\n";
      exp4 extends ComplexExpression;			// exp4 is a sum of strings, integers,

      bye "goodbye\n";
    }
}
