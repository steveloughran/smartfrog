/** (C) Copyright 2006 Hewlett-Packard Development Company, LP

 This library is free software; you can redistribute it and/or
 modify it under the terms of the GNU Lesser General Public
 License as published by the Free Software Foundation; either
 version 2.1 of the License, or (at your option) any later version.

 This library is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General Public
 License along with this library; if not, write to the Free Software
 Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

 For more information: www.smartfrog.org

 */


#include "/org/smartfrog/components.sf"
#include "/org/smartfrog/predicates.sf"
#include "/org/smartfrog/services/utils/setproperty/sysprops.sf"

/**
 * Xmpp support is based on smack
 * http://www.jivesoftware.org/smack/
 *
 * Smack 2.2.1 does not support XMPP over HTTP, and so does not proxy except
 * through a socks proxy. It does work behind firewalls that let it make
 * outbound connections to the port the server is on 5222.
 */

XmppSchema extends Schema {
    server extends String {
        description "hostname of the server";
    }
    serviceName extends OptionalString {
        description "name of the service when different from the server name";
    }
    login extends String {
        description "user name for logins, no @domain suffix";
    }
    useTLS extends Boolean {
        description "should a (legacy) TLS encrypted channel be used";
    }
    password extends String {
        description "password for logins";
    }
    port extends Integer {
        description "connection port";
    }
    presence extends Boolean {
        description "should presence information be provided";
    }
    requireEncryption extends Boolean {
        description ##should we require an encrypted connection
            -that is, fail if the connection negotiated is not secured
            #;
    }
    resource extends String {
        description "resource for the login";
    }
}

XmppComponent extends Prim {
    xmppSchema extends XmppSchema;
    serviceName LAZY server;
    port 5222;
    requireEncryption true;
    resource "SmartFrog";
    presence false;
    useTLS false;
}



/**
 * listens for new messages
 */

XmppListener extends XmppComponent {
    filter extends String {
        description "classname for a filter to process incoming packets";
    }
    sfClass "org.smartfrog.services.xmpp.XmppListenerImpl";
    presence true;
    //default filter strips out all but messages
    filter "org.smartfrog.services.xmpp.MessageFilter";
}

/**
 * this component can be used in workflows; it will then terminate after sending
 * its message.
 * if deployed non-terminating, it can be used to send messages to either the default destination,
 * or to any other destination specified in the request.
 */


XmppClientSchema extends Schema {
    to extends OptionalString {
        description "username for the message or any other unaddressed messages";
    }
    message extends OptionalString {
        description "a message to send when this component starts";
    }
}

XmppClient extends XmppComponent {
    xmppClientSchema extends XmppClientSchema;
    sfClass "org.smartfrog.services.xmpp.XmppClientImpl";
}

/**
 * workflow variant
 */
XmppClientWorkflow extends XmppClient {
    sfShouldTerminate true;
}

/**
 * binding to google chat
 */
GoogleChatClient extends XmppClient {
    server "talk.google.com";
    serviceName "gmail.com";
}

GoogleChatClientWorkflow extends GoogleChatClient {
    sfShouldTerminate true;
}

GoogleChatListener extends XmppListener {
    server GoogleChatClient:server;
    serviceName GoogleChatClient:serviceName;
}


/**
 * binding to jabber.org
 */
JabberClient extends XmppClient {
    server "jabber.org";
}

JabberClientWorkflow extends JabberClient {
    sfShouldTerminate true;
}

JabberListener extends XmppListener {
    server JabberClient:server;
}


/**
    Note that setting the system property smack.debugEnabled to true turns debugging
    on for all components. This system properties component can be deployed
    to turn such debugging on. Once set, all new connections made in the
    same process get debugged. The client creates a connection every message;
    the listener only does so on start up.
 */


 XmppDebugging extends SystemProperties {
    debug true;
    setOnStartup true;
    setOnDeploy false;
    properties [["smack.debugEnabled",debug]];
 }


XmppDebuggingWorkflow extends XmppDebugging {
    sfShouldTerminate true;
    unsetOnTerminate false;
}

/**
 * This is the binding for the HP internal jabber server.
 */
HpJabberChatClient extends XmppClient {
    server "jabber.google.com";
    serviceName "hp.com";
    port 5223;
}
