SmartFrog 3.11.003beta
======================

This is a new release of SmartFrog, the Java-based, LPGL-licensed distributed
deployment framework developed by HP Laboratories. SmartFrog enables
applications to be deployed across multiple machines, configuring different
aspects of the system so that they are all consistently configured, and managing
the life-cycle of the application as a whole. The project's home page is
http://smartfrog.org/

The release artifacts are available at

http://sourceforge.net/project/showfiles.php?group_id=87384&package_id=176308

This release is 3.11.003beta; built from revision 4764
of the SVN repository. This release has an extended language
with the ability to tag attributes, and includes the following items:

* Core smartfrog daemon, including services to manage files, start and stop
  Java and native programs.
* Example components and applications.  
* Ant support: ant tasks to deploy and terminate applications from a build.
* Ant components: the ability to execute ant tasks in a deployment.
* Anubis: a partition aware tuple-space that can be used to implement fault 
  tolerant systems.
* JMX: the ability to configure and manage JMX components, and to manage
  SmartFrog components over JMX.
* Logging: integration with Apache commons-logging and Log4J
* Networking: email, FTP, SSH, DNS support.
* Quartz: scheduled operations using Quartz libraries.
* Scripting: support for BSF-hosted scripting languages
* WWW: deployment of WAR and EAR files to application servers. deploy-by-copy
  is provided for all application servers that support, and a tomcat-specific
  component can communicate with Apache Tomcat. The Jetty component can
  configure and deploy individual servlets, eliminating much of the need for WAR
  files themselves.
  
For Java 1.5 systems, there are some extra components:  
* Database: components to issue database commands, and deploy HSLDB and MySQL.
* Testing: Distributed JUnit and component testing with SFUnit.
* XML: XML support with XOM.
* XMPP: Presence and messaging over Jabber.

Packaging
=========

This release is available as:

* RPM files inside a .tar.gz file.
* a JAR installer.
* the original core smartfrog distribution as .zip and .tar.gz (deprecated)


The RPM installation is for RPM-based Linux systems. It comprises three RPM
files, smartfrog, smartfrog-daemon and smartfrog-demo:

smartfrog:        the core SmartFrog distribution.
smartfrog-daemon: the shell scripts to add the smartfrog distribution to the
                  path, and to run the daemon on start-up.
smartfrog-demo:   example code and documentation.

All the JAR files are also published to a repository that is compatible with
Apache Maven and Ivy. Add http://smartfrog.sourceforge.net/repository/
to your repository list to pull SmartFrog artifacts into your Ivy- or Maven- based build.

There are also SmartFrog components to retrieve artifacts from such a repository
(the Library components under /org/smartfrog/services/os/java/library.sf ),
which can be used for dynamic download of SmartFrog and other artifacts.


Security warning
================

Unless SmartFrog is configured with security, a running daemon
will listen on its configured port for incoming deployment requests, and deploy
the applications with the rights of the user running the daemon. When the
smartfrog-daemon RPM is installed, that means that a process running as root
will be listening on an open port for incoming deployment requests. Do not
deploy SmartFrog this way on any untrusted network, not without turning security
on and, ideally, recreating the RPMs with signed JAR files. 

Building SmartFrog
==================

SmartFrog requires Java 1.4 and Ant 1.7 to build. For a complete release,
Java1.5 or later is required.


The distribution does not include a source tree adequate to build the entire
system. Please follow the instructions at 
  http://sourceforge.net/svn/?group_id=87384
and check out smartfrog/trunk/core from our repository.

This release was built with revision 4764 of the repository, which
is available under the SVN branch
https://smartfrog.svn.sourceforge.net/svnroot/smartfrog/tags/release3.11.003beta

We strongly encourage anyone interested in building or extending smartfrog to
get involved in the smartfrog developer mailing list, which can be found from
the sourceforge project page http://sourceforge.net/projects/smartfrog/

Reporting Bugs
==============

Please file all bug reports at http://jira.smartfrog.org/

Thank you!

The SmartFrog Team        http://smartfrog.org/

Changes since last release
==========================

** Bug
    * [SFOS-91] - Abnormal TerminationRecords dont deserialize unless the far end can load every exception in the exception chain
    * [SFOS-101] - database and junit/xunit builds dont create source or documentation artifacts
    * [SFOS-147] - LogToLog4JImpl implements Seralizable, but it isnt
    * [SFOS-272] - Anubis Ping Heartbeat protocol not setting bits in heartbeats
    * [SFOS-280] - xunit and junit components don't run their published target when core/ant runs published
    * [SFOS-289] - avalanche ivy resolve too slow
    * [SFOS-290] - autoloader handles a missing file by throwing an NPE
    * [SFOS-291] - daemon rpm should shut down smartfrog before uninstalling
    * [SFOS-297] - callbacks make the daemon lock up under the testharness
    * [SFOS-303] - Asynchronous logging creating too many threads
    * [SFOS-304] - smartfrogd status option is broken


** Improvement
    * [SFOS-207] - Is there a way to automate .sxw to .pdf?
    * [SFOS-270] - Improve logging of deploy times.
    * [SFOS-281] - change Tags manipulation methods to throw SmartFrogRuntimeException
    * [SFOS-283] - remove Teardown logic from TestCompound
    * [SFOS-292] - Revert tag manipulation methods in component descriptions back to throwing SmartFrogContextException - related to SFOS-281
    * [SFOS-307] - Clean up documentation

** New Feature
    * [SFOS-232] - Add new History component for testing sequences of operations
    * [SFOS-271] - Add a way to deploy but not start a component


** Task
    * [SFOS-279] - Move JUnit invocation of SF deployments to callback notifications
    * [SFOS-288] - code review autoloader class/.sf; add test case

** Sub-task
    * [SFOS-212] - Build Avalanche under Ivy
    * [SFOS-219] - Get the source of sfinstall
    * [SFOS-278] - Replace direct access of TerminationRecord.cause with get/set
    * [SFOS-284] - add missing dependency jars of Avalanche to SCM repository
    * [SFOS-285] - Fix setup.xml to work with ivy




