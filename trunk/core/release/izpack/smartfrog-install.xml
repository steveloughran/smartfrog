<?xml version="1.0"?>
    <!-- this file gets passed through Ant's property expander before
    izpack gets to see it. Whenever you have $ and { next to each other, and you
    want izpack to see it, double escape the $$ symbol.-->
<!--<!DOCTYPE installation [
<!ELEMENT installation (preinstall?, info, properties?, variables?,
    guiprefs?, locale, resources?, panels,
    listeners?, packs, jar*, native*, postinstall?)>
<!ATTLIST installation version CDATA #REQUIRED>

    --><!-- The info section (general information on an installation) --><!--
<!ELEMENT info (appname, appversion, appsubpath?, authors?, url?, javaversion?, uninstaller?, webdir?, summarylogfilepath?)>
<!ELEMENT appname (#PCDATA)>
<!ELEMENT appversion (#PCDATA)>
<!ELEMENT appsubpath (#PCDATA)>
<!ELEMENT authors (author*)>
<!ELEMENT author EMPTY>
<!ATTLIST author name CDATA #REQUIRED>
<!ATTLIST author email CDATA #REQUIRED>
<!ELEMENT url (#PCDATA)>
<!ELEMENT javaversion (#PCDATA)>
<!ELEMENT uninstaller EMPTY>
<!ATTLIST uninstaller write (yes|no) "yes">
<!ATTLIST uninstaller name CDATA "uninstaller.jar">
<!ELEMENT webdir (#PCDATA)>
<!ELEMENT summarylogfilepath (#PCDATA)>

    --><!-- The properties markup (property declarations) --><!--
<!ELEMENT properties (property*)>
<!ELEMENT property EMPTY>
<!ATTLIST property name CDATA #IMPLIED>
<!ATTLIST property value CDATA #IMPLIED>
<!ATTLIST property file CDATA #IMPLIED>
<!ATTLIST property environment CDATA #IMPLIED>
<!ATTLIST property prefix CDATA #IMPLIED>

    --><!-- The variables markup (variable declarations) --><!--
<!ELEMENT variables (variable*)>
<!ELEMENT variable EMPTY>
<!ATTLIST variable name CDATA #REQUIRED>
<!ATTLIST variable value CDATA #REQUIRED>

    --><!-- The guiprefs markup (customizes the installer in GUI mode) --><!--
<!ELEMENT guiprefs (laf*, modifier*)>
<!ATTLIST guiprefs resizable (yes|no) #REQUIRED>
<!ATTLIST guiprefs width CDATA #REQUIRED>
<!ATTLIST guiprefs height CDATA #REQUIRED>
<!ELEMENT laf (os+, param*)>
<!ATTLIST laf name CDATA #REQUIRED>
<!ELEMENT param EMPTY>
<!ATTLIST param
    name  CDATA #REQUIRED
    value CDATA #REQUIRED>
    --><!-- Well defined modifier for gui characteristics.
         Possible keys are "useButtonIcons" and
         "useLabelIcons" both with value "yes" or "no".
    --><!--
<!ELEMENT modifier EMPTY>
<!ATTLIST modifier key CDATA #REQUIRED>
<!ATTLIST modifier value CDATA #REQUIRED>


    --><!-- The locale section (indicates which langpacks to include) --><!--
<!ELEMENT locale (langpack+)>
<!ELEMENT langpack EMPTY>
<!ATTLIST langpack iso3 CDATA #REQUIRED>

    --><!-- The resources section (resources for the panel's usings) --><!--
<!ELEMENT resources (res*)>
<!ELEMENT res EMPTY>
<!ATTLIST res src CDATA #REQUIRED>
<!ATTLIST res id CDATA #REQUIRED>
<!ATTLIST  res parse  (yes|no) "no">
<!ATTLIST  res type CDATA "plain">
<!ATTLIST  res encoding CDATA #IMPLIED>

    --><!-- The panels section (indicates the panels to use) --><!--
<!ELEMENT panels (panel+)>
<!ELEMENT panel (os*)>
<!ATTLIST panel os (unix|windows|mac) #IMPLIED>
<!ATTLIST panel classname CDATA #REQUIRED>

    --><!-- The listener section (indicates which listener where to use) --><!--
<!ELEMENT listeners (listener*)>
<!ELEMENT listener ( os*)>
<!ATTLIST listener compiler CDATA #IMPLIED>
<!ATTLIST listener installer CDATA #IMPLIED>
<!ATTLIST listener uninstaller CDATA #IMPLIED>
<!ATTLIST listener jar CDATA #IMPLIED>

    --><!-- The packs section (indicates the packs to create) --><!--
<!ELEMENT packs (pack+)>
<!ELEMENT pack (description, os*, file*, singlefile*, fileset*, updatecheck?, parsable*, executable*, depends*)>
<!ATTLIST pack name CDATA #REQUIRED>
<!ATTLIST pack id CDATA #IMPLIED>
<!ATTLIST pack required (yes|no) #REQUIRED>
<!ATTLIST pack preselected (yes|no) "yes">
<!ATTLIST pack os (unix|windows|mac) #IMPLIED>
<!ATTLIST pack loose (true|false) "false">
<!ATTLIST pack group CDATA #IMPLIED>
<!ATTLIST pack installGroups CDATA #IMPLIED>
<!ATTLIST pack excludeGroup CDATA #IMPLIED>
<!ELEMENT description (#PCDATA)>
<!ELEMENT file (os*, additionaldata*)>
<!ATTLIST file src CDATA #REQUIRED>
<!ATTLIST file targetdir CDATA #REQUIRED>
<!ATTLIST file os (unix|windows|mac) #IMPLIED>
<!ATTLIST file override (true|false|asktrue|askfalse|update) "update">
<!ELEMENT singlefile (os*, additionaldata*)>
<!ATTLIST singlefile src CDATA #REQUIRED>
<!ATTLIST singlefile target CDATA #REQUIRED>
<!ATTLIST singlefile os (unix|windows|mac) #IMPLIED>
<!ATTLIST singlefile override (true|false|asktrue|askfalse|update) "update">
<!ELEMENT fileset (include*, exclude*, os*, additionaldata*)>
<!ATTLIST fileset dir CDATA #REQUIRED>
<!ATTLIST fileset targetdir CDATA #REQUIRED>
<!ATTLIST fileset casesensitive (yes|no) "yes">
<!ATTLIST fileset defaultexcludes (yes|no) "yes">
<!ATTLIST fileset os (unix|windows|mac) #IMPLIED>
<!ATTLIST fileset override (true|false|asktrue|askfalse|update) "update">
<!ATTLIST fileset includes CDATA #IMPLIED>
<!ATTLIST fileset excludes CDATA #IMPLIED>
<!ELEMENT include EMPTY>
<!ATTLIST include name CDATA #REQUIRED>
<!ELEMENT exclude EMPTY>
<!ATTLIST exclude name CDATA #REQUIRED>
<!ELEMENT additionaldata EMPTY>
<!ATTLIST additionaldata key CDATA #REQUIRED>
<!ATTLIST additionaldata value CDATA #REQUIRED>
<!ELEMENT parsable (os*)>
<!ATTLIST parsable targetfile CDATA #REQUIRED>
<!ATTLIST parsable type CDATA "plain">
<!ATTLIST parsable encoding CDATA #IMPLIED>
<!ATTLIST parsable os (unix|windows|mac) #IMPLIED>
<!ELEMENT executable (args?, os*)>
<!ATTLIST executable targetfile CDATA #IMPLIED>
<!ATTLIST executable class CDATA #IMPLIED>
<!ATTLIST executable type (bin|jar) "bin">
<!ATTLIST executable stage (postinstall|never|uninstall) "never">
<!ATTLIST executable failure (abort|warn|ask) "ask">
<!ATTLIST executable keep (true|false) "false">
<!ELEMENT args (arg+)>
<!ELEMENT arg EMPTY>
<!ATTLIST arg value CDATA #REQUIRED>
<!ELEMENT os EMPTY>
<!ATTLIST os family (unix|windows|mac) #REQUIRED>
<!ATTLIST os name CDATA #IMPLIED>
<!ATTLIST os version CDATA #IMPLIED>
<!ATTLIST os arch CDATA #IMPLIED>
<!ELEMENT updatecheck (include*, exclude*)>
<!ELEMENT depends EMPTY>
<!ATTLIST depends packname CDATA #REQUIRED>

    --><!-- Allows the inclusion in the installer or uninstaller of a native library --><!--
<!ELEMENT native (os*)>
<!ATTLIST native type (izpack|3rdparty) #REQUIRED>
<!ATTLIST native name CDATA #REQUIRED>
<!ATTLIST native stage (install|uninstall|both) "install">

    --><!-- Allows the inclusion in the installer of an additional jar file content --><!--
<!ELEMENT jar EMPTY>
<!ATTLIST jar src CDATA #REQUIRED>
<!ATTLIST jar stage (install|uninstall|both) "install">
    ]>-->
<installation version="1.0">


  <info>
    <appname>SmartFrog</appname>
    <appversion>${Version}</appversion>
    <appsubpath>hp/smartfrog</appsubpath>
    <authors>
      <author name="SmartFrog Developers" email="smartfrog-developer@lists.sourceforge.net"/>
    </authors>
    <url>http://smartfrog.org/</url>
    <javaversion>1.4</javaversion>
  </info>


  <!--
      * $INSTALL_PATH : the installation path on the target system, as chosen by the user
    * $APPLICATIONS_DEFAULT_ROOT : the default path for applications
    * $JAVA_HOME : the JavaTM virtual machine home path
    * $CLASS_PATH : the Class Path used mainly for Java Applications
    * $USER_HOME : the user's home directory path
    * $USER_name : the user name
    * $APP_name : the application name
    * $APP_URL : the application URL
    * $APP_VER : the application version
    * $ISO3_LANG : the ISO3 language code of the selected langpack.
    * $IP_ADDRESS : the IP Address of the local machine.
    * $HOST_NAME : the HostName of the local machine.
    * $FILE_SEPARATOR : the file separator on the installation system
    * $DesktopShortcutCheckboxEnabled : When set to true, it automatically
    checks the "Create Desktop Shortcuts" button.
    To see how to use it, go to The Variables Element <variables> Be careful this variable is case sensitve !
    * $InstallerFrame.logfilePath : The path to the install log.
    This file contains the paths of all installed files.
    If set to "default" then the "$INSTALL_PATH/Uninstaller/install.log" path will be used.
    If this variable is not set, no install.log will be created.

    Environment variables can be accessed via the syntax $${ENV[variable]}.
    The curly braces are mandatory. Note that variable names are case-sensitive and usually in UPPER CASE.
  -->

  <variables>
    <variable name="VERSION" value="${Version}"/>
    <variable name="YEAR" value="${year}"/>
    <variable name="InstallerFrame.logfilePath" value="default"/>
    <!-- This automatically checks the "Create Desktop Shortcuts" button. Default value is "False". -->
    <variable name="DesktopShortcutCheckboxEnabled" value="false"/>
  </variables>

  <guiprefs height="600" resizable="yes" width="800">
  </guiprefs>
  
  <locale>
    <langpack iso3="eng"/>
  </locale>
  
  <resources>
    <res id="InfoPanel.info" src="res/info.txt" parse="yes" type="plain"/>
    <res id="HTMLInfoPanel.info" src="res/info.html" parse="yes" type="xml"/>
    <res id="HTMLLicencePanel.licence" src="res/license.html" parse="yes" type="xml"/>
  </resources>

  <panels>
    <panel classname="HelloPanel"/>
    <!--<panel classname="InfoPanel"/>-->
    <panel classname="HTMLInfoPanel"/>
    <!-- see res/HTMLLicencePanel.licence -->
    <panel classname="HTMLLicencePanel"/>
    <panel classname="PacksPanel"/>
    <panel classname="TargetPanel"/>
<!--    <panel classname="DataCheckPanel"/>-->
    <panel classname="SummaryPanel"/>
    <panel classname="InstallPanel"/>
    <panel classname="FinishPanel"/>
  </panels>

  
  <packs>
    
    <pack name="Core" required="yes">
      <description>SmartFrog core files.
        This includes the JAR files needed to run SmartFrog, and the batch files and shell scripts
        that start SmartFrog. It also includes the Ant tasks needed to invoke SmartFrog from a build.
      </description>
      <fileset dir="ivy/lib/package-core" targetdir="$INSTALL_PATH"
          includes="**/*"/>
    </pack>

    <pack name="Examples" required="no" preselected="yes">
      <description>
        These are the example files that come with SmartFrog, showing how to use
        SmartFrog to deploy complex systems.
      </description>
      <fileset dir="ivy/lib/package-examples" targetdir="$INSTALL_PATH"
          includes="**/*"/>
    </pack>

    <pack name="package-ant" required="no" >
      <description>
        This package contains the JAR file sf-ant.jar, which contains
        components that can run Ant tasks during deployment.
        The package also contains the Ant JAR files, which are
        licensed under the Apache Software Foundation License, version
        2.0.
      </description>
      <fileset dir="ivy/lib/package-ant" targetdir="$INSTALL_PATH"
          includes="**/*"/>
    </pack>
<!--    <pack name="package-anubis" required="no">
      <description>
        Anubis is a tuple-space like system for partition-aware
        messaging between components, which can be used to build
        fault-tolerant systems.
      </description>
      <fileset dir="ivy/lib/package-anubis" targetdir="$INSTALL_PATH"
          includes="**/*"/>
    </pack>-->
<!--
    <pack name="package-database" required="no">
      <description>
        The sf-database JAR contains the components needed to talk to a database
        during deployment, or when terminating a deployment. It has special component templates.
        to start and administer MySQL.
      </description>
      <fileset dir="ivy/lib/package-database" targetdir="$INSTALL_PATH"
          includes="**/*"/>
    </pack>
-->
<!--
    <pack name="package-jmx" required="no">
      <description>
        The sf-jmx package can integrate JMX MBeans with SmartFrog, and
        export SmartFrog components as MBeans.
      </description>
      <fileset dir="ivy/lib/package-jmx" targetdir="$INSTALL_PATH"
          includes="**/*"/>
    </pack>
-->

    <pack name="package-logging" required="no" preselected="yes">
      <description>package-logging</description>
      <fileset dir="ivy/lib/package-logging" targetdir="$INSTALL_PATH"
          includes="**/*"/>
    </pack>

<!--
    <pack name="package-networking" required="no">
      <description>package-networking</description>
      <fileset dir="ivy/lib/package-networking" targetdir="$INSTALL_PATH"
          includes="**/*"/>
    </pack>
    <pack name="package-scheduling" required="no">
      <description>Scheduling.
      Contains the Quartz library and a component for scheduling work.</description>
      <fileset dir="ivy/lib/package-scheduling" targetdir="$INSTALL_PATH"
          includes="**/*"/>
    </pack>
    <pack name="package-scripting" required="no">
      <description>package-scripting</description>
      <fileset dir="ivy/lib/package-scripting" targetdir="$INSTALL_PATH"
          includes="**/*"/>
    </pack>
-->
<!--    <pack name="package-testing" required="no">
      <description>package-testing</description>
      <fileset dir="ivy/lib/package-testing" targetdir="$INSTALL_PATH"
          includes="**/*"/>
      <depends packname="package-logging"/>
    </pack>-->
<!--
    <pack name="package-www" required="no">
      <description>WWW support.
      This package contains components to deploy web applications on different
        Java web servers, from jetty to JBoss. It also contains a LivenessPage
        component that can monitor the health of a remote site.
      </description>
      <fileset dir="ivy/lib/package-www" targetdir="$INSTALL_PATH"
          includes="**/*"/>
    </pack>
    <pack name="package-xml" required="no">
      <description>XML support.
      This package contains Xom and components to create a XOM graph from
      a component description.</description>
      <fileset dir="ivy/lib/package-xml" targetdir="$INSTALL_PATH"
          includes="**/*"/>
    </pack>
    <pack name="package-xmpp" required="no">
      <description>Jabber support: components to register with a Jabber server and
        relay notification methods. These can be used to communicate over long distances,
        or track the availability of remote systems.
      </description>
      <fileset dir="ivy/lib/package-xmpp" targetdir="$INSTALL_PATH"
          includes="**/*"/>
    </pack>
-->
<!--    <pack name="package-extras" required="no">
      <description>package-extras</description>
      <fileset dir="ivy/lib/package-extras" targetdir="$INSTALL_PATH"
          includes="**/*"/>
    </pack>
    <pack name="package-gui" required="no">
      <description>package-gui</description>
      <fileset dir="ivy/lib/package-gui" targetdir="$INSTALL_PATH"
          includes="**/*"/>
    </pack>-->
  </packs>

  <!--here come JAR files-->
  <jar src="../dist/lib/sf-release-resources.jar"/>
</installation>