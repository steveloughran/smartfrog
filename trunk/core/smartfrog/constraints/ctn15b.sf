/* (C) Copyright 2008 Hewlett-Packard Development Company, LP

Disclaimer of Warranty

The Software is provided "AS IS," without a warranty of any kind. ALL
EXPRESS OR IMPLIED CONDITIONS, REPRESENTATIONS AND WARRANTIES,
INCLUDING ANY IMPLIED WARRANTY OF MERCHANTABILITY, FITNESS FOR A
PARTICULAR PURPOSE, OR NON-INFRINGEMENT, ARE HEREBY
EXCLUDED. SmartFrog is not a Hewlett-Packard Product. The Software has
not undergone complete testing and may contain errors and defects. It
may not function properly and is subject to change or withdrawal at
any time. The user must assume the entire risk of using the
Software. No support or maintenance is provided with the Software by
Hewlett-Packard. Do not install the Software if you are not accustomed
to using experimental software.

Limitation of Liability

TO THE EXTENT NOT PROHIBITED BY LAW, IN NO EVENT WILL HEWLETT-PACKARD
OR ITS LICENSORS BE LIABLE FOR ANY LOST REVENUE, PROFIT OR DATA, OR
FOR SPECIAL, INDIRECT, CONSEQUENTIAL, INCIDENTAL OR PUNITIVE DAMAGES,
HOWEVER CAUSED REGARDLESS OF THE THEORY OF LIABILITY, ARISING OUT OF
OR RELATED TO THE FURNISHING, PERFORMANCE, OR USE OF THE SOFTWARE, OR
THE INABILITY TO USE THE SOFTWARE, EVEN IF HEWLETT-PACKARD HAS BEEN
ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. FURTHERMORE, SINCE THE
SOFTWARE IS PROVIDED WITHOUT CHARGE, YOU AGREE THAT THERE HAS BEEN NO
BARGAIN MADE FOR ANY ASSUMPTIONS OF LIABILITY OR DAMAGES BY
HEWLETT-PACKARD FOR ANY REASON WHATSOEVER, RELATING TO THE SOFTWARE OR
ITS MEDIA, AND YOU HEREBY WAIVE ANY CLAIM IN THIS REGARD.

*/
#include "/org/smartfrog/functions.sf"


Host extends ArrayGenerator {
   resources extends Constraint {
      host_type extends AutoVar {
	 range ["ht0", "ht1"];
      }
      memory extends AutoVar {
	 range [3, 4];
      }
      idx PARENT:sfIndex;

      [sfConstraint] -- "idx eq 0 implies memory eq 4 and host_type eq ht0";
      [sfConstraint] -- "idx gt 0 implies memory eq 3 and host_type eq ht1";
   }

   caps [resources:memory];
   hostvms [];

}


VM extends Constraint, ArrayGenerator {
   resources extends Constraint {
      vm_type extends AutoVar {
	 range ["vmt0", "vmt1"];
      }
      memory extends AutoVar {
	 range [2, 3];
      }
      idx PARENT:sfIndex;

      [sfConstraint] -- "idx lt 2 implies memory eq 2 and vm_type eq vmt0";
      [sfConstraint] -- "idx gte 2 implies memory eq 3 and vm_type eq vmt1";
   } 

   reqs [resources:memory];

   allocated extends Var {
       postActions extends {
	  -- extends DynamicPolicyEvaluation {
	    host extends LazyRef {
	       reference ("hosts" ++ ":" ++ sfVarAssignment);
	    }

	    newhostvms extends LazyConstraint {
	       vm LAZY sfTag; 
	       hostvms LAZY PARENT:host:hostvms;
	       [sfReturn] newhostvms VAR;
	       [sfConstraint] -- "appendlist(hostvms,[vm],newhostvms)";         
	    }

	    effects extends {
	       [sfSource] -- LAZY host;
	       [sfPath] -- LAZY hostvms;
	       [sfUpdate] -- LAZY newhostvms;
	    }
	 }
      }
   }


}

sfConfig extends ResourceAllocator {
   providers_array LAZY hosts; 
   providers_prefix "host";
   providers_attr LAZY sfTag;
   providers_caps_array LAZY hosts; 
   providers_caps_prefix "host";
   providers_caps_attr LAZY caps;

   consumers_array LAZY vms;
   consumers_prefix "vm"; 
   consumers_attr LAZY sfTag;
   consumers_reqs_array LAZY vms;
   consumers_reqs_prefix "vm"; 
   consumers_reqs_attr LAZY reqs;

   allocations_array LAZY vms;
   allocations_prefix "vm"; 
   allocations_attr LAZY allocated;

   hosts extends Array {
      prefix "host";
      extent 3;
      generator extends Host;  
   }

   vms extends Array {
      prefix "vm";
      extent 4;
      generator extends VM;  
   }
}
