<project name="security" xmlns:sec="http://security.smartfrog.org/">
  <!--
  /** (C) Copyright 1998-2007 Hewlett-Packard Development Company, LP

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

  For more information: www.smartfrog.org

  */
  -->

  <description>
    This file sets up security
    -it needs openssl on the local system
    -
  </description>
  <!-- CHANGE THESE PASSWORDS NOW!!! -->
  <target name="initCAProperties">
    <property name="defaultCAPassword" value="pleasechange2"/>

    <!-- CA related properties -->
    <property name="dist.dir" location="."/>

    <property name="dist.testCA.dir" location="${dist.dir}/testCA"/>
    <property name="dist.signedLib.dir" location="${dist.dir}/signedLib"/>
    <property name="disttestCA" value="${dist.testCA.dir}"/>
    <!-- dist.dir and others are set by surrounding build.xml -->
    <!--
     <property name="dist.private.dir" value="${dist.dir}/${private}"/>
     <property name="distsignedLib" value="${dist.signedLib.dir}"/>
     <property name="distlib" value="${dist.lib.dir}"/>
    -->

    <!-- this is the relative directory under private/ -->
    <property name="CAFromPrivate" value="ca"/>

    <property name="security.uri" value="http://security.smartfrog.org/" />
    <!-- REVISIT if the private dir is already defined, this assigment is harmless.
      if it is unassigned, it takes.-->
    <property name="dist.private.dir" value="${dist.dir}/private"/>
    <property name="dist.lib.dir" location="${dist.dir}/lib"/>

    <property name="CA.dir" location="${dist.private.dir}/${CAFromPrivate}"/>
    <property name="CAsubdir" value="demoCA"/>


    <property name="defaultKeyStore" value="mykeys.st"/>
    <property name="defaultCodeSignerCAKeyStore" value="codesigner.st"/>
    <property name="keystoreType" value="JCEKS"/>

    <property name="defaultPolicyName" value="sf.policy"/>
    <!--length that certificates remain valid-->
    <property name="certificate.duration" value="365"/>

    <property name="defaultSecProp" value="SFSecurity.properties"/>

    <property name="aliasCSKey" value="sfcodesigner"/>
    <property name="aliasCommunityKey" value="sfcommunity"/>
    <property name="aliasSelfKey" value="self"/>
    <property name="aliasMACDataKey" value="macdata"/>

    <property name="randomFile" value=".rnd"/>
    <property name="tempPasswdFile" value="passwd"/>
    <property name="host.dir.prefix" value="host"/>
    <!--the host dir suffix is, by default, set to "1"-->
    <property name="host.dir.suffix" value="1" />
    <!--the full host directory comes from concatenating the two-->
    <property name="host.subdir" value="${host.dir.prefix}${host.dir.suffix}" />
    <property name="openssl.cnf" location="${CA.dir}/openssl.cnf" />

    <property name="CA.field.CN" value="sfCodeSigner"/>
    <property name="CA.field.OU" value="HPLaboratories"/>
    <property name="CA.field.O" value="HP"/>
    <property name="CA.field.C" value="UK"/>

  </target>


  <target name="validateCAsetup" depends="initCAProperties">
    <fail>
      <condition>
        <not><available file="${openssl.cnf}"/></not>
      </condition>
      Not found: ${openssl.cnf}
      Have all the setup/copy targets been run?
    </fail>
  </target>

  <target name="validate-daemon-CA-setup" depends="initCAProperties">
    <fail>
      <condition>
        <not><available file="${CA.dir}/codesigner.st"/></not>
      </condition>
      Not found: ${CA.dir}/codesigner.st
      There is no Certification Authority. Run the "initCA" target to creat a new CA.
    </fail>
  </target>

  <!--
   Override point: do everything needed to create a CA
  -->
  <target name="ready-to-create-CA" depends="initCAPrograms,validateCAsetup">

  </target>


  <!-- 1 CA build related tasks -->

  <target name="initCAPrograms" depends="initCAProperties">
    <presetdef name="openssl" uri="${security.uri}">
      <exec dir="${CA.dir}" executable="openssl">
      </exec>
    </presetdef>
    <presetdef name="keytool" uri="${security.uri}">
      <exec dir="${CA.dir}" executable="keytool">
      </exec>
    </presetdef>

    <macrodef name="signsfjar" uri="${security.uri}">
      <attribute name="name"/>
      <sequential>
        <signjar
            jar="${dist.lib.dir}/@{name}"
            signedjar="${dist.signedLib.dir}/@{name}"
            alias="${aliasSelfKey}"
            keystore="${CA.dir}/${defaultCodeSignerCAKeyStore}"
            storetype="${keystoreType}"
            storepass="${defaultCAPassword}"/>
      </sequential>
    </macrodef>
  </target>



  <!-- 1.1 creating a new CA from scratch -->

  <target name="initCommunityCA" depends="ready-to-create-CA">
    <!-- Configure some setup files -->
    <mkdir dir="${CA.dir}/${CAsubdir}"/>
    <mkdir dir="${CA.dir}/${CAsubdir}/newcerts"/>
    <touch file="${CA.dir}/${CAsubdir}/index.txt"/>
    <echo message="01" file="${CA.dir}/${CAsubdir}/serial"/>

    <!--rand  -rand ${randomFile} -out ${randomFile} 64"-->
    <sec:openssl>
      <arg value="rand"/>
      <arg value="-rand"/>
      <arg value="${randomFile}"/>
      <arg value="-out"/>
      <arg value="${randomFile}"/>
      <arg value="64"/>
    </sec:openssl>

    <!-- "genrsa  -rand ${randomFile} -passout pass:${defaultCAPassword} -des3 -out ca.key 1024"/ -->
    <sec:openssl>
      <arg value="genrsa"/>
      <arg value="-rand"/>
      <arg value="${randomFile}"/>
      <arg value="-passout"/>
      <arg value="pass:${defaultCAPassword}"/>
      <arg value="-des3"/>
      <arg value="-out"/>
      <arg value="ca.key"/>
      <arg value="1024"/>
    </sec:openssl>


    <!-- Generate a selfsigned certificate for the CA -->
    <!--
     req -config openssl.cnf -new -x509 -passin pass:${defaultCAPassword} -days 365 -key ca.key -out cacert.pem
    -->
    <sec:openssl>
      <arg value="req"/>
      <arg value="-config"/>
      <arg value="openssl.cnf"/>
      <arg value="-new"/>
      <arg value="-x509"/>
      <arg value="-passin"/>
      <arg value="pass:${defaultCAPassword}"/>
      <arg value="-days"/>
      <arg value="${certificate.duration}"/>
      <arg value="-key"/>
      <arg value="ca.key"/>
      <arg value="-out"/>
      <arg value="cacert.pem"/>
    </sec:openssl>


    <copy file="${CA.dir}/cacert.pem" todir="${CA.dir}/${CAsubdir}"/>
  </target>

  <target name="initCodeSignerCA" depends="initCAPrograms">
    <!-- First generate new keys  -->
    <genkey alias="${aliasSelfKey}"
        keystore="${CA.dir}/${defaultCodeSignerCAKeyStore}"
        keyalg="RSA"
        verbose="true"
        validity="${certificate.duration}"
        storepass="${defaultCAPassword}"
        storetype="${keystoreType}"
        >
      <dname>
        <param name="CN" value="${CA.field.CN}"/>
        <param name="OU" value="${CA.field.OU}"/>
        <param name="O" value="${CA.field.O}"/>
        <param name="C" value="${CA.field.C}"/>
      </dname>
    </genkey>

    <!-- Export self-signed certificate -->
    <sec:keytool>
      <arg value="-keystore"/>
      <arg value="${defaultCodeSignerCAKeyStore}"/>
      <arg value="-export"/>
      <arg value="-alias"/>
      <arg value="${aliasSelfKey}"/>
      <arg value="-storepass"/>
      <arg value="${defaultCAPassword}"/>
      <arg value="-file"/>
      <arg value="codesigner.cer"/>
      <arg value="-storetype"/>
      <arg value="${keystoreType}"/>
    </sec:keytool>

    <!-- Generate and store secret key for MACData service -->
    <java classname="org.smartfrog.sfcore.security.GenerateSecretKey" failonerror="true">
      <arg value="-password"/>
      <arg value="${defaultCAPassword}"/>
      <arg value="-file"/>
      <arg value="${CA.dir}/${defaultCodeSignerCAKeyStore}"/>
      <arg value="-alias"/>
      <arg value="${aliasMACDataKey}"/>
      <classpath>
        <fileset dir="${dist.lib.dir}" includes="*.jar" />
        <pathelement path="${java.class.path}"/>
      </classpath>
    </java>
  </target>


  <target name="touchDistLibs" depends="initCAProperties">
    <!-- force that libraries will get signed in a build -->
    <touch>
      <fileset dir="${dist.lib.dir}" includes="**/*.jar"/>
    </touch>
  </target>

  <target name="initCA" depends="cleanCA, initCodeSignerCA, initCommunityCA, touchDistLibs">
  </target>


  <!-- 1.2 Signing a jar file -->
  <target name="signjarbuild" depends="ready-to-create-CA">
    <signjar jar="${jarname}"
        alias="${aliasSelfKey}"
        keystore="${CA.dir}/${defaultCodeSignerCAKeyStore}"
        signedjar="${signedjarname}"
        storetype="${keystoreType}"
        storepass="${defaultCAPassword}"/>
  </target>

  <!-- 1.3.2 Sets a random password in the property defaultPassword -->
  <target name="randomPasswd" depends="ready-to-create-CA">
    <!-- First generate a file with random characters -->
    <!--<arg line="rand -out ${tempPasswdFile} -base64 15"/>-->

    <sec:openssl dir="${dist.private.dir}">
      <arg value="rand"/>
      <arg value="-out"/>
      <arg value="${tempPasswdFile}"/>
      <arg value="-base64"/>
      <arg value="15"/>
    </sec:openssl>


    <!-- Second generate a property file with it-->
    <echo message="defaultPassword=" file="${dist.private.dir}/header.txt"/>
    <concat destfile="${dist.private.dir}/${tempPasswdFile}.properties">
      <filelist dir="${dist.private.dir}"
          files="header.txt,${tempPasswdFile}"/>
    </concat>


    <!-- Read property file -->
    <property file="${dist.private.dir}/${tempPasswdFile}.properties"/>
    <!-- Clean up -->
    <delete file="${dist.private.dir}/${tempPasswdFile}.properties"/>
    <delete file="${dist.private.dir}/${tempPasswdFile}"/>
    <delete file="${dist.private.dir}/header.txt"/>
  </target>

  <target name="ready.to.create.daemon.credentials"
      depends="validate-daemon-CA-setup,randomPasswd, initCAPrograms, ready-to-create-CA" />

  <!-- Initialize security credentials for new daemon -->
  <target name="newDaemon" depends="ready.to.create.daemon.credentials"
      description="Create the security credentials for a new daemon">
    <!-- Clean old key store, init timestamp -->

    <tstamp>
      <format property="unique.timestamp" pattern="yyyymmddhhmmss"/>
    </tstamp>
    <property name="daemon.hostkey.dir" location="${dist.private.dir}/${host.subdir}"/>
    <echo>Creating a new daemon key in ${daemon.hostkey.dir}</echo>
    <mkdir dir="${daemon.hostkey.dir}"/>

    <!-- First generate new keys -->
    <genkey alias="${aliasSelfKey}"
        keystore="${daemon.hostkey.dir}/${defaultKeyStore}"
        keyalg="RSA"
        storepass="${defaultPassword}"
        storetype="${keystoreType}"
        dname="CN=SmartFrog${unique.timestamp}, OU=HPL, O=HP, C=UK"/>

    <!-- Generate request for certificate -->
    <sec:keytool dir="${dist.private.dir}">
      <arg value="-keystore"/>
      <arg value="${host.subdir}/${defaultKeyStore}"/>
      <arg value="-alias"/>
      <arg value="${aliasSelfKey}"/>
      <arg value="-certreq"/>
      <arg value="-storepass"/>
      <arg value="${defaultPassword}"/>
      <arg value="-file"/>
      <arg value="${CAFromPrivate}/client.crs"/>
      <arg value="-storetype"/>
      <arg value="${keystoreType}"/>

      <!--line="-keystore ${host.subdir}/${defaultKeyStore} -certreq -alias ${aliasSelfKey} -storepass ${defaultPassword} -file ${CAFromPrivate}/client.crs  -storetype ${ketstoreType}"-->
    </sec:keytool>

    <!-- Get the CA to sign it -->
    <sec:openssl>
      <arg value="ca"/>
      <arg value="-config"/>
      <arg value="openssl.cnf"/>
      <arg value="-batch"/>
      <arg value="-in"/>
      <arg value="client.crs"/>
      <arg value="-out"/>
      <arg value="client.crs.pem"/>
      <arg value="-keyfile"/>
      <arg value="ca.key"/>
      <arg value="-key"/>
      <arg value="${defaultCAPassword}"/>
      <!--
            <arg
                line="ca -config openssl.cnf -batch -in client.crs -out client.crs.pem -keyfile ca.key -key ${defaultCAPassword} "/>
      -->
    </sec:openssl>

    <!-- Change format to DER-->


    <!--
        <exec dir="${CA}" executable="openssl">
          <arg line="x509 -in client.crs.pem -out client.crs.der -outform DER "/>
        </exec>
    -->

    <sec:openssl>
      <arg value="x509"/>
      <arg value="-in"/>
      <arg value="client.crs.pem"/>
      <arg value="-out"/>
      <arg value="client.crs.der"/>
      <arg value="-outform"/>
      <arg value="DER"/>
    </sec:openssl>

    <!-- Add public of Community CA to Root of Trust -->
    <!--
      -keystore ${host.subdir}/${defaultKeyStore} -alias ${aliasCommunityKey} -import -noprompt -storepass ${defaultPassword} -file ${CAFromPrivate}/${CAsubdir}/cacert.pem  -storetype ${keystoreType}
    -->
    <sec:keytool dir="${dist.private.dir}">
      <arg value="-keystore"/>
      <arg value="${host.subdir}/${defaultKeyStore}"/>
      <arg value="-alias"/>
      <arg value="${aliasCommunityKey}"/>
      <arg value="-import"/>
      <arg value="-noprompt"/>
      <arg value="-storepass"/>
      <arg value="${defaultPassword}"/>
      <arg value="-file"/>
      <arg value="${CAFromPrivate}/${CAsubdir}/cacert.pem"/>
      <arg value="-storetype"/>
      <arg value="${keystoreType}"/>
    </sec:keytool>

    <!-- Add certificate to my keys storage -->
    <!--
              line="-storepass ${defaultPassword} -keystore ${host.subdir}/${defaultKeyStore} -alias ${aliasSelfKey} -import -file ${CAFromPrivate}/client.crs.der -storetype ${keystoreType}"/>
    -->
    <sec:keytool dir="${dist.private.dir}">
      <arg value="-keystore"/>
      <arg value="${host.subdir}/${defaultKeyStore}"/>
      <arg value="-alias"/>
      <arg value="${aliasSelfKey}"/>
      <arg value="-import"/>
      <arg value="-storepass"/>
      <arg value="${defaultPassword}"/>
      <arg value="-file"/>
      <arg value="${CAFromPrivate}/client.crs.der"/>
      <arg value="-storetype"/>
      <arg value="${keystoreType}"/>
    </sec:keytool>

    <!-- Add public of CodeSigner CA to Root of Trust -->
    <!--          line="-keystore ${host.subdir}/${defaultKeyStore} -alias ${aliasCSKey} -import -noprompt -storepass ${defaultPassword} -file ${CAFromPrivate}/codesigner.cer" -storetype ${keystoreType}/>-->
    <exec dir="${dist.private.dir}" executable="keytool">
      <arg value="-keystore"/>
      <arg value="${host.subdir}/${defaultKeyStore}"/>
      <arg value="-alias"/>
      <arg value="${aliasCSKey}"/>
      <arg value="-import"/>
      <arg value="-noprompt"/>
      <arg value="-storepass"/>
      <arg value="${defaultPassword}"/>
      <arg value="-file"/>
      <arg value="${CAFromPrivate}/codesigner.cer"/>
      <arg value="-storetype"/>
      <arg value="${keystoreType}"/>
    </exec>


    <!-- copy secret key for MACData service from the codesigner keystore to host keystore -->
    <java classname="org.smartfrog.sfcore.security.CopySecretKey" failonerror="true">
      <arg value="-sourcepassword"/>
      <arg value="${defaultCAPassword}"/>
      <arg value="-sourcefile"/>
      <arg value="${CA.dir}/${defaultCodeSignerCAKeyStore}"/>
      <arg value="-destpassword"/>
      <arg value="${defaultPassword}"/>
      <arg value="-destfile"/>
      <arg value="${dist.private.dir}/${host.subdir}/${defaultKeyStore}"/>
      <arg value="-alias"/>
      <arg value="${aliasMACDataKey}"/>
      <classpath>
        <fileset dir="${dist.lib.dir}" includes="*.jar" />
        <pathelement path="${java.class.path}"/>
      </classpath>
    </java>

    <!-- Create ad-hoc security properties file -->
    <copy file="${dist.private.dir}/${defaultSecProp}" tofile="${daemon.hostkey.dir}/${defaultSecProp}"/>
    <propertyfile file="${daemon.hostkey.dir}/${defaultSecProp}">
      <entry key="org.smartfrog.sfcore.security.keyStorePassword" value="${defaultPassword}"/>
    </propertyfile>

  </target>

  <!-- 1.5 Clean all the CA stuff -->

  <target name="cleanCA" description=" Cleans the Certificate Authority"
      depends="initCAProperties">
    <delete dir="${CA.dir}/${CAsubdir}"/>
    <delete file="${CA.dir}/cacert.pem"/>
    <delete file="${CA.dir}/codesigner.cer"/>
    <delete file="${CA.dir}/codesigner.st"/>
    <delete file="${CA.dir}/ca.key"/>
    <delete file="${CA.dir}/client.crs"/>
    <delete file="${CA.dir}/client.crs.der"/>
    <delete includeEmptyDirs="true">
      <fileset dir="${dist.private.dir}" includes="host*/*"/>
      <fileset dir="${dist.private.dir}" includes="host*"/>
    </delete>
    <delete file="${CA.dir}/client.crs.pem"/>
  </target>

  <!-- 1.6 Dummy CA initialization when openssl is not available -->
  <target name="dummyInitCA"
      depends="cleanCA,touchDistLibs"
      description="Initialise a dummy CA">
    <copy todir="${dist.private.dir}">
      <fileset dir="${dist.testCA.dir}">
        <include name="host*/*"/>
      </fileset>
    </copy>
    <copy file="${dist.testCA.dir}/${defaultCodeSignerCAKeyStore}"
        todir="${CA.dir}"/>
  </target>


  <!-- 1.7 Sign jars -->
  <target name="signJars" depends="generateversion,initCAPrograms">
    <sec:signsfjar name="smartfrog-${Version}.jar"/>
    <sec:signsfjar name="sfExamples-${Version}.jar"/>
    <sec:signsfjar name="sfServices-${Version}.jar"/>
  </target>

</project>
