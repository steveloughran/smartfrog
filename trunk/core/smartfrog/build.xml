<?xml version="1.0"?>

<!--
/** (C) Copyright 1998-2004 Hewlett-Packard Development Company, LP

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

For more information: www.smartfrog.org

*/
-->

<!DOCTYPE project [
     <!ENTITY security SYSTEM "private/buildSecurity.xml">
     <!ENTITY testcases SYSTEM "../testharness/testcases/build.xml">
     <!ENTITY testharness SYSTEM "../testharness/build.xml">
]>

<!-- ===========================================================================
Introduction
============
The build script for SmartFrog framework. To run the build script ant must be installed
and ant executable should be in the system path.

Installing the build tools
==========================
Please go though the installation guide and install ant. Reference URL:http://ant.apache.org
-->

<project name="SmartFrog" default="dist" basedir=".">

  <!-- =================================================================== -->
  <!-- Initialization target                                               -->
  <!-- =================================================================== -->
  <target name="init">
    <tstamp/>
    <property name="Name.System" value="SmartFrog "/>
    <property name="Name.Company" value="(C) Copyright 1998-2004 Hewlett-Packard Development Company, LP"/>
    <property name="version" value="CORE"/>
    <property name="Version" value="3.01.003.alpha"/>
    <property name="year" value="2004"/>

    <echo message=""/>
    <echo message="==================================================================="/>
    <echo message="= ${Name.System} ${version} "/>
    <echo message="= ${Name.Company} "/>
    <echo message="==================================================================="/>
    <available property="nice.task.present" classname="org.apache.tools.ant.taskdefs.Nice" />
  </target>

  <!-- =================================================================== -->
  <!-- Help on usage                                                       -->
  <!-- =================================================================== -->
  <target name="help" depends="init" description="Help">
    <echo message=""/>
    <echo message="-------------------------------------------------------------"/>
    <echo message="${Name.System} ${version} Build file"/>
    <echo message="-------------------------------------------------------------"/>
    <echo message="* General:  "/>
    <echo message="    build        --> recompiles and creates all packages"/>
    <echo message="    dist         --> prepares distribution package (Default)"/>
    <echo message="    compile      --> compiles the contributed source code"/>
    <echo message="    sfParseTest  --> runs sfParser for 'parsertargets' file"/>
    <echo message="    jdocs        --> generates the Java Docs API documentation"/>
    <echo message="    clean        --> restores the distribution to its clean state"/>
    <echo message="    release      --> clean, dist, jdocs"/>
    <echo message="    all          --> builds all the packages"/>
    <echo message="    cleanall     --> cleans all the packages"/>
    <echo message="* Security:  "/>
    <echo message="    initCA --> initializes a Certificate Authority"/>
    <echo message="    dummyInitCA --> initialise a dummyCA. Needed first time before any build"/>
    <echo message="    cleanCA     --> cleans the Certificate Authority"/>
    <echo message="    signJars    --> signs the jar files and copies from lib to signedLib"/>
    <echo message="   "/>
    <echo message="    help --> this help"/>
    <echo message="See the comments inside the build.xml file for more details."/>
    <echo message="-------------------------------------------------------------"/>
    <echo message=""/>
  </target>

  <!-- =================================================================== -->
  <!-- Initialization path (Libs needed for compiling)                     -->
  <!-- =================================================================== -->
  <path id="smartfrog.class.path">
      <pathelement path="${classpath}"/>
  </path>

  <!-- =================================================================== -->
  <!-- Global properties                                                   -->
  <!-- =================================================================== -->
      <!-- Release Directories -->
     <property name="src" value="src"/>            <!-- where the source is -->
     <property name="build" value="build"/>        <!-- where the files for the jar file go -->
     <property name="dist" value="dist"/>         <!-- where the files to zip go -->
     <property name="releases" value="releases"/> <!-- where the dated zips go, don't clean -->
     <property name="bin" value="bin"/>            <!-- where all the executables go -->
     <property name="lib" value="lib"/>            <!-- where all the jar files go -->
     <property name="signedLib" value="signedLib"/> <!-- dir to export jar files -->
     <property name="testCA" value="testCA"/>
     <property name="private" value="private"/> <!-- all protected files -->
     <property name="docs" value="docs"/>
     <property name="jdocs" value="${docs}/jdocs"/>
     <property name="SFjdocs" value="${docs}/SFjdocs"/>

     <!--property name="redist" value="redist"/ -->

     <property name="examplesFiles" value="org/smartfrog/examples/**/*"/>
       <!-- a list of files for rmic -->
     <property name="rmitargets" value="${basedir}/rmitargets"/>

      <!-- Compile options for Smartfrog Release -->
     <property name="debugmode" value="on"/> <!-- turn on compile -g -->

     <!-- Sercurity related files -->
     <property name="manifestName" value="${private}/sealManifest.mf"/>
     <!-- Test Harness directory -->
     <property name="../testharnessdir" value="testharness"/>


<!-- Include here the security-related ant file -->
&security;
<!-- End of security-related ant file -->

<!-- Include here build file for test harness -->
&testharness;

<!-- Include here build file for test cases -->
&testcases;

  <!-- =================================================================== -->
  <!--  Release                                                            -->
  <!-- =================================================================== -->
  <target name="release"  depends="clean, dist, jdocs" description="Creates clean new release">
  </target>

  <!-- =================================================================== -->
  <!--                                                                     -->
  <!-- =================================================================== -->
  <target name="initbuild"  depends="init">
    <mkdir dir="${build}"/>
  </target>

  <!-- =================================================================== -->
  <!--                                                                     -->
  <!-- =================================================================== -->
  <target name="initdist" depends="init">
    <mkdir dir="${dist}"/>
    <mkdir dir="${dist}/${lib}"/>
    <mkdir dir="${dist}/${bin}"/>
    <mkdir dir="${dist}/${docs}"/>
    <mkdir dir="${dist}/${testCA}"/>
    <mkdir dir="${dist}/${private}"/>
    <mkdir dir="${dist}/${signedLib}"/>
    <mkdir dir="${dist}/${src}"/>
    <!--mkdir dir="${dist}/${redist}"/ -->
    <mkdir dir="${dist}/help"/>
  </target>

  <!-- =================================================================== -->
  <!--                                                                     -->
  <!-- =================================================================== -->
  <target name="initrelease" depends="init">
    <!-- Create the time stamp -->
    <tstamp/>
    <mkdir dir="${releases}"/>
  </target>

  <!-- =================================================================== -->
  <!--                                                                     -->
  <!-- =================================================================== -->
  <target name="createParser" depends="init">
    <!-- Javacc the parser file -->
    <javacc target="${src}/org/smartfrog/sfcore/languages/sf/DefaultParser.jj" javacchome="javacc"/>
  </target>


  <!-- =================================================================== -->
  <!--   Compiles source directory                                         -->
  <!-- =================================================================== -->
  <target name="compile" depends="initbuild,createParser" description="Compiles the contributed source code">
    <!-- Compile the java code from ${src} into ${build} -->
    <javac srcdir="${src}" destdir="${build}" debug="${debugmode}" compiler="javac1.4" source="1.4">
      <classpath refid="smartfrog.class.path"/>
    </javac>
    <rmic includesfile="${rmitargets}" base="${build}">
      <classpath refid="smartfrog.class.path"/>
    </rmic>
    <rmic includesfile="${rmitargets}Examples" base="${build}">
      <classpath refid="smartfrog.class.path"/>
    </rmic>

  </target>

  <!-- =================================================================== -->
  <!--   Copy .sf files to "build" directories                             -->
  <!-- =================================================================== -->
  <target name="copySF" depends="initbuild">
    <copy todir="${build}">
      <fileset dir="${src}">
        <include name="**/*.sf*" />
      </fileset>
    </copy>
  </target>

  <!-- =================================================================== -->
  <!--   Copy .bat files to "build" directories                            -->
  <!-- =================================================================== -->
  <target name="copyBAT" depends="initbuild">
    <copy todir="${build}">
      <fileset dir="${src}">
        <include name="**/*.bat*" />
      </fileset>
    </copy>
  </target>

  <!-- =================================================================== -->
  <!--   Copy .html files to "build" directories                           -->
  <!-- =================================================================== -->
  <target name="copyHTML" depends="initbuild">
    <copy todir="${build}">
      <fileset dir="${src}">
        <include name="**/*.htm*" />
      </fileset>
    </copy>
  </target>

  <!-- =================================================================== -->
  <!--  Copy Gif files to "build" directories                              -->
  <!-- =================================================================== -->
  <target name="copyGif" depends="initbuild">
    <copy todir="${build}">
      <fileset dir="${src}">
        <include name="**/*.gif" />
      </fileset>
    </copy>
  </target>


  <!-- =================================================================== -->
  <!--                                                                     -->
  <!-- =================================================================== -->
  <target name="copylibs" depends="initdist">
    <copy todir="${dist}/${lib}">
      <fileset dir="${lib}">
        <include name="**/*.jar" />
      </fileset>
    </copy>
  </target>

  <!-- =================================================================== -->
  <!--                                                                     -->
  <!-- =================================================================== -->
  <target name="copyPrivate" depends="initdist">
    <copy todir="${dist}/${private}">
      <fileset dir="${private}">
        <include name="**/*" />
      </fileset>
    </copy>
    <chmod dir="${dist}/${private}/"
          perm="go-rxw"
          includes="**/*"/>
  </target>

  <!-- =================================================================== -->
  <!--                                                                     -->
  <!-- =================================================================== -->
  <target name="copyTestCA" depends="initdist">
    <copy todir="${dist}/${testCA}">
      <fileset dir="${testCA}">
        <include name="**/*" />
      </fileset>
    </copy>
  </target>

  <!-- =================================================================== -->
  <!--                                                                     -->
  <!-- =================================================================== -->
  <target name="copybins" depends="initdist">
    <copy todir="${dist}/${bin}">
      <fileset dir="${bin}">
        <include name="**/*" />
        <exclude name="**/*.bak" />
        <exclude name="**/tools" />
      </fileset>
    </copy>
   <chmod dir="${dist}/${bin}"
          perm="ugo+rx"
          excludes="**/*.ico, **/*.ini, **/*.sf*"/>
  </target>




  <!-- =================================================================== -->
  <!--                                                                     -->
  <!-- =================================================================== -->
  <target name="copydocs" depends="initdist">
    <copy todir="${dist}/${docs}">
      <fileset dir="${docs}">
        <include name="**/*.pdf" />
      </fileset>
    </copy>
  </target>

  <!-- =================================================================== -->
  <!--                                                                     -->
  <!-- =================================================================== -->
  <target name="copyHelp" depends="initdist">
    <copy todir="${dist}/help">
      <fileset dir="${docs}">
        <include name="help.htm" />
        <include name="logo.png" />
      </fileset>
    </copy>
  </target>

  <!-- =================================================================== -->
  <!--                                                                     -->
  <!-- =================================================================== -->
  <target name="copyexamples" depends="initdist">
    <copy todir="${dist}/${src}">
      <fileset dir="${src}">
        <include name="${examplesFiles}" />
        <exclude name="**/*.dfPackage"/>
      </fileset>
    </copy>
  </target>

  <!-- =================================================================== -->
  <!--   JDocs                                                             -->
  <!-- =================================================================== -->
  <target name="jdocs" depends="initdist" description="Generates the API documentation">
    <!--  Java Docs for all                                                -->
    <echo message=""/>
    <echo message="------------------------------------------------------------------------"/>
    <echo message="  Creating Java Docs for ${Name.System} ${version} [${dist}/${jdocs}]"/>
    <echo message="------------------------------------------------------------------------"/>
    <mkdir dir="${dist}/${jdocs}"/>
    <javadoc packagenames="org.smartfrog.*"
           sourcepath="${src}"
           destdir="${dist}/${jdocs}"
           author="true"
           version="true"
           use="true"
           windowtitle="${Name.System}"
           Header="${Name.System} ${Version}"
           Footer="${Name.System} ${version} ${Version}"
           doctitle="${Name.System}"
           bottom="${Name.Company}"
           source="1.4">
      <group title="SmartFrog Packages" packages="org.smartfrog.*"/>
      <classpath refid="smartfrog.class.path"/>
    </javadoc>

    <!--  Java doc for the grammars -->
    <!--
    <exec executable="java">
        <arg line="-cp javacc/JavaCC.zip" />
        <arg line="COM/sun/labs/jjdoc/JJDocMain" />
        <arg line= "-OUTPUT_FILE=${docs}/DefaultParser.html" />
        <arg line="${src}/org/smartfrog/sfcore/languages/sf/DefaultParser.jj" />
    </exec>
    -->
  </target>


  <!-- =================================================================== -->
  <!--  BUILD                                                              -->
  <!-- =================================================================== -->

  <target name="build" depends="initbuild,compile,copySF,copyGif,copyBAT,copyHTML"
      description="Recompile and create all packages"/>

  <!-- =================================================================== -->
  <!--  Jar Files                                                              -->
  <!-- =================================================================== -->

  <!--  SmartFrog Jar                                                     -->
  <target name="sfJar" depends="build">
    <jar jarfile="${dist}/${lib}/smartfrog.jar" basedir="${build}"
         includes="**/smartfrog/**"
         excludes="**/services/**,**/examples/**,**/tools/**, **/test/**"
         manifest ="${manifestName}"/>
  </target>


  <!--  sfServices.jar                                               -->
  <target name="sfServicesJar" depends="build">
    <jar jarfile="${dist}/${lib}/sfServices.jar"
         basedir="${build}"
         includes="**/services/**"
         manifest ="${manifestName}"/>
  </target>


  <!--  sfExamples.jar                                               -->
  <target name="sfExamplesJar" depends="build">
    <!-- Create sfExamples.jar file -->
    <jar jarfile="${dist}/${lib}/sfExamples.jar"
         basedir="${build}"
         includes="**/examples/**"
         manifest ="${manifestName}"/>
  </target>

  <target name="jars" depends="initdist, sfJar,sfServicesJar,sfExamplesJar"/>
  <!-- =================================================================== -->
  <!-- Initialization path for SF Libs                                     -->
  <!-- =================================================================== -->
  <path id="smartfrog.run.class.path">
       <pathelement location="${dist}/${lib}/smartfrog.jar"/>
       <pathelement location="${dist}/${lib}/sfServices.jar"/>
       <pathelement location="${dist}/${lib}/sfExamples.jar"/>
  </path>

  <!-- =================================================================== -->
  <!--  build, create jars and signs them.                                 -->
  <!-- =================================================================== -->

  <target name="secureBuild" depends="build,jars,signJars" />

  <!-- =================================================================== -->
  <!--  create security buld file                                          -->
  <!-- =================================================================== -->

  <target name="buildSetup">
      <copy tofile="${dist}/build.xml" file="releaseBuild.xml" />
      <copy tofile="${dist}/rmitargets" file="rmitargetsExamples" />
      <copy tofile="${dist}/parsertargets" file="parsertargets" />
      <copy tofile="${dist}/COPYRIGHT.txt" file="COPYRIGHT.txt" />
      <copy tofile="${dist}/LICENSE.txt" file="LICENSE.txt" />
      <copy tofile="${dist}/changes.txt" file="changes.txt" />
      <copy tofile="${dist}/readme.txt" file="readme.txt" />
  </target>

  <!-- =================================================================== -->
  <!--  DIST                                                               -->
  <!-- =================================================================== -->
  <target name="dist" depends="build,initdist,jars,copylibs,copybins,copyPrivate,copydocs, copyexamples, copyHelp,copyTestCA,buildSetup, sfParseTest" description="Prepares distribution package">
  </target>

  <!-- =================================================================== -->
  <!--  SECUREDIST                                                         -->
  <!-- =================================================================== -->
  <target name="securedist" depends="dist" description="Updates dist and sign jars if CA initialized">
  <ant  dir="${dist}" target="signJars" inheritAll="false"/>
  </target>


  <!-- =================================================================== -->
  <!-- clean                                                               -->
  <!-- =================================================================== -->
  <target name="clean" depends="init"  description="Restores the distribution to its clean state">
    <!-- Delete the ${build} ${dist} ${jdocs} directory trees -->
    <!-- remove parser source files -->
    <delete dir="${build}"/>
    <delete dir="${dist}"/>
  </target>


  <!-- =================================================================== -->
  <!-- reallyClean/fromClean                                               -->
  <!-- =================================================================== -->
  <target name="reallyclean" depends="clean">
    <delete dir="${releases}"/>
  </target>

  <!-- =================================================================== -->
  <!-- a clean distribution                                               -->
  <!-- =================================================================== -->
  <target name="fromclean" depends="clean,dist"/>

  <!-- =================================================================== -->
  <!-- sfParse parsertargets                                                -->
  <!-- =================================================================== -->
  <target name="sfParseTest"  depends="build,jars">
    <java classname="org.smartfrog.SFParse"
        failonerror="true" fork="true"
        classpathref="smartfrog.run.class.path">
      <arg value="-R"/>
      <!--<arg value="-r"/> -->
      <arg value="-q"/>
      <arg value="-f"/>
      <arg file="parsertargets"/>
   </java>
  </target>
  <target name="all" depends="dist" description="creates all the packages required to run smartfrog">
  </target>
  <target name="cleanall" depends="init" description="Restores the distribution to its clean state">
    <delete dir="${build}"/>
    <delete dir="${dist}"/>
  </target>

</project>

<!-- End of file -->
