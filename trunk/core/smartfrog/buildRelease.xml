<?xml version="1.0"?>
<project name="kernel-release" default="release" basedir=".">
  <!--
  /** (C) Copyright 1998-2007 Hewlett-Packard Development Company, LP

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

  For more information: www.smartfrog.org

  */
  -->



  <description>
    This build file creates the release artifacts for the SmartFrog project
    Introduction
    ============
    To use: ant -f buildRelease release

    set gui.enabled=true to include smartfrog gui components
    set tasks.enabled=true to include the tasks
    set logging.enabled=true to include logging

  </description>

  <!--look for two override points-->
  <property file="build.properties" />
  <property file="../build.properties" />




  <!-- =================================================================== -->
  <!-- Initialization target                                               -->
  <!-- =================================================================== -->
  <target name="init">
    <tstamp/>
    <property name="Name.Framework" value="SmartFrog Framework"/>
    <property name="Name.System" value="smartfrog"/>
    <tstamp>
      <format property="year" pattern="yyyy"/>
    </tstamp>
    <property name="Name.Company" value="(C) Copyright 1998-${year} Hewlett-Packard Development Company, LP"/>

    <echo message=""/>
    <echo message="==================================================================="/>
    <echo message="In the kernel-release project"/>

    <!--a macro that defaults to not setting a property include.name
      unless the property name.enabled is already set.
    -->

    <macrodef name="disable">
      <attribute name="name"/>
      <sequential>
        <property name="@{name}.enabled" value="false" />
        <condition property="include.@{name}">
          <istrue value="${@{name}.enabled}" />
        </condition>
        <echo level="verbose">include.@{name}=${include.@{name}}</echo>
      </sequential>
    </macrodef>

    <!--we cannot drop the gui until it builds and publishes under Ivy -->
    <!--<property name="gui.enabled" value="true" />-->
    <disable name="gui" />

    <!--logging and tasks, they are under control-->
    <disable name="logging" />
    <disable name="tasks" />
  </target>

  <!-- =================================================================== -->
  <!-- Help on usage                                                       -->
  <!-- =================================================================== -->
  <target name="help" depends="init" description="Process">
    <echo message=""/>
    <echo message="-------------------------------------------------------------"/>
    <echo message="${Name.Framework} Release file"/>
    <echo message="-------------------------------------------------------------"/>
    <echo message="* General:  "/>
    <echo message="    help         --> this message"/>
    <echo message="    process      --> step by step release guide"/>
    <echo message="    release      --> generates zip file and javaInstaller for release packages"/>
    <echo message="   "/>
    <echo message="    help --> this help"/>
    <echo message="            See the comments inside the build.xml file for more details."/>
    <echo message="-------------------------------------------------------------"/>
    <echo message=""/>
  </target>

  <!-- =================================================================== -->
  <!-- Help on usage                                                       -->
  <!-- =================================================================== -->
  <target name="process" depends="init" description="Help">
    <echo message=""/>
    <echo message="-------------------------------------------------------------"/>
    <echo message=" Step by step guide to make a release"/>
    <echo message="-------------------------------------------------------------"/>
    <echo message="  1. Change version in smartfrog/sf-build-version.properties"/>
    <echo message=" "/>
    <echo message="  2. Change documentation version (if updated):"/>
    <echo message=" 	   ex. - Check sfReference.sxw"/>
    <echo message="            - Check sfUserManual.sxw"/>
    <echo message="            - Generate PDF: sfReference.pdf"/>
    <echo message="            - Generate PDF: sfUserManual.pdf"/>
    <echo message=" "/>
    <echo message="  5. Build new release: "/>
    <echo message="         Go to fresh module directory and run:"/>
    <echo message="             ant release "/>
    <echo message="             ant -f buildRelease.xml release"/>
    <echo message=" "/>
    <echo message="  6. Check content of zip and dist files: "/>
    <echo message="         Ex. SRC distribution: 'build.xml dist' "/>
    <echo message="                               'dist\build.xml build'  "/>
    <echo message="                               'dist\build.xml jdocs'  "/>
    <echo message="         Ex. BIN distribution: 'dist\build.xml build'  "/>
    <echo message="                               'dist\build.xml jdocs'"/>
    <echo message=" "/>

    <echo message="-------------------------------------------------------------"/>
    <echo message=""/>
  </target>


  <!-- =================================================================== -->
  <!-- Global properties                                                   -->
  <!-- =================================================================== -->
      <!-- Release Directories -->
  <property name="bin" value="bin"/>
  <!-- where the source is -->
  <property name="src" value="src"/>
  <!-- where the source is -->
  <property name="dist" value="dist"/>
  <!-- where the files to zip go -->
  <property name="release.dir" location="../releases" />
  <property name="release.unzip.dir" location="../releases/expanded" />

  <!-- where the dated zips go, don't clean -->
  <property name="lib" value="lib"/>
  <property name="docs" value="docs"/>
  <property name="examples" value="examples"/>
  <property name="examplesSrc" value="src"/>
  <property name="dist.lib.dir" location="${dist}/${lib}"/>
  <property name="dist.bin.dir" location="${dist}/${bin}"/>

  <property name="examplesFiles" value="org/smartfrog/examples/**/*"/>


  <property name="default" value="**/default*"/>
  <property name="smartfrogdoc" value="smartfrogdoc"/>

  <!--mode for executable files in the archives-->
  <property name="exec" value="755" />
  <!-- properties for executables-->
  <property name="dos-executables" value="**/*.bat,**/*.cmd"/>




  <!-- =================================================================== -->
  <!-- define the patterns for different parts of the archives             -->
  <!-- patterns are not bound to a specific directory, so can be reused    -->
  <!-- and can be declared before the artifacts actually exist, unlike filesets-->
  <!-- =================================================================== -->
  <patternset id="excluded.cruft">
    <exclude name="**/SVN" />
    <exclude name="**/svn" />
    <exclude name="**/*.dfPackage" />
    <exclude name="**/Cvs" />
    <exclude name="**/CVS" />
    <exclude name="**/.#*" />
    <exclude name="**/*.*~" />
  </patternset>

  <!--Shell scripts from the bin/ directories-->
  <patternset id="unix.bin">
    <include name="smartfrog"/>
    <include name="set*Properties"/>
    <include name="sf*"/>
    <include name="*.pl"/>
    <include name="*.py"/>
    <exclude name="*.bat"/>
    <exclude name="*.cmd"/>
    <exclude name="sfGui" unless="include.gui" />
    <patternset refid="excluded.cruft"/>
  </patternset>

  <!--DOS binaries-->
  <patternset id="dos.bin">
    <include name="*.bat"/>
    <include name="*.cmd"/>
    <exclude name="sfGUI*.bat" unless="include.gui" />
  </patternset>
  
  <!--everything in the bin dir other than the unix and DOS stuff-->
  <patternset id="other.bin">
    <include name="metadata/*"/>
    <include name="*"/>
    <include name="sfGui.bat"/>
    <exclude name="smartfrog"/>
    <exclude name="sf*"/>
    <exclude name="set*Properties"/>
    <exclude name="*.pl"/>
    <exclude name="*.py"/>
    <exclude name="*.bat"/>
    <exclude name="*.cmd"/>
    <patternset refid="excluded.cruft"/>
  </patternset>

  <!-- pattern for documentation; can be applied to doc/ and dist/doc-->
  <patternset id="docs.pattern">
    <include name="dir.JPG"/>
    <include name="*.html"/>
    <include name="*.pdf"/>
    <include name="jedit-smartfrog.pdf"/>
    <include name="antTasksManual/*.html"/>
    <include name="components/*.pdf"/>
    <include name="images/**"/>
    <include name="jdocs/**"/>
    <include name="skin/**"/>
    <include name="smartfrogdoc/**"/>
    <patternset refid="excluded.cruft"/>
  </patternset>

  <!--directories that security needs -->
  <patternset id="security.pattern">
    <include name="private/**"/>
    <include name="testCA/**"/>
    <patternset refid="excluded.cruft"/>
  </patternset>

  <!--all the source files.-->
  <patternset id="source.pattern">
    <include name="src/**"/>
    <include name="private/**"/>
    <include name="testCA/**"/>
    <include name="javacc/*"/>
    <include name="build.xml"/>
    <include name="releaseBuild.xml"/>
    <include name="parsertargets"/>
    <include name="COPYRIGHT.txt"/>
    <include name="LICENSE.txt"/>
    <include name="readme.txt"/>
    <include name="sf-build-version.properties"/>
    <!--notice how this pulls in the directory, but not its contents-->
    <include name="lib" />
    <patternset refid="excluded.cruft"/>
  </patternset>


  <patternset id="lib.pattern">
    <include name="smartfrog*.jar"/>
    <include name="sfServices*.jar"/>
    <include name="sfExamples*.jar"/>
    <exclude name="SFGuiTools*.jar" unless="include.gui" />
    <exclude name="SFGuiBrowser*.jar" unless="include.gui" />
    <exclude name="sf-loggingservices*.jar" unless="include.logging"/>
    <exclude name="log4j-*.jar" unless="include.logging"/>
    <exclude name="commons-logging-*.jar" unless="include.logging"/>
    <exclude name="sf-tasks*.jar" unless="include.tasks" />
  </patternset>

  <target name="clean" >
    <delete dir="${release.dir}" />
  </target>
  
  <!-- =================================================================== -->
  <!-- FixCRLF for different platforms                                     -->
  <!-- =================================================================== -->
  <target name="fixCRLF">
     <!-- OS dependant -->
     <fixcrlf srcdir="${dist.bin.dir}"
       includes="**/**"
       excludes="${dos-executables},${default}"
     />
    <!-- recursively set all batch files to DOS-->
    <fixcrlf srcdir="${dist.bin.dir}" eol="dos"
        tab="remove"
        tablength="4"
        includes="${dos-executables}"
        />
    <!-- set the shell scripts to unix and executable-->
    <fixcrlf srcdir="${dist.bin.dir}"
        eol="unix" eof="remove"
        tab="remove"
        tablength="4"
        >
      <patternset refid="unix.bin"/>
    </fixcrlf>
    <chmod dir="${dist.bin.dir}" perm="ugo+rx" >
      <patternset refid="unix.bin"/>
    </chmod>

     <!-- OS dependant -->
     <fixcrlf srcdir="${dist}"
       includes="**/*.txt"
     />
  </target>

  <!-- =================================================================== -->
  <!-- initrelease                                                             -->
  <!-- =================================================================== -->
  <target name="initrelease">
	  <mkdir dir="${release.dir}"/>
    <java classname="org.smartfrog.Version"
        failonerror="true" fork="true"
        outputproperty="version">
      <arg value="-b"/>
      <classpath>
        <fileset dir="${dist.lib.dir}">
          <include name="**/*.jar"/>
        </fileset>
      </classpath>
      </java>
  </target>

  <target name="ready-to-release" depends="init, initrelease, fixCRLF" >
    <!--base prefix for zipping/tarring things, so it expands into a subdir-->

    <property name="prefix" value="${Name.System}.${version}" />
    <mkdir dir="${release.dir}" />
    <mkdir dir="${release.unzip.dir}" />

    <property name="dist.zip" location="${release.dir}/${prefix}_dist.zip"/>
    <property name="all.zip" location="${release.dir}/${prefix}_all.zip"/>
    <property name="dist.tar" location="${release.dir}/${prefix}_dist.tar"/>
    <property name="dist.tar.gz" location="${dist.tar}.gz"/>
    <property name="all.tar" location="${release.dir}/${prefix}_all.tar"/>
    <property name="all.tar.gz" location="${all.tar}.gz"/>

  </target>

  <target name="zipfilesets" depends="ready-to-release">
    <zipfileset id="doc.files.zf" dir="docs" prefix="${prefix}/docs">
      <patternset refid="docs.pattern" />
    </zipfileset>

    <!--docs in the dist/docs subdir-->
    <zipfileset id="dist.doc.files.zf" dir="${dist}/docs/"
        prefix="${prefix}/dist/docs">
      <patternset refid="docs.pattern" />
    </zipfileset>

    <!-- distributables. Leaves out but docs but includes binaries without setting permissions-->
    <zipfileset id="dist.main.zf" dir="${dist}" prefix="${prefix}/dist">
      <include name="**"/>
      <exclude name="lib/**" />
      <exclude name="bin/**"/>
      <exclude name="docs/**"/>
      <exclude name="classes/**"/>
      <patternset refid="excluded.cruft"/>
    </zipfileset>

    <!--binaries. Does not include bin/security -->
    <zipfileset id="dist.unix.bin.zf" dir="${dist}/bin/"
        filemode="${exec}" prefix="${prefix}/dist/bin">
      <patternset refid="unix.bin" />
    </zipfileset>
    <zipfileset id="dist.dos.bin.zf"
        dir="${dist}/bin/" prefix="${prefix}/dist/bin">
      <patternset refid="dos.bin" />
    </zipfileset>
    <zipfileset id="dist.other.bin.zf"
        dir="${dist}/bin/" prefix="${prefix}/dist/bin">
      <patternset refid="other.bin" />
    </zipfileset>
    <zipfileset id="security.unix.bin.zf" dir="${dist}/bin/security" filemode="${exec}"
        prefix="${prefix}/dist/bin/security">
      <patternset refid="unix.bin" />
    </zipfileset>
    <zipfileset id="security.dos.bin.zf" dir="${dist}/bin/security"
        prefix="${prefix}/dist/bin/security">
      <patternset refid="dos.bin" />
    </zipfileset>
    <zipfileset id="security.other.bin.zf" dir="${dist}/bin/security"
        prefix="${prefix}/dist/bin/security">
      <patternset refid="other.bin" />
    </zipfileset>
    <zipfileset id="unix.bin.zf" dir="bin" filemode="${exec}"
        prefix="${prefix}/bin">
      <patternset refid="unix.bin" />
    </zipfileset>
    <zipfileset id="dos.bin.zf" dir="bin" filemode="${exec}"
        prefix="${prefix}/bin">
      <patternset refid="dos.bin" />
    </zipfileset>
    <zipfileset id="other.bin.zf" dir="bin"
        prefix="${prefix}/bin">
      <patternset refid="other.bin" />
    </zipfileset>
    <!-- source -->
    <zipfileset id="main.zf" dir="."
        prefix="${prefix}/">
      <patternset refid="source.pattern" />
    </zipfileset>

    <zipfileset id="dist.lib.zf" dir="${dist}/lib"
        prefix="${prefix}/dist/lib">
      <patternset refid="lib.pattern" />
    </zipfileset>
    <zipfileset id="lib.zf" dir="lib"
        prefix="${prefix}/lib">
      <patternset refid="lib.pattern" />
    </zipfileset>


    <presetdef name="make-dist-zip">
      <zip duplicate="fail">
        <zipfileset refid="dist.main.zf" />
        <zipfileset refid="dist.doc.files.zf" />
        <zipfileset refid="dist.unix.bin.zf" />
        <zipfileset refid="dist.dos.bin.zf" />
        <zipfileset refid="dist.other.bin.zf" />
        <zipfileset refid="dist.lib.zf" />
        <zipfileset refid="security.unix.bin.zf" />
        <zipfileset refid="security.dos.bin.zf" />
        <zipfileset refid="security.other.bin.zf" />
      </zip>
    </presetdef>
  </target>

  <target name="dist-zip" depends="zipfilesets"
      description="distribution zip">
    <make-dist-zip destfile="${dist.zip}" />
  </target>

  <target name="dist-unzip" depends="dist-zip">
    <property name="dist.unzip.dir" location="${release.unzip.dir}/zip/dist" />
    <delete dir="${dist.unzip.dir}" />
    <mkdir dir="${dist.unzip.dir}" />
    <unzip dest="${dist.unzip.dir}" src="${dist.zip}"/>
  </target>
  

  <target name="all-zip" depends="zipfilesets"
      description="all zip">


    <!--extend the dist file with extra stuff-->
    <make-dist-zip destfile="${all.zip}" >
      <zipfileset refid="doc.files.zf"/>
      <zipfileset refid="unix.bin.zf" />
      <zipfileset refid="dos.bin.zf" />
      <zipfileset refid="other.bin.zf" />
      <zipfileset refid="main.zf" />
      <zipfileset refid="lib.zf" />
    </make-dist-zip>
  </target>

  <target name="all-unzip" depends="all-zip">
    <property name="all.unzip.dir" location="${release.unzip.dir}/zip/all" />
    <delete dir="${all.unzip.dir}" />
    <mkdir dir="${all.unzip.dir}" />
    <unzip dest="${all.unzip.dir}" src="${all.zip}"/>
  </target>

  <!--
    Make the zipfiles, and expand them in place
  -->
  <target name="zip" depends="dist-zip,all-zip" />
  <!--
    Make the zipfiles, and expand them in place
  -->
  <target name="unzip" depends="dist-unzip,all-unzip" />

  <target name="tarfilesets" depends="ready-to-release">
    <tarfileset id="doc.files.tf" dir="docs" prefix="${prefix}/docs">
      <patternset refid="docs.pattern" />
    </tarfileset>
    <!--docs in the dist/docs subdir-->
    <tarfileset id="dist.doc.files.tf" dir="${dist}/docs/"
        prefix="${prefix}/dist/docs">
      <patternset refid="docs.pattern" />
    </tarfileset>
    <!-- distributables. Leaves out docs, lib and  binaries-->
    <tarfileset id="dist.main.tf" dir="${dist}" prefix="${prefix}/dist">
      <include name="**"/>
      <exclude name="lib/**"/>
      <exclude name="bin/**"/>
      <exclude name="docs/**"/>
      <exclude name="classes/**"/>
      <patternset refid="excluded.cruft"/>
    </tarfileset>

    <!--binaries. Does not include bin/security -->
    <tarfileset id="dist.unix.bin.tf" dir="${dist}/bin/"
        filemode="${exec}" prefix="${prefix}/dist/bin">
      <patternset refid="unix.bin" />
    </tarfileset>
    <tarfileset id="dist.dos.bin.tf" dir="${dist}/bin/"
       prefix="${prefix}/dist/bin">
      <patternset refid="dos.bin" />
    </tarfileset>
    <tarfileset id="dist.other.bin.tf"
        dir="${dist}/bin/" prefix="${prefix}/dist/bin">
      <patternset refid="other.bin" />
    </tarfileset>
    <tarfileset id="security.unix.bin.tf" dir="${dist}/bin/security" filemode="${exec}"
        prefix="${prefix}/dist/bin/security">
      <patternset refid="unix.bin" />
    </tarfileset>
    <tarfileset id="security.dos.bin.tf" dir="${dist}/bin/security"
        prefix="${prefix}/dist/bin/security">
      <patternset refid="dos.bin" />
    </tarfileset>
    <tarfileset id="security.other.bin.tf" dir="${dist}/bin/security"
        prefix="${prefix}/dist/bin/security">
      <patternset refid="other.bin" />
    </tarfileset>
    <tarfileset id="unix.bin.tf" dir="bin" filemode="${exec}"
        prefix="${prefix}/bin">
      <patternset refid="unix.bin" />
    </tarfileset>
    <tarfileset id="other.bin.tf" dir="bin"
        prefix="${prefix}/bin">
      <patternset refid="other.bin" />
    </tarfileset>
    <tarfileset id="dos.bin.tf" dir="bin"
        prefix="${prefix}/bin">
      <patternset refid="dos.bin" />
    </tarfileset>
    <!-- source -->
    <tarfileset id="main.tf" dir="."
        prefix="${prefix}/">
      <patternset refid="source.pattern" />
    </tarfileset>
    <tarfileset id="dist.lib.tf" dir="${dist}/lib"
        prefix="${prefix}/dist/lib">
      <patternset refid="lib.pattern" />
    </tarfileset>
    <tarfileset id="lib.tf" dir="lib"
        prefix="${prefix}/lib">
      <patternset refid="lib.pattern" />
    </tarfileset>

    <presetdef name="make-dist-tar">
      <tar longfile="gnu" >
        <tarfileset refid="dist.main.tf" />
        <tarfileset refid="dist.doc.files.tf" />
        <tarfileset refid="dist.unix.bin.tf" />
        <tarfileset refid="dist.dos.bin.tf" />
        <tarfileset refid="dist.other.bin.tf" />
        <tarfileset refid="dist.lib.tf" />
        <tarfileset refid="security.unix.bin.tf" />
        <tarfileset refid="security.dos.bin.tf" />
        <tarfileset refid="security.other.bin.tf" />
      </tar>
    </presetdef>
  </target>


  <target name="dist-tar" depends="tarfilesets"
      description="distribution tar">
    <make-dist-tar destfile="${dist.tar}" />
    <gzip src="${dist.tar}" zipfile="${dist.tar.gz}"/>
  </target>

  <target name="dist-untar" depends="dist-tar">
    <property name="dist.untar.dir" location="${release.unzip.dir}/tar/dist" />
    <delete dir="${dist.untar.dir}" />
    <mkdir dir="${dist.untar.dir}" />
    <untar dest="${dist.untar.dir}" src="${dist.tar}"/>
  </target>


  <!--extend the dist file with extra stuff-->
  <target name="all-tar" depends="tarfilesets"
      description="all tar">
    <make-dist-tar destfile="${all.tar}" >
      <tarfileset refid="doc.files.tf"/>
      <tarfileset refid="unix.bin.tf" />
      <tarfileset refid="dos.bin.tf" />
      <tarfileset refid="other.bin.tf" />
      <tarfileset refid="main.tf" />
      <tarfileset refid="lib.tf" />
    </make-dist-tar>
    <gzip src="${all.tar}" zipfile="${all.tar.gz}"/>
  </target>

  <target name="all-untar" depends="all-tar">
    <property name="all.untar.dir" location="${release.unzip.dir}/tar/all" />
    <delete dir="${all.untar.dir}" />
    <mkdir dir="${all.untar.dir}" />
    <untar dest="${all.untar.dir}" src="${all.tar}"/>
  </target>

  <!--
    Make the tarfiles, and expand them in place
  -->
  <target name="tar" depends="dist-tar,all-tar" />
  <!--
    Make the tarfiles, and expand them in place
  -->
  <target name="untar" depends="dist-untar,all-untar" />

  <!-- =================================================================== -->
  <!-- release                                                             -->
  <!-- =================================================================== -->
  <target name="release" depends="zip,tar,expand"
      description="Creates zip with release packages">
  </target>

  <target name="expand" depends="unzip,untar"
    description="make the distributables, then expand them" />

</project>

<!-- End of file -->
