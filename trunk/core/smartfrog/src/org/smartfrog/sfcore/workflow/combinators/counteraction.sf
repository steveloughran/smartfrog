/** (C) Copyright 1998-2006 Hewlett-Packard Development Company, LP

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

For more information: www.smartfrog.org

*/
#include "org/smartfrog/sfcore/workflow/eventbus/eventbus.sf"

/**
 * This component is designed to wrap two workflow actions/sequences into a pair, with one sequence run
 * at startup, and the second sequence executed during termination. The idea is that the second sequence
 * is the counteraction to the first; such as the deletion of a database or the dropping of a table.

 * when started, this component
 * 1. Deploys and starts the action component
 * 2. If it is marked as terminating, it then terminates itself. Otherwise it stays deployed (default)
 * 3. Deploys the "counterAction" component, which will be run at termination.
 * 3. Deploys and starts the liveness component, if it exists. This component gets liveness tests relayed to it.
 * 4. When terminating, starts the counterAction component that was deployed earlier.
 */
CounterAction extends ActionCompound {
    sfClass "org.smartfrog.sfcore.workflow.combinators.Try";

    /**
     * the name of the failing component is based on the
     * string returned from the fault. normal and abnormal
     * are the common ones, but there is nothing to prevent
     * different terminations from being used, even though
     * it is very unusual
     */
    CounterAction extends Schema {
      counterAction extends OptionalCD;
      liveness extends OptionalCD;
    }
    
}
