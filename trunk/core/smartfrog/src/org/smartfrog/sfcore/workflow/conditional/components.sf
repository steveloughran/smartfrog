/** (C) Copyright 2006 Hewlett-Packard Development Company, LP

Disclaimer of Warranty

The Software is provided "AS IS," without a warranty of any kind. ALL
EXPRESS OR IMPLIED CONDITIONS, REPRESENTATIONS AND WARRANTIES,
INCLUDING ANY IMPLIED WARRANTY OF MERCHANTABILITY, FITNESS FOR A
PARTICULAR PURPOSE, OR NON-INFRINGEMENT, ARE HEREBY
EXCLUDED. SmartFrog is not a Hewlett-Packard Product. The Software has
not undergone complete testing and may contain errors and defects. It
may not function properly and is subject to change or withdrawal at
any time. The user must assume the entire risk of using the
Software. No support or maintenance is provided with the Software by
Hewlett-Packard. Do not install the Software if you are not accustomed
to using experimental software.

Limitation of Liability

TO THE EXTENT NOT PROHIBITED BY LAW, IN NO EVENT WILL HEWLETT-PACKARD
OR ITS LICENSORS BE LIABLE FOR ANY LOST REVENUE, PROFIT OR DATA, OR
FOR SPECIAL, INDIRECT, CONSEQUENTIAL, INCIDENTAL OR PUNITIVE DAMAGES,
HOWEVER CAUSED REGARDLESS OF THE THEORY OF LIABILITY, ARISING OUT OF
OR RELATED TO THE FURNISHING, PERFORMANCE, OR USE OF THE SOFTWARE, OR
THE INABILITY TO USE THE SOFTWARE, EVEN IF HEWLETT-PACKARD HAS BEEN
ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. FURTHERMORE, SINCE THE
SOFTWARE IS PROVIDED WITHOUT CHARGE, YOU AGREE THAT THERE HAS BEEN NO
BARGAIN MADE FOR ANY ASSUMPTIONS OF LIABILITY OR DAMAGES BY
HEWLETT-PACKARD FOR ANY REASON WHATSOEVER, RELATING TO THE SOFTWARE OR
ITS MEDIA, AND YOU HEREBY WAIVE ANY CLAIM IN THIS REGARD.

*/


#include "/org/smartfrog/sfcore/workflow/conditional/conditional.sf"
#include "/org/smartfrog/sfcore/workflow/components/terminator.sf"

/*
 * Conditions
 * These are components that can be evaluated to true or false, and used in conditional expressions.
 * By default, these components terminate after doing their work. That is, they are workflow integrated
 * unless sfShouldTerminate is set to false.
 */

ConditionalEventCompound extends EventCompound {
  sfClass "org.smartfrog.sfcore.workflow.conditions.ConditionalEventCompound";
  conditionalSchema extends ConditionalSchema;
  sfShouldTerminate true;
}

/**
 * Deploy one of two children, depending upon the result of the condition
 */
If extends ConditionalEventCompound {
  ifSchema extends Schema {
    then extends OptionalCD;
    else extends OptionalCD;
  }
}

/**
 * Wait for a condition to become true.
 * When it does, the "then" element -if present- is deployed.
 * if there was a timeout, the "else" element is deployed.
 * After either action terminates or was skipped, the WaitFor component itself terminates.
 */
WaitFor extends If {
  waitForSchema extends Schema {
    interval extends integer {
      description "pause in milliseconds between tests";
    };
    timeout extends integer {
      description "time in milliseconds after which the test is deemed to have failed";
    };
  }
}

/**
 * A WaitFor component set up to terminate abnormally if a time out occurred
 */

FailingWaitFor extends WaitFor {
  message "Timed out";

  then extends Terminator {
    description PARENT:message;
    selftype Terminator:ABNORMAL;
  }
}


/**
 * This component tests the condition at startup, and fails if it
 * is not met
 */
TestCondition extends ConditionalEventCompound {
  testConditionSchema extends Schema {
    message extends string {
      description "error text on failure";
    };
  }

  message "Test condition failed";
}

/**
 * This component evaluates the condition every liveness test
 * and reports a failure if the condition evaluates to false
 *
 * It can be used to turn any condition into a system health test.
 *
 * The component declares itself non-terminating, so that it remains deployed until
 * its parent is terminated.
 */
LivenessTest extends TestCondition {
  message "Liveness condition failed";
  sfShouldTerminate false;
}




