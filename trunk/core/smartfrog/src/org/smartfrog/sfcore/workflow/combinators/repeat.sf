/** (C) Copyright 1998-2006 Hewlett-Packard Development Company, LP

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

For more information: www.smartfrog.org

*/
#include "/org/smartfrog/sfcore/workflow/eventbus/eventbus.sf"

/**
 * Repeat is a modified compound which differs in that its single sub-component
 * is created and should it terminate normally, is recreated. This is repeated
 * a number of times or indefinitely unless the sub-component terminates
 * abnormally . A Repeat combinator creates no subcomponents until it's
 * sfStart phase at which point the subcomponent is created in the normal way.
 * The Repeat combinator terminates normally if the sub-component has
 * terminated normally a given number of times, and abnormally whenever the
 * component terminates abnormally. The file repeat.sf contains the SmartFrog
 * configuration file for the base Repeat combinator. This file conatins the
 * details of the attributes which may be passed to Repeat.
 */
Repeat extends ActionCompound {
    sfClass "org.smartfrog.sfcore.workflow.combinators.Repeat";
    repeatSchema extends Schema {
        repeat extends Integer;
    }
    repeat 1; // set to -1 for infinite repeat
}
