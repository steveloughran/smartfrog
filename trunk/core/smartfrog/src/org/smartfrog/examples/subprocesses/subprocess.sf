/** (C) Copyright 1998-2004 Hewlett-Packard Development Company, LP

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

For more information: www.smartfrog.org

*/

#include "org/smartfrog/components.sf"

/**
 * Includes the Display Component.
 */
#include "/org/smartfrog/services/display/components.sf"

/**
 * Includes the Trace Component.
 */
#include "/org/smartfrog/services/trace/components.sf"

/** 
 * Includes the Management Component.
 */
#include "/org/smartfrog/services/management/components.sf"

#include "org/smartfrog/examples/counter/components.sf"

MyCounter extends Counter {
    limit 3;
}

/**
 * System component has sub-components that are deployed in separate processes. 
 * Each sub-component:
 * Generates a counter from the seed value to the specified limit.
 * Has a trace component which traces and displays a message indicating the 
 * phases it goes through into the main trace info window.
 * Has a display component that shows the output of the counter component in a 
 * separate display window.
 */
System extends Compound {

     traceFirst extends Trace{
        outputMsg LAZY ATTRIB displayTrace;
        //Active Hooks. By default they are active
        //deployHook    false;
        //startHook     false;
        //terminateHook false;
      }

     // Display to see the output of the processes in First;
     displayFIRST extends Display{
        nameDisplay "Process FIRST (Exit:ALT+F4)";
        positionDisplay "NW";
        redirectStd true;
        //sfExport false;
        //widthDisplay 800;
        //heightDisplay 600;
        //textDisplay "Hello world!/n";
      }

     sfProcessName "first";
     sfProcessComponentName "a";

     demoA extends MyCounter {
        Message "demoA";
        limit 30;
     }

     foo extends Compound {
        traceTest extends Trace{
           //outputMsg LAZY PARENT:PARENT:PARENT:displayTrace; // Equivalent to ATTRIB because displayTrace is a unique name.
           outputMsg LAZY ATTRIB displayTrace;
        }

        sfProcessName "test";
        sfProcessComponentName "b";
        displayTEST extends Display{
            nameDisplay "Process TEST (Exit:ALT+F4)";
            positionDisplay "N";
            redirectStd true;
            sfExport true;
        }

        demoB extends MyCounter {
            Message "demoB";
            limit 6;
        }


        bar extends Compound {
            traceTest2 extends Trace{
               outputMsg LAZY ATTRIB displayTrace;
            }
            sfProcessName "test2";
            sfProcessComponentName "e";
            displayTEST2 extends Display{
                nameDisplay "Process TEST2 (Exit:ALT+F4)";
                positionDisplay "SW";
                redirectStd true;
                sfExport true;
            }
            demoE extends MyCounter {
                Message "demoE";
                limit 9;
            }
        }
     }

     baz extends Compound {
        sfProcessComponentName "c";
        sfProcessName "test2";
        demoC extends MyCounter {
           Message "demoC";
           limit 9;
        }
     }


     bar extends Compound {
          sfProcessComponentName "d";
          //sfProcessHost "localhost";
          //sfProcessName "test";
          demoD extends MyCounter {
                Message "demoD";
               limit 3;
           }
     }


     foobar extends Compound {
        displayLOCALHOST extends Display{
            nameDisplay "Process LOCALHOST (Exit:ALT+F4)";
            positionDisplay "S";
            redirectStd true;
            sfExport true;
        }
        sfProcessHost "localhost";
        sfProcessComponentName "f";
        demoF extends MyCounter {
           Message "demoF";
           limit 12;
        }
     }
     myFoo extends Compound {
       myFoo extends Compound {
        sfProcessName "first";
        myFoo extends Compound {
           sfProcessName "test";
           myFoo extends Compound {
              sfProcessName "test2";
              myFoo extends Compound {
              }
           }
        }
       }
     }
}

DeployMgnt extends DeployDisplay{
  //nameDisplay "Deploy info (Exit:ALT+F4)";
  //redirectStd true;
};

sfConfig extends Compound {
     /**
      * Extension of Display component to show the tree of components in a 
      * separate graphical window.
      */
     displayTrace extends TraceDisplay{
        nameDisplay "Trace info (Exit:ALT+F4)";
        redirectStd false;
        positionDisplay "SE";
     }
     /** 
      * The trace component which traces and displays a message indicating the 
      * phases every component goes through.
      */
     traceLocal extends Trace {
        outputMsg LAZY ATTRIB displayTrace;
        //Active Hooks. By default they are active
        //deployHook    false;
        //startHook     false;
        //terminateHook false;
     }
     /** 
      * The management component that displays the deployement information of 
      * all the components.
      */
     deployMgnt extends DeployMgnt{
        positionDisplay "NE";
     }
     /** 
      * The system component that spawns various subprocesses.
      */
     system extends System;
}
