#include "/org/smartfrog/functions.sf"
#include "/org/smartfrog/services/dependencies/statemodel/components.sf"
#include "/org/smartfrog/services/dependencies/threadpool/components.sf"

BaseStateComponent extends StateComponent {
   up false; 
   tstart extends Transition {
      sfGuard (!LAZY up);
      sfEffects extends {
	 up true;
      }
   }
   tstop extends Transition {
      sfGuard (LAZY up);
      sfEffects extends {
	 up false;
      }
   }
}

ServerInstance extends Composite {  
   name sfTag;
   
   si_desired extends StateComponent {  
       up false;
       sfClass "org.smartfrog.examples.orchdws.sf.DesiredServerInstance";
       name "si_desired";
   }

   si_observed extends BaseStateComponent {  
       sfClass "org.smartfrog.examples.orchdws.sf.ObservedServerInstance";   
       name "si_observed";
       up false;
   
       mem false; 
       cpu false;
       net false;

       mem_alloc 512;
       cpu_alloc 100;
       net_alloc 10;

       handlestarvation extends DynamicPolicyEvaluation {
          sfGuard (LAZY up && ((LAZY cpu) || (LAZY mem) || (LAZY net)));

          eval extends LazyConstraint {
              cpu LAZY si_observed:cpu;
              mem LAZY si_observed:mem;
              net LAZY si_observed:net;
	      cpu_alloc LAZY si_observed:cpu_alloc;
	      mem_alloc LAZY si_observed:mem_alloc;
	      net_alloc LAZY si_observed:net_alloc;
	      cpu_new VAR;
	      mem_new VAR;
	      net_new VAR;
	      [sfConstraint] -- "compute_allocation(cpu, cpu_alloc, cpu_new, mem, mem_alloc, mem_new, net, net_alloc, net_new)";
	  }

	  sfEffects extends  {
		 [sfSource] -- LAZY si_observed;
		 [sfPath] -- LAZY cpu_alloc;
		 [sfUpdate] -- LAZY eval:cpu_new;

		 [sfSource] -- LAZY si_observed;
		 [sfPath] -- LAZY mem_alloc;
		 [sfUpdate] -- LAZY eval:mem_new;

		 [sfSource] -- LAZY si_observed;
		 [sfPath] -- LAZY net_alloc;
		 [sfUpdate] -- LAZY eval:net_new;

		 mem false;
		 cpu false;
		 net false;
	  }
       }
   }

   observedStartDependency extends Dependency {
      on LAZY si_desired;
      by LAZY si_observed;
      relevant (!LAZY by:up);
      enabled (LAZY on:up);
   }

   observedStopDependency extends Dependency {
      on LAZY si_desired;
      by LAZY si_observed;
      relevant (LAZY by:up);
      enabled (!LAZY on:up);
   }

   loadbalancerStartDependency extends Dependency {
      on LAZY si_observed;
      by LAZY loadbalancer;
      relevant (!LAZY by:up);
      enabled (LAZY on:up);      
   }

   loadbalancerStopDependency extends Dependency {
      on LAZY si_desired;
      by LAZY loadbalancer;
      relevant (LAZY by:up);
      enabled (!LAZY on:up);
   }
}

LoadBalancerBinding extends BaseStateComponent {
   name sfTag;
   sfClass "org.smartfrog.examples.orchdws.sf.LoadBalancerBinding";      

   observedDependency extends Dependency {
      on LAZY PARENT;
      by LAZY servers;
      sfByPath LAZY si_observed; 
      relevant (LAZY by:up);
      enabled (!LAZY on:up);
   } 
}

EnableDisableComponent extends {
   [sfSource] -- LAZY servers;
   [sfPrefix] -- "server";
   [sfPath] -- LAZY si_desired:up; 
   [sfPred] proposition;
   [sfUpdate] update false;
}

EnableComponent extends EnableDisableComponent {
   proposition ((LAZY sfIndex < LAZY minInstances) || (LAZY sfIndex == (LAZY noserversUp)));
   update true;
}

DisableComponent extends EnableDisableComponent {
   proposition (((LAZY sfIndex)+2) > (LAZY noserversUp));
}

Shutdown extends EnableDisableComponent;

sfConfig extends Model {
   -- extends Array {
      sfExtent maxInstances;
      sfPrefix "PARENT:servers:server";
      sfGenerator extends ArrayGenerator, ServerInstance;
   }

   -- extends Array {
      sfExtent maxInstances;
      sfPrefix "PARENT:loadbalancer:server";	
      sfGenerator extends ArrayGenerator, LoadBalancerBinding;
   }

   servers extends Composite;
   loadbalancer extends Composite;

   manager extends StateComponent { 
      sfClass "org.smartfrog.examples.orchdws.sf.ServiceManager";
      name "manager";
      up false;

      violation true;  //to bring up minimum 
      upperviolation true; //to bring up minimum 

      tinupperviolation extends Transition {
        sfGuard (! LAZY violation);
	sfEffects extends {
	   violation true;
           upper true;
	}
      }

      tinlowerviolation extends Transition {
        sfGuard (! LAZY violation);
	sfEffects extends {
	   violation true;
           upper false;
	}
      }

      tnoviolation extends Transition {
        sfGuard (LAZY violation);
	sfEffects extends {
	   violation false;
	}
      }

      handleupper extends DynamicPolicyEvaluation {
          [sfGuard] -- (LAZY up);
          [sfGuard] -- (LAZY violation);
          [sfGuard] -- (LAZY upperviolation);
          sfGuard  ((LAZY noserversUp) < maxInstances);
	  sfEffects extends EnableComponent;
          [sfEffects] -- extends {
             violation false;
	  }
      }

      handlelower extends DynamicPolicyEvaluation {
          [sfGuard] -- (LAZY up);
          [sfGuard] -- (LAZY violation);
          [sfGuard] -- (! LAZY upperviolation);
	  sfGuard ((LAZY noserversUp) > minInstances );
          sfEffects extends DisableComponent;
          [sfEffects] -- extends {
             violation false; 
	  }
      }
	  

      handleshutdown extends DynamicPolicyEvaluation {
          [sfGuard] -- (!LAZY up);      
          sfGuard ((LAZY noserversUp)>0);
          sfEffects extends Shutdown;
      }
   }

   maxInstances 5;
   minInstances 2;
   
   noservers extends LazyConstraint {
      [sfSource] -- LAZY servers;
      [sfPrefix] -- "server";
      [sfPath] -- LAZY si_observed:up;
      [sfPred] proposition true;
      [sfUpdate] input;
      [sfReturn] size VAR;
      [sfConstraint] -- "length(input, size)";
   }   
   
   noserversUp extends noservers {
      proposition (LAZY si_observed:up==true);
   }


}



