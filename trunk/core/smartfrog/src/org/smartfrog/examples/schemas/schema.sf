/** (C) Copyright 1998-2004 Hewlett-Packard Development Company, LP

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

For more information: www.smartfrog.org

*/

/**
 * Includes the definition of schemas.
 */
#include "/org/smartfrog/predicates.sf"
#include "/org/smartfrog/components.sf"

/**
 * WARNING: these examples are not deployable - they are merely to demonstrate
 * the use of the schemas.
 */


GraphSchema extends Schema {
        sfSchemaDescription "A component which renders a value-time graph given a data source interface";

        max extends Integer { description "value-axis maximum"; }
        min extends Integer { description "value-axis minimum"; }
        frequency extends Integer { description "gap between requests for data (in milliseconds)"; }
        title extends OptionalString {description "the title of the graph"; }

        source extends Compulsory {
            binding "lazy";
            class "org.smartfrog.examples.someExample.DataSource";
            description "the source of data to graph";
        }
}


Graph extends Prim {
        schema extends GraphSchema;

        sfClass "org.smartfrog.examples.someExample.graphClass";
        min 0;
        max 100;
        frequency 500;
}



DataSourceSchema extends Schema {
        sfSchemaDescription "A data source interface";
        frequency extends Integer { description "gap between refreshing data (in milliseconds)"; }
}


CPUDataSchema extends Schema {
        sfSchemaDescription "Provides data about CPU loading";
}


ThreadDataSchema extends Schema {
        sfSchemaDescription "Provides data about threads that are related to a specific executable";
        execName extends String { description "the name of the executable of interest"; }
}


CPUMonitor extends Prim {
        dataSchema extends DataSourceSchema;
        cpuSchema extends CPUDataSchema;

        sfClass "org.smartfrog.examples.someExample.CpuMonitor";
        frequency 500;
}


ThreadMonitor  extends Prim {
        dataSchema extends DataSourceSchema;
        threadSchema extends ThreadDataSchema;

        sfClass "org.smartfrog.examples.someExample.ThreadMonitor";
        frequency 500;
}



MonitorSystem extends Compound {
        schema extends Schema{
            sfSchemaDescription "A graphed CPU and Thread monitor";
            execName extends String { description "the name of the executable of interest"; }
        }

        threadMonitor extends ThreadMonitor {
            execName LAZY PARENT:ATTRIB execName;
        }

        threadGraph extends Graph {
            source LAZY ATTRIB threadMonitor;
        }

        cpuMonitor extends CPUMonitor;

        cpuGraph extends Graph {
            title "cpu load graph";
            source LAZY ATTRIB cpuMonitor;
        }
}

/**
 * The example that shows the use of schemas in SmartFrog System.
 */
sfConfig extends MonitorSystem {
        execName "java";
}
