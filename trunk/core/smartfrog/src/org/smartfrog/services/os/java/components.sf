/** (C) Copyright 1998-2004 Hewlett-Packard Development Company, LP

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

For more information: www.smartfrog.org

*/

#include "/org/smartfrog/components.sf"
#include "/org/smartfrog/predicates.sf"
#include "/org/smartfrog/services/os/runshell/components.sf"
#include "/org/smartfrog/services/filesystem/components.sf"

JavaPackage extends Prim {

    sfClass "org.smartfrog.services.os.java.JavaPackageImpl";

    javaPackageSchema extends Schema {
        //list of files, packages or URLs
        source extends OptionalVector;
        //a string classpath that is generated automatically
        //classes to look for
        requiredClasses extends OptionalVector;
        requiredResources extends OptionalVector;
        useCodebase extends Boolean;

        //classpath extends OptionalString;
        //classpathList extends OptionalVector;
        //uriClasspath extends OptionalString;
        //uriClasspathList extends OptionalVector;

    }

    //we use the codebase
    useCodebase false;

}


/**
 * a java package that is in the codebase;
 */
JavaPackageInCodebase extends JavaPackage {
    useCodebase true;
}


JavaSchema extends Schema {
    classname extends OptionalString;
    jar extends OptionalString;
    maxMemory extends OptionalInteger;
    environment extends OptionalVector;
    sysProperties extends OptionalVector;
    endorsedDirs extends OptionalVector;
    classpath extends OptionalVector;
    assertions extends OptionalBoolean;
    jvmargs extends OptionalVector;
    jvm extends String;
    arguments extends OptionalVector;
}

Java extends ExecuteProgram {
    javaSchema extends JavaSchema;
    sfClass "org.smartfrog.services.os.java.RunJavaImpl";
    assertions false;
    jvm "java";
    //bind the shell command to the jvm command
    shellCmd ATTRIB jvm;
}


// not used
/*
Repository extends Prim {
     repositorySchema extends Schema {
        url extends String;
    }
}
*/

/**
 * at deploy time, we fetch libraries from the repository, if needed
 */
Libraries extends Compound {
    sfClass "org.smartfrog.services.os.java.LibrariesImpl";
    librariesSchema extends Schema {
        repositories extends Vector;
        //cache dir; is created if needed
        cacheDir extends Optional;
        //runtime elements
        //libraries extends Vector
        //librariesCodebase extends String
    }
}

/**
 * Maven repository at ibiblio.org. Really we should permit mirrors; or include
 * the mirror list for easy selection.
 */
MavenLibraries extends Libraries {

    //maven repository
    repositories [| "http://ibiblio.org/maven" |];

    //cache into the well known maven location
    cacheDir extends File {
        //JVM property user.home
        dir LAZY PROPERTY user.home;
        //subdir
        filename ".maven/repository";
    }

}


/**
 * This is something that you can download
 * from a repository.
 * After deployment, it has an absolutePath attribute.

 * It will only successfully deploy if
 *  owner!=null
 * or
 *  it has an ancestor that implements the Libraries interface.
 * In which case it takes that component as its repository.
 */

LibraryArtifact extends FileUsingComponent {
    sfClass "org.smartfrog.services.os.java.LibraryArtifactImpl";
    librarySchema extends Schema {
        repository extends Optional;
        project extends String;
        artifact extends String;
        extension extends String;
        version extends OptionalString;
        //true or false
        synchronousDownload extends Boolean;

        sha1 extends OptionalString;
        //MD5 is not as secure as sha1, but is retained because the md5 values
        //of maven artifacts are so common.
        md5 extends OptionalString;
    }
    artifact ATTRIB project;
    synchronousDownload false;
    //implict request for sha1 generation. Call it a hint :)
    sha1 "";
}

/**
 * JAR artifacts have a well known extension
 */
JarArtifact extends LibraryArtifact {
    extension ".jar";
}

/**
 * A Maven JAR is autobound to the big maven repository on the network
 */
MavenJar extends JarArtifact  {
    owner MavenLibraries;
}
