/** (C) Copyright 1998-2004 Hewlett-Packard Development Company, LP

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

For more information: www.smartfrog.org

*/
#include "/org/smartfrog/components.sf"
#include "/org/smartfrog/predicates.sf"




/**
 * something which takes filenames
 */
FileUsingComponentSchema extends Schema {
    /*
        Can be either a string, or a reference to a component
        that implements FileIntf.
    */
    file extends Optional;

    /* added at deploy time
    absolutePath: String
    URI: String
    */
}

DeletableFileSchema extends Schema {
    //delete flag
    deleteOnExit extends OptionalBoolean;
}


/**
 * platform independent file
 * set the name and optionally the dir; get the absolute path in a
 * platform independent manner
 *
 * The mustXXX attributes are characteristics of the files which must always hold
 */


FileSchema extends Schema {

    //name of a file
    filename extends OptionalString;

    //a directory
    dir extends OptionalString;

    //file must always exist
    mustExist extends OptionalBoolean;
    //the process must have read access
    mustRead  extends OptionalBoolean;
    //the file must be writeable
    mustWrite  extends OptionalBoolean;
    //test for being a file during liveness checks
    mustBeFile   extends OptionalBoolean;

    //test for being a file during deployment
    mustBeDir  extends OptionalBoolean;

    //flag to say when to test
    testOnStartup extends  OptionalBoolean;

    //flag to say when to test
    testOnLiveness extends  OptionalBoolean;


    /* added at deploy time
    exists: Boolean
    absolutePath: String
    uri: String
    isFile
    isDirectory
    isHidden
    timestamp: long
    length: long
    isEmpty: bool

    */

}

File extends Prim {
    fileSchema extends Schema;
    sfClass "org.smartfrog.services.filesystem.FileImpl";
    testOnDeploy false;
    testOnLiveness true;
}



/**
 * this can not be instantiated
 */
FileUsingComponent extends Prim {
    fileUsingComponentSchema extends FileUsingComponentSchema;
}

/**
 * touch file schema
 */
TouchFileSchema extends FileUsingComponentSchema {

    /*
        filename; this must be in a platform-specific format, or
        a reference to a file
    */
    filename extends Optional;

    /**
     age of file, seconds since 1970-01-01; a value of -1 indicates
     current timestamp, as does omitting the value
     */
    timestamp extends OptionalLong;
}

/**
 * the TouchFile component exits immediately after creation.
 * it takes a file and an age
 */
TouchFile extends Prim {
    touchFileSchema extends TouchFileSchema;
    sfClass "org.smartfrog.services.filesystem.TouchFileImpl";
}

/**
 * tempfile
 */
TempFileSchema extends DeletableFileSchema {
    //prefix should be three or more characters long
    prefix extends String;
    //suffix, like ".tmp"
    suffix extends OptionalString;
    //a directory. If not specified, the temp directory for this JVM will
    //be used.
    dir extends OptionalString;
}

/**
 * the temp file component creates a temporary file on deployment.
 */
TempFile extends FileUsingComponent {
    tempFileSchema extends TempFileSchema;
    sfClass "org.smartfrog.services.filesystem.TempFileImpl";
}

/**
 * A temp file which auto cleans up
 */
TempFileWithCleanup extends TempFile {
    deleteOnExit true;
}

MkdirSchema extends Schema {
    //file is a file or a string.
    dir extends Compulsory;
}

/**
 * mkdir creates a directory where one did not exist before.
 * and does nothing if it did.
 * deployment fails if the directory name exists and is not a directory.
 * Note: no checks for writeability are made
 */
Mkdir extends Prim {
    mkdirSchema extends MkdirSchema;
    sfClass "org.smartfrog.services.filesystem.MkdirImpl";
}

/**
 * A text file represents a file that is given the predefined text
 * on deployment. It is retained after the end of deployment. To create
 * transient files, link it to a temporary file
 */

TextFileSchema extends DeletableFileSchema {
    //text to write out
    text extends String;
    //encoding of the optional text. Only needed when text is set
    encoding extends String;
}


TextFile extends FileUsingComponent {
    textFileSchema extends TextFileSchema;
    sfClass "org.smartfrog.services.filesystem.TextFileImpl";

    //default encoding is utf8
    encoding "UTF-8";
}

/**
 * this identifies a file (not a directory; a file) which
 * is deleted when the component is terminated.
 */

SelfDeletingFile extends FileUsingComponent {
    deletableFileSchema extends DeletableFileSchema;
    sfClass "org.smartfrog.services.filesystem.SelfDeletingFileImpl";
    deleteOnExit true;
}

