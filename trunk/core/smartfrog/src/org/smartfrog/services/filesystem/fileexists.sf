/** (C) Copyright 2007 Hewlett-Packard Development Company, LP

 This library is free software; you can redistribute it and/or
 modify it under the terms of the GNU Lesser General Public
 License as published by the Free Software Foundation; either
 version 2.1 of the License, or (at your option) any later version.

 This library is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General Public
 License along with this library; if not, write to the Free Software
 Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

 For more information: www.smartfrog.org

 */

#include "/org/smartfrog/services/filesystem/filesystemtemplate.sf"
#include "/org/smartfrog/sfcore/workflow/conditional/conditional.sf"

/**
 * This is a condition that tests for a file existing.
 * You can set a minimum size, which, if >=0, is triggers
 * a check of the file size -the condition will fail if the
 * file size is less than this value.
 *
 * The canBeDir declares that the file can be a directory; it fails if it is a directory and this
 * attribute is false.
 *
 * The canBeFile declares that the file can be a simple file; it fails if it is a file and this
 * attribute is false.
 */

FileExists extends Conditional {
  sfClass "org.smartfrog.services.filesystem.FileExistsImpl";
  FileExistsSchema extends FileUsingComponentSchema {
      //the minimum size
      minSize extends Integer;

      /**
       *  Boolean to indicate the file can be a directory: {@value}
       */
      canBeDirectory extends Boolean;

      /**
       * Boolean to indicate the file can be a file:{@value}
       */
      canBeFile  extends Boolean;
  }



  //no minimum size check.
  minSize -1;
  canBeDirectory true;
  canBeFile true;
}


/**
 * A condition that asks for a directory
 */
DirectoryExists extends FileExists {
  canBeFile false;
}