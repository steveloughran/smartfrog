/** (C) Copyright 1998-2004 Hewlett-Packard Development Company, LP

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

For more information: www.smartfrog.org

*/

#include "/org/smartfrog/predicates.sf"

/**
 * Include the core smartfrog components.
 */
#include "/org/smartfrog/components.sf"

/**
 * base webserver declarations
 */
#include "/org/smartfrog/services/www/webserver.sf"

/**
 * declare a base Java app server.
 * This is not instantiable, and must be implemented by an
 * application server
 */

ApplicationServer extends WebServer {

ApplicationServerSchema extends Schema {

    //attribute that is to be set only if WAR deployment is supported
    supportsWAR extends Boolean;
    //attribute true iff servlet contexts are supported
    supportsServletContext extends Boolean;
    //attribute true iff EAR deployment is supported
    supportsEAR extends Boolean;

    }

}

/**
 * This schema is required for anything that is deployed
 * to an app server that is its own 'context'
 */
ApplicationServerContextSchema extends Schema {

    //application server. required.
    server extends CD;
    //late binding information
    absolutePath extends OptionalString;
}

/**
 * Base application server context. This is not instantiable
 */
ApplicationServerContext extends Prim {
    applicationServerContextSchema extends applicationServerContextSchema;
}


/**
 * a jetty web application has a context path
 * and a a path to its home directory
 */
WebApplicationSchema extends Schema {
    //where to deploy under the server
    contextPath extends String;

    //warFile can be a File or a string
    warFile extends FilenameType;

}

/**
 * This is a generic java web application, as defined by a WAR File
 */
WebApplication extends applicationServerContext {
    webApplicationSchema extends WebApplicationSchema;
}


/**
 * a jetty servlet context is a compound
 * with a resource base
 * It defines something to be deployed on a jetty server
 */

ServletContext extends ApplicationServerContext {

    servletContextSchema extends Schema {
        //location of resources
        resourceBase extends String;
        //url path on server
        contextPath extends String;
    }

}



/**
 * this servlet declaration defines
 * the servlet information
 */
ServletSchema extends Schema {
    name extends String;
    pathSpec extends String;
    className extends String;
    mappings extends OptionalVector;
    initParams extends OptionalVector;
    //init order for the servlet;
    //Holders with order<0, are initialized on use.
    //Those with order>=0 are initialized in increasing order when the handler is started
    initOrder extends OptionalInteger;
}

/**
 * declare an abstract servlet
 */
Servlet extends Prim {
    servletSchema extends ServletSchema;

    //initialise on use
    initOrder -1;

}




/**
 A mime is a tuple of name,value. that is bound to a servlet context
 It does not get cleaned up after; you need to terminate the servlet
 */

MimeType extends Prim {
    sfClass "org.smartfrog.services.www.MimeTypeImpl";

    mimeTypeSchema extends Schema {
        extension extends String;
        type extends String;
    }
}


