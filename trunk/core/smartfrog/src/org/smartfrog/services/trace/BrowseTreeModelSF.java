/** (C) Copyright 1998-2004 Hewlett-Packard Development Company, LP

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

For more information: www.smartfrog.org

*/

package org.smartfrog.services.trace;

import java.util.Vector;

import javax.swing.event.TreeModelListener;
import javax.swing.tree.TreeModel;
import javax.swing.tree.TreePath;


/**
 *  Tree model to show a graphical reprsentation of Tracing information
 *  generated by SFTRace
 */
public class BrowseTreeModelSF implements TreeModel {
    /** BrowserEntry object. */
    BrowserEntry entry = null;

    /**
     * A vector of TreeModelListeners.
     */
    protected Vector listeners;

    //  public void DefaultTreeModel(){
    //      listeners = new Vector();
    //
    //  }

    /**
     *  Constructor for the BrowseTreeModelSF object.
     */
    public BrowseTreeModelSF() {
        entry = new BrowserEntry("ROOT");
        listeners = new Vector();
    }

    /**
     *  Constructor for the BrowseTreeModelSF object.
     *
     *@param  DN  dN attribute
     */
    public BrowseTreeModelSF(String DN) {
        entry = new BrowserEntry(DN);
        listeners = new Vector();
    }

    /**
     *  Gets the root attribute of the BrowseTreeModelSF object.
     *
     * @return    The root value
     */
    public Object getRoot() {
        //System.out.println("getRoot():"+entry);
        return entry;
    }

    /**
     *  Implements getChild () method defined in java swing TreeModel.
     *
     * @param  parent  parent
     * @param  index   index
     * @return         The child value
     */
    public Object getChild(Object parent, int index) {
        if (parent instanceof BrowserEntry) {
            BrowserEntry auxEntry = (BrowserEntry) parent;

            //System.out.println("getChild():["+index+"/"+parent+"]"+auxEntry.
        //getChild(index));
            return auxEntry.getChild(index);
        } else {
            return ("error:" + parent);
        }
    }

    /**
     *  Gets the childCount attribute of the BrowseTreeModelSF object.
     *
     * @param  parent  parent
     * @return         The childCount value
     */
    public int getChildCount(Object parent) {
        if (parent instanceof BrowserEntry) {
            BrowserEntry auxEntry = (BrowserEntry) parent;

            //System.out.println("getChildCount():"+auxEntry.
        //getChildrenCount());
            return auxEntry.getChildrenCount();
        } else {
            return 0;
        }
    }

    /**
     *  Gets the leaf attribute of the BrowseTreeModelSF object.
     *
     * @param  node  the node whose leaf attribute is returned
     * @return       The leaf value
     */
    public boolean isLeaf(Object node) {
        if (node instanceof BrowserEntry) {
            //System.out.println("isLeaf():("+node+")"+"/"+((BrowserEntry)node)
        //.isLeaf()+"/"+((BrowserEntry)node).toStringAll());
            return ((BrowserEntry) node).isLeaf();
        } else {
            return false;
        }
    }

    /**
     *  Changes the value of the path.
     *
     *@param  path     the path
     *@param  newValue  new value
     */
    public void valueForPathChanged(TreePath path, Object newValue) {
        /**
         *@todo:    Implement this javax.swing.tree.TreeModel method
         */
        throw new java.lang.UnsupportedOperationException(
            "Method valueForPathChanged() not yet implemented.");
    }

    /**
     *  Gets the indexOfChild attribute of the BrowseTreeModelSF object.
     *
     * @param  parent  parent
     * @param  child   child
     * @return         The indexOfChild value
     */
    public int getIndexOfChild(Object parent, Object child) {
        for (int i = 0; i < getChildCount(parent); i++) {
            if (getChild(parent, i).equals(child)) {
                return i;
            }
        }

        return -1;
    }

    /**
     *  Implements addTreeModelListener () method defined in java swing
     *  TreeModel.
     *
     * @param  l  The feature to be added to the TreeModelListener attribute
     *
     * @see #removeTreeModelListener
     */
    public void addTreeModelListener(TreeModelListener l) {
        if ((l != null) && !listeners.contains(l)) {
            listeners.addElement(l);
        }
    }

    /**
     *  Implements removeTreeModelListener () method defined in java swing
     *  TreeModel.
     *
     * @param  l  TreeModelListener object
     *
     * @see #addTreeModelListener
     */
    public void removeTreeModelListener(TreeModelListener l) {
        listeners.removeElement(l);
    }

    /**
     *  Adds a new node.
     *
     * @param  node  node to be added
     */
    public void add(String node) {
        entry.add(node);
    }

    /**
     *  Return a textual representation of the File object.
     *
     * @return   textual representation of the File object
     */
    public String toString() {
        return entry.toStringAll();
    }
}
