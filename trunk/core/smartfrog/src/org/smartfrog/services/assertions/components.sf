/** (C) Copyright 1998-2004 Hewlett-Packard Development Company, LP

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

For more information: www.smartfrog.org

*/

/*
 this file declares assertions
 */



 /**
  * Include the core smartfrog components.
  */
 #include "/org/smartfrog/components.sf"
 #include "/org/smartfrog/predicates.sf"
 #include "/org/smartfrog/services/assertions/testcomponents.sf"
 #include "/org/smartfrog/services/assertions/testblock.sf"


/**
 * the schema for assertions
 */
AssertSchema extends Schema {
    //a fact that must resolve to true
    isTrue extends OptionalBoolean;
    //a fact that must be fale
    isFalse extends OptionalBoolean;

    //a string message
    message extends OptionalString;

    //the name of a reference which does not have to be defined, but when it
    //is, the evaluatesTrue and evaluatesFalse checks apply
    reference extends OptionalCD;
    //name of a boolean test() method that returns true when called on the reference
    evaluatesTrue extends OptionalString;
    //name of a boolean test() method that returns false when called on the reference
    evaluatesFalse extends OptionalString;
    //name of an attribute on the reference
    attribute extends OptionalString;

    //name of a value attribute on that reference
    attributeEquals extends OptionalString;

    //value of a vector element to test
    attributeVectorValue extends OptionalString;
    //the index to look for
    attributeVectorIndex extends OptionalInteger;

    //name of a file to probe for
    fileExists extends OptionalString;
    //name of a directory to probe for
    dirExists extends OptionalString;


    //two strings to compare.
    equalsString1 extends OptionalString;
    equalsString2 extends OptionalString;

    equalityIgnoresCase extends Boolean;

    //flag to enable startup checking (default: true)
    checkOnStartup extends OptionalBoolean;
    //flag to enable liveness checking (default: true)
    checkOnLiveness extends OptionalBoolean;
}

/**
 * the assert component can be used to declare invariants which
 * must hold for the system to be valid
 */
Assert extends WorkflowPrim {
    assertSchema extends Schema;
    sfClass "org.smartfrog.services.assertions.AssertComponent";
    isTrue true;
    isFalse false;
    checkOnStartup true;
    checkOnLiveness true;
    equalityIgnoresCase false;
}


/**
 * This is a component that will fail on demand. 
 * Its original role was for testing workflows such as repeat, retry, etc,
 * but users may find other uses for the component, taking advantage of
 * its conditional failure and ability to choose a normal or abnormal
 * termination.
 * Its very useful for testing that composite components handle
 * all expected outcomes.
 *
 * Failure is triggered in a separate thread than the one that
 * executes sfStart; it will delay a specified number of seconds, <=0
 * means 'no delay'
 */
Fail extends Prim {
  sfClass "org.smartfrog.services.assertions.FailComponent";
  failSchema extends Schema {
    //exit message
    message extends String;
    //should the failure be a normal or abnormal termination
    normal extends Boolean;
    //expression that must evaluate to true to trigger failure
    condition extends Boolean;
    //delay in seconds before termination.
    delay extends Integer;
    //should we detach from our parent
    detach extends Boolean;
    //notify the parent?
    notifyParent extends Boolean;
  }

  message "Failure Component initiating termination";
  normal true;
  condition true;
  delay 0;
  detach false;
  notifyParent true;
}

/**
 * this is an abnormal failure
 */
FailAbnormal extends Fail {
  normal false;
}
 

/**
 * A component to create and throw an exception at startup time
 * A RuntimeException, RemoteException or SmartFrog exception is thrown as is.
 * Any other kind of exception is wrapped by a SmartFrog exception.
 *
 * This is clearly a test component; its aim in life is to force suprises on containers
 * and to see how they handle such things in a replicable manner.
 */
ExceptionThrower extends Prim {
  schema extends Schema {
    classname extends String;

    message extends OptionalString;

    }
  sfClass "org.smartfrog.services.assertions.ExceptionThrowerImpl";
}

NullPointerException extends ExceptionThrower {
  classname "java.lang.NullPointerException";
}


SmartFrogException extends ExceptionThrower {
  classname "org.smartfrog.sfcore.common.SmartFrogException";
}

RemoteException extends ExceptionThrower {
  classname "java.rmi.RemoteException";
  message "simulated remote exception";
}

FileNotFoundException extends ExceptionThrower {
  file "";
  classname "java.io.FileNotFoundException";
  message ("Missing file "++file);
}