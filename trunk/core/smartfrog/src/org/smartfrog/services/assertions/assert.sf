/** (C) Copyright 1998-2004 Hewlett-Packard Development Company, LP

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

For more information: www.smartfrog.org

*/

/*
 This file declares an assertion component.
 This component can be deployed standalone, in which
 case it checks invariants during startup and liveness, and raises an exception if any condition is not
 met.
 If deployed as a condition, it evaluates to true if every assertion made in the component holds.
 */



 /**
  * Include the core smartfrog components.
  */
#include "/org/smartfrog/components.sf"
#include "/org/smartfrog/predicates.sf"


/**
 * the schema for assertions
 */
AssertSchema extends Schema {
    //a fact that must resolve to true
    isTrue extends OptionalBoolean;
    //a fact that must be fale
    isFalse extends OptionalBoolean;

    //a string message
    message extends OptionalString;

    //the name of a reference which does not have to be defined, but when it
    //is, the evaluatesTrue and evaluatesFalse checks apply
    reference extends OptionalCD;
    //name of a boolean test() method that returns true when called on the reference
    evaluatesTrue extends OptionalString;
    //name of a boolean test() method that returns false when called on the reference
    evaluatesFalse extends OptionalString;
    //name of an attribute on the reference
    attribute extends OptionalString;

    //name of a value attribute on that reference
    attributeEquals extends OptionalString;

    //value of a vector element to test
    attributeVectorValue extends OptionalString;
    //the index to look for
    attributeVectorIndex extends OptionalInteger;

    //name of a file to probe for
    fileExists extends OptionalString;
    //name of a directory to probe for
    dirExists extends OptionalString;


    //two strings to compare.
    equalsString1 extends OptionalString;
    equalsString2 extends OptionalString;

    equalityIgnoresCase extends Boolean;

    //flag to enable startup checking (default: true)
    checkOnStartup extends OptionalBoolean;
    //flag to enable liveness checking (default: true)
    checkOnLiveness extends OptionalBoolean;
}

/**
 * the assert component can be used to declare invariants which
 * must hold for the system to be valid
 */
Assert extends WorkflowPrim {
    assertSchema extends Schema;
    sfClass "org.smartfrog.services.assertions.AssertComponent";
    isTrue true;
    isFalse false;
    checkOnStartup true;
    checkOnLiveness true;
    equalityIgnoresCase false;
}

/**
 * Define the assertion check as a condition
 */
AssertCondition extends Assert {
    checkOnStartup false;
    checkOnLiveness false;
}
