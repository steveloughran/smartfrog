/** (C) Copyright 2006 Hewlett-Packard Development Company, LP

Disclaimer of Warranty

The Software is provided "AS IS," without a warranty of any kind. ALL
EXPRESS OR IMPLIED CONDITIONS, REPRESENTATIONS AND WARRANTIES,
INCLUDING ANY IMPLIED WARRANTY OF MERCHANTABILITY, FITNESS FOR A
PARTICULAR PURPOSE, OR NON-INFRINGEMENT, ARE HEREBY
EXCLUDED. SmartFrog is not a Hewlett-Packard Product. The Software has
not undergone complete testing and may contain errors and defects. It
may not function properly and is subject to change or withdrawal at
any time. The user must assume the entire risk of using the
Software. No support or maintenance is provided with the Software by
Hewlett-Packard. Do not install the Software if you are not accustomed
to using experimental software.

Limitation of Liability

TO THE EXTENT NOT PROHIBITED BY LAW, IN NO EVENT WILL HEWLETT-PACKARD
OR ITS LICENSORS BE LIABLE FOR ANY LOST REVENUE, PROFIT OR DATA, OR
FOR SPECIAL, INDIRECT, CONSEQUENTIAL, INCIDENTAL OR PUNITIVE DAMAGES,
HOWEVER CAUSED REGARDLESS OF THE THEORY OF LIABILITY, ARISING OUT OF
OR RELATED TO THE FURNISHING, PERFORMANCE, OR USE OF THE SOFTWARE, OR
THE INABILITY TO USE THE SOFTWARE, EVEN IF HEWLETT-PACKARD HAS BEEN
ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. FURTHERMORE, SINCE THE
SOFTWARE IS PROVIDED WITHOUT CHARGE, YOU AGREE THAT THERE HAS BEEN NO
BARGAIN MADE FOR ANY ASSUMPTIONS OF LIABILITY OR DAMAGES BY
HEWLETT-PACKARD FOR ANY REASON WHATSOEVER, RELATING TO THE SOFTWARE OR
ITS MEDIA, AND YOU HEREBY WAIVE ANY CLAIM IN THIS REGARD.

*/


 /**
  * Include the core smartfrog components.
  */
#include "/org/smartfrog/sfcore/workflow/combinators/sequence.sf"



/*
 this file declares components that can act as test deployers.

 This isthe

 */


TestCompound extends ActionCompound {
  TestCompoundSchema extends Schema {
    description extends String {
      description "description of the test";
    }
    undeployAfter extends Integer {
      description "time in milliseconds to undeploy the action and assertions; use -1 for no limit";
    }
    exitType extends String {
      description "string which must be found in the termination errortype attribute using a case sensitive match";
    }
    exitText extends String {
      description "string which must be found in the TerminationRecord.description attribute using a case sensitive match";
    }
    startupTimeout extends Integer {
      description "time in milliseconds to trigger an exception if the component is not started; use -1 for no limit";
    }
    expectTerminate extends Boolean {
      description "is the action component expected to terminate itself?";
    }
    tests extends OptionalCD {
      description ##A component that is deployed after the action component is successfully deployed,
        and which contains tests or assertions to deploy.
        The components is only deployed if the action deployment was successful.
        1. If this component terminates successfully, then the test is deemed to be successful, and
        the TestCompound terminates the tests and runs teardown.
        2. If this component does not terminate, then it is kept running (and pinged during pings)
        until the action terminates or the test is undeployed.
        #;
    }
    testTimeout extends Integer {
      description ##
        time in milliseconds to trigger an exception if the tests do not finish;
        use -1 for no limit"
        #;
    }
    teardown extends OptionalCD {
      description ##a component that is run after the tests pass/fail
        to perform teardown or post-process.
        the action will always have been terminated (cleanly or not) by the time this component is deployed.
        NOT IMPLEMENTED
        #;
    }
    teardownTimeout extends OptionalInteger {
      description ##
        time in milliseconds to complain if the undeploy of the action component
        or the execution of the teardown component took too long; use -1 for no limit
        NOT IMPLEMENTED
        #;
    }
    forcePing extends Boolean {
//        NOT IMPLEMENTED
      description "should we force a set of pings?";
    }
    pingInterval extends OptionalInteger {
//        NOT IMPLEMENTED
      description "time in milliseconds between forced pings";
    }

   }
  sfClass "org.smartfrog.services.assertions.TestCompoundImpl";
   //by default, this is a workflow component
  sfShouldTerminate true;
  description "";

  //default to one minute
  undeployAfter 60000;
  //no delay by default
  testTimeout -1;
  //default to one minute
  startupTimeout 60000;
  //default to one minute
  teardownTimeout 60000;

  //dont expect termination
  expectTerminate false;

  exitType "normal";
  exitText "";

  forcePing false;
}

/**
 * this component expects the child to deploy
 */
ExpectDeploy extends TestCompound {

}

DeploySequence extends TestCompound {

}

/**
 * this component expects the child to terminate itself normally.
 */
ExpectTerminate extends TestCompound {
  description "Expect the deployed action to terminate itself normally, as a successful workflow";
  expectTerminate true;
  exitType "normal";
}

/**
 * an abstract component to represent failures
 */
FailingTestCompound extends TestCompound {

  description "The deployment is expected to fail";

  FailureCompoundSchema extends Schema {

    exceptions extends OptionalVector {

      description ##vector of tuples containing classname and error text substrings to match on,
        all down the nested exception chain. e.g.
        [["SmartFrogResolutionException","unresolved reference"]];
        or
        [["",""],["NullPointerException",""];
      #;
    }
  }

  expectTerminate true;
  exitType "abnormal";
}


/**
 * This component expects failure on deployment
 */
ExpectDeployFailure extends FailingTestCompound {

}



/**
 * This component expects to deploy, but for liveness tests to fail.
 * The component will run through a set of sfPings() to force this earlier than normal,
 * if forcePing==true
 */
ExpectLivenessFailure extends FailingTestCompound {

  forcePing true;
  pingInterval 0;
}
