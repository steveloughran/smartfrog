/** (C) Copyright 1998-2004 Hewlett-Packard Development Company, LP

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

For more information: www.smartfrog.org

*/
#include "org/smartfrog/components.sf"
#include "org/smartfrog/services/dependencies/legacy/statemodel/components.sf"
#include "org/smartfrog/services/dependencies/threadpool/components.sf"

ManagedEntity extends State {
   sfClass "org.smartfrog.services.dependencies.legacy.examples.ManagedEntity";

   [stateData, stateNotify] created false;
   [stateData, stateNotify] removed false;
   [stateData] sink false;
   [stateData] name "default";
}

createdDependency extends Dependency {
   enabled LAZY on:created;
   relevant (! LAZY by:created);
}

removedDependency extends Dependency {
   enabled LAZY on:removed;
   relevant LAZY by:created;
}
 
ManagedEntities extends Model {
   run true;

   foo0 extends ManagedEntity{
      [stateListen] -- LAZY foo1:removed;  
      name "foo0";
   }

   foo1 extends ManagedEntity{
      [stateListen] -- LAZY foo2:removed;  
      [stateListen] -- LAZY foo0:created;  
      name "foo1";
   }
   
   foo2 extends ManagedEntity{
      [stateListen] -- LAZY foo1:created;  
      sink true;
      name "foo2";
   }

   finished extends ModelTerminator {
      required LAZY foo0:removed;
      detachfirst true;  //remove
   }
   
   foo0Created extends createdDependency {
      on LAZY foo0;
      by LAZY foo1;
   }

   foo1Created extends createdDependency {
      on LAZY foo1;
      by LAZY foo2;
   }

   foo2Removed extends removedDependency {
      on LAZY foo2;
      by LAZY foo1;
   }

   foo1Removed extends removedDependency {
      on LAZY foo1;
      by LAZY foo0;
   }

   output "";
}

