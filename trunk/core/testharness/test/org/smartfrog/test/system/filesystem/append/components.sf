/* (C) Copyright 2008 Hewlett-Packard Development Company, LP

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

For more information: www.smartfrog.org

*/
#include "/org/smartfrog/services/filesystem/components.sf"
#include "/org/smartfrog/services/assertions/components.sf"
#include "/org/smartfrog/services/filesystem/append/components.sf"

Lines ["p1=1","p2=2","p3=3","p4=4","p5=5"];

//(4+1)*5 .. on windows length is ((4+2)*5==30)
MinLinesSize 25;
//dos file endings, UTF-16 encoding gives 60 bytes.
MaxLinesSize 60;

TestFile extends  TempFile {
    deleteOnExit true;
    prefix "append";
    suffix ".txt"
}

TestFileExists extends  FileExists{
  checkOnStartup true;
  sfShouldTerminate true;
  canBeDirectory false;
  minSize 0;
}

AppendTempFile extends Compound {
  file extends TestFile;
  append extends AppendLines {
    filename LAZY PARENT:file;
    lines Lines;
  }
}


testAppend extends ExpectDeploy {

  description "deploy and assert that the file is above a minimum size";

  action extends AppendTempFile {

  }

  tests extends Sequence {
    assert extends TestFileExists {
      filename LAZY ATTRIB action:file;
      minSize MinLinesSize;
      maxSize MaxLinesSize;
    }
  }
}

testNewAppend extends ExpectDeploy {

  description "make two appends twice and assert that the file is above a minimum size";


  action extends AppendTempFile {

  }

  tests extends Sequence {
    append extends AppendLines {
      sfShouldTerminate true;
      filename LAZY ATTRIB action:file;
      lines ["p6=another line goes here, and this one is very long to make things extra convoluted and be sure that we go over 100 bytes on any encoding"];
    }

    assert extends TestFileExists {
     filename LAZY ATTRIB action:file;
      minSize 100;
    }
  }
}




testDuplicateAppend extends ExpectDeploy {
  description "run a duplicate append and see what happens";

  action extends AppendTempFile {

  }

  tests extends Sequence {
    append extends AppendLines {
      sfShouldTerminate true;
      filename LAZY ATTRIB action:file;
      lines Lines;
    }

    assert extends TestFileExists {
      filename LAZY ATTRIB action:file;
      maxSize MaxLinesSize;
    }
  }
}

testRepeatedAppend extends ExpectDeploy {
  action extends AppendTempFile {

  }

  tests extends Sequence {
    addOnlyMissingLines false;

    append extends AppendLines {
      sfShouldTerminate true;
      addOnlyMissingLines PARENT:ATTRIB addOnlyMissingLines;
      filename LAZY ATTRIB action:file;
      lines Lines;
    }
    assert extends TestFileExists {
      filename LAZY ATTRIB action:file;
      maxSize MaxLinesSize;
    }
  }
}

testRepeatedAppendAllowedOverlap extends testRepeatedAppend {
  errorText "Too long";
  tests:addOnlyMissingLines false;
}