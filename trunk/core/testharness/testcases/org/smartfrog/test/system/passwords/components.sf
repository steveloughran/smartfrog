/** (C) Copyright 2006 Hewlett-Packard Development Company, LP

 This library is free software; you can redistribute it and/or
 modify it under the terms of the GNU Lesser General Public
 License as published by the Free Software Foundation; either
 version 2.1 of the License, or (at your option) any later version.

 This library is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General Public
 License along with this library; if not, write to the Free Software
 Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

 For more information: www.smartfrog.org

 */


#include "/org/smartfrog/services/passwords/components.sf"
#include "/org/smartfrog/services/filesystem/components.sf"
#include "/org/smartfrog/services/assertions/components.sf"
#include "/org/smartfrog/test/system/assertions/components.sf"
#include "/org/smartfrog/services/utils/setproperty/components.sf"

 pass "secret";


Secrets extends Compound {

  SecretInline extends InlinePassword {
    password pass;
  }

  // add a \n to make it more realistic
  SecretInFile extends TempFileWithCleanup {
    prefix "pass";
    suffix ".txt";
    text (pass ++ "\n");
  }

  SecretFilePassword extends FilePassword {
    passwordFile LAZY SecretInFile;
  }

}

CheckPassword extends PasswordChecker {
  expected pass;
  pattern ".*";
  sfShouldTerminate true;
}

testDeploy extends ExpectDeploy {
  action extends Secrets {
  }
  tests extends Sequence {
  
  }
}

testInline extends testDeploy {
  action extends Secrets {

  }
  tests extends CheckPassword {
    passwordProvider LAZY action:SecretInline;
  }
}


testFile extends testDeploy {
  tests extends CheckPassword {
    passwordProvider LAZY action:SecretFilePassword;
  }
}


testPropertyPassword extends ExpectDeploy {

  description "Create a system property and check that the property password provider can read it";

  action extends Compound {

    sysprops extends SystemProperties {
      properties [
        [ "secret.password.property", pass]
      ]
    }

    provider extends PropertyPassword {
      property "secret.password.property";
    }
  }

  tests extends CheckPassword {
    passwordProvider LAZY action:provider;
  }

}


testPropertyPasswordUnset extends ExpectDeployFailure {

  description "Check that the property password provider fails if the property is unset";

  action extends Compound {

    provider extends PropertyPassword {
      property "undefined.password.property";
    }


   check extends CheckPassword {
    passwordProvider LAZY action:provider;
   }

  }

  exceptions [ [SmartFrogExceptionNames:EXCEPTION_LIFECYCLE,""],
               [SmartFrogExceptionNames:EXCEPTION_DEPLOYMENT,PropertyPassword:ERROR_UNDEFINED_PROPERTY]];
}



