/** (C) Copyright 1998-2007 Hewlett-Packard Development Company, LP

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

For more information: www.smartfrog.org

*/


/**
 * base components for testing these compounds
 */

#include "/org/smartfrog/services/assertions/components.sf"
#include "/org/smartfrog/sfcore/workflow/components/doNothing.sf"

  Noop extends DoNothing {
    time 0;
  }

  testEmptyCompound extends ExpectDeploy {
    action extends Compound {
    }
  }

  testEmptySequence extends ExpectTerminate {
    action extends Sequence {
      noop extends Noop;
    }
  }

  /**
   * here we deploy a testblock that stays deployed after the run.
   *
   */

  testFailure extends TestBlock {
    action extends ExpectDeployFailure {
      sfShouldTerminate false;

      action extends FailAbnormal {
        message "failure message";
      }
      exitText action:message;
    }
  }


  /**
   * here we deploy a testblock that stays deployed after the run.
   *
   */

  testFailureNested extends ExpectTerminate {
    action extends ExpectDeployFailure {

      action extends FailAbnormal {
        message "failure message";
      }
      exitText action:message;
    }
  }


  testFailureWrongMessage extends ExpectDeployFailure {
    description "the inner test looks for the wrong message";
    action extends FailAbnormal {
        message "failure message";
    }
    exitText "wrong message";
  }

  testFailureWrongMessageNested extends ExpectDeployFailure {

      description "the outer test looks for the covering message";

      action extends testFailureWrongMessage {
      }

      exitText "Expected action to terminate";
  }

  testRun extends ExpectTerminate {
    action extends Sequence {
    }
  }

  testSmartFrogException extends ExpectDeployFailure {

    description "This test is expected to successfuly fail to deploy with a caught exception";

    action extends SmartFrogException {
        message "SFE";
    }
      //the exception that we expect to catch
    exceptions [["SmartFrogException","SFE"]];
  }


  testUnexpectedFailure extends ExpectDeploy {
      description "fail to deploy";
      action extends FailAbnormal {
          message "FailAbnormal Error Message";
      }
    }

