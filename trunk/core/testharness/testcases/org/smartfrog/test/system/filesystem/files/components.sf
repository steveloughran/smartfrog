/* (C) Copyright 2008 Hewlett-Packard Development Company, LP

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

For more information: www.smartfrog.org

*/
#include "/org/smartfrog/services/filesystem/files/components.sf"
#include "/org/smartfrog/services/assertions/components.sf"

Errors extends NULL {
  //ERROR_FILE_COUNT_MISMATCH CONSTANT org.smartfrog.services.filesystem.files.FilesImpl.ERROR_FILE_COUNT_MISMATCH;
  ERROR_FILE_COUNT_MISMATCH  "File count mismatch";
}

BuildTestDirs extends FilesCompound {

    fileCount 8;

    mkdir1 extends Mkdir {
        parentDir LAZY PROPERTY java.io.tmpdir ;
        dir "filestests";
    }
    subdir extends Mkdir {
        parentDir LAZY mkdir1;
        dir "subdir1";
    }
    subdir2 extends Mkdir {
        parentDir LAZY mkdir1;
        dir "subdir2";
    }
    f1 extends TouchFile {
      dir LAZY mkdir1;
      filename "1.txt";
    }
    f2 extends TouchFile {
      dir LAZY mkdir1;
      filename "2.txt";
    }
    f3 extends TouchFile {
      dir LAZY  subdir;
      filename "1.txt";
    }
    f4 extends TouchFile {
      dir LAZY  subdir;
      filename "2.txt";
    }
    f5 extends TouchFile {
      dir LAZY  subdir2;
      filename "1.txt";
    }
}

FilesTest extends ExpectDeploy  {
  tests extends Sequence {
  }
}

testFilesCompound extends FilesTest {
  description "deploy the test dirs and assert the aggregate file count"
  action extends BuildTestDirs {
  }
}



testFilesCompoundBadFilecount extends ExpectDeployFailure {
  description "deploy the test dirs and assert the aggregate file count"
  action extends BuildTestDirs {
    //assert the file count
    fileCount 3;
  }
  exitText Errors:ERROR_FILE_COUNT_MISMATCH;
  tests extends Sequence {
  }
}

testRecursive extends FilesTest {
  description "deploy the test dirs and assert the aggregate file count"
  action  extends FilesCompound {
    child extends BuildTestDirs;
    fileCount child:fileCount;
  }
}


testFiles extends FilesTest {
  description "test that the files component finds files and that duplicates are merged"
  action  extends FilesCompound {

    child extends BuildTestDirs;

    child2 extends  FilesCompound {
      files extends Files {
        dir LAZY child:mkdir1;
        pattern "\\w+\\.txt";
        fileCount 2;
      }

      files2 extends Files {
        dir LAZY child:subdir;
        pattern "\\w+\\.txt";
        fileCount 2;
      }
      fileCount 4;
    }
    //the extra two dont get picked up, because of course, they are duplicates
    fileCount child:fileCount;
  }

}

testFilesDuplicatesDropped extends FilesTest {
  description "test that the files component finds files and that duplicates are merged"
  action  extends FilesCompound {
    child extends BuildTestDirs;
    files extends Files {
      dir LAZY child:mkdir1;
      pattern "\\w+\\.txt";
      fileCount 2;
    }
    //the extra two dont get picked up, because of course, they are duplicates
    fileCount child:fileCount;;
  }

}

testAttributeBinding extends FilesTest {
  description "test that we can also pick up files from components by way of attributes"
  action  extends FilesCompound {
    child extends Compound {
      absolutePath "this/is/a/path";
    }
    fileCount 1;
  }
}
