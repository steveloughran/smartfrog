/** (C) Copyright 2008 Hewlett-Packard Development Company, LP

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

For more information: www.smartfrog.org

*/

#include "/org/smartfrog/services/assertions/components.sf"
#include "/org/smartfrog/services/filesystem/components.sf"
#include "/org/smartfrog/services/os/java/propertyfile.sf"
#include "/org/smartfrog/services/os/components.sf"

createTestEnv extends Compound {
    testDir extends TempDirWithCleanup {

    }

    testSubDir extends TempDirWithCleanup {
        dir LAZY testDir;
    }

    testFile1 extends TempFileWithCleanup {
        dir LAZY testDir;
    }

    testFile2 extends TempFileWithCleanup {
        dir LAZY testSubDir;
    }
}

//testChmodFails extends ExpectDeployFailure {
//    condition IsUnix;
//
//    description "removes read flag from a testfile and tries to read it";
//    expectTerminate false;
//
//    action extends createTestEnv {
//
//    }
//
//    tests extends Sequence {
//        rmReadRights extends Chmod {
//            file LAZY PARENT:PARENT:action:testFile1;
//            userPermissions "-r";
//            groupPermissions "-r";
//            otherPermissions "-r";
//        }
//
//        loadFile extends LoadPropertyFile {
//            resource LAZY PARENT:PARENT:action:testFile1;
//        }
//    }
//}
//
//testChmodFailsRecursively extends testChmodFails {
//    description "removes read flags from files recursively and tries to read a file";
//
//    tests extends Sequence {
//        rmReadRights extends Chmod {
//            file LAZY PARENT:PARENT:action:testDir;
//            recursively true;
//        }
//
//        loadFile extends LoadPropertyFile {
//            resource LAZY PARENT:PARENT:action:testFile2;
//        }
//    }
//}

testChmodWorks extends ExpectDeploy {
    condition IsUnix;
    
    description "removes all flags and then sets readflags and tries to read the file";
    undeployAfter 500;

    actions extends createTestEnv {

    }

    tests extends Sequence {
        rmAllRights extends Chmod {
            file LAZY PARENT:PARENT:action:testFile1;
            octalCode "000";
        }

        loadFileFailure extends ExpectDeployFailure {
            loadFailure extends LoadPropertyFile {
                resource LAZY PARENT:PARENT:PARENT:action:restFile1;            
            }
        }

        setReadRights extends Chmod {
            file LAZY PARENT:PARENT:action:restFile1;
            userPermissions "+r";
            groupPermissions "+r";
            otherPermissions "+r";
        }

        loadFile extends LoadPropertyFile {
            resource LAZY PARENT:PARENT:action:testFile1;
        }
    }
}