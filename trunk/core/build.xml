<?xml version="1.0"?>
<project name="SmartFrog Master" default="help" basedir=".">
<!--
/** (C) Copyright 1998-2007 Hewlett-Packard Development Company, LP

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

For more information: www.smartfrog.org

*/
-->


  <target name="help" description="help information">
    <echo>
    This is a primary build file for SmartFrog, which delegates down to
    specific components to do the work. It also contains support for
    cruise control
    </echo>
  </target>

    <!-- =================================================================== -->
  <!-- any common initialisations                                          -->
  <!-- =================================================================== -->
  <target name="init">
    <property file="build.properties" />
    <!-- look for a feature that only came in in ant 1.7alpha -->
    <available property="nice.task.present"
      classname="org.apache.tools.ant.taskdefs.Nice" />
    <property name="toplevel.dir" location=".." />
    <property name="main.project" location="smartfrog" />
    <property name="test.project" location="testharness" />
    <property name="components.project" location="components" />
    <property name="extras.dir" location="extras" />
    <property name="ant.project" location="${extras.dir}/ant" />
    <property file="${components.project}/libraries.properties" />
    <!-- work out our java version by introspection -->
    <condition property="java1.5+" >
      <available classname="java.lang.Readable"/>
    </condition>
    <macrodef name="forward2">
     <attribute name="dir" />
     <attribute name="target" />
     <attribute name="inheritAll" default="false" />
     <attribute name="antfile" default="build.xml" />
     <sequential>
      <subant 
        antfile="@{antfile}"
        target="@{target}" inheritAll="@{inheritAll}"
        inheritrefs="false">
        <buildpathelement location="@{dir}"/> 
      </subant>
     </sequential>
    </macrodef>
    <macrodef name="forward">
      <attribute name="dir"/>
      <attribute name="target"/>
      <attribute name="inheritAll" default="false"/>
      <sequential>
        <forward2 dir="@{dir}" target="@{target}" inheritAll="@{inheritAll}"/>
      </sequential>
    </macrodef>
  </target>
  
  <!-- =================================================================== -->
  <!-- build a distribution of smartfrog.jar, sfExamples.jar               -->
  <!-- =================================================================== -->
  <target name="main-dist" depends="init" description="build a distribution">
    <forward2 dir="${main.project}" target="dist"  />
  </target>
  
  <!-- tracking down quirks in subant -->
   <target name="diag2" depends="init" >
    <forward2 dir="${components.project}" target="diag2"  /> 
  </target>
  
  <!-- =================================================================== -->
  <!-- clean all sub-projects                                              -->
  <!-- =================================================================== -->
  <target name="clean" depends="init" description="clean up">
 
    <!--forward2 dir="${main.project}" target="clean"  /-->
    <forward2 dir="${test.project}" target="clean"  />
    <forward2 dir="${components.project}" target="clean"  /> 
    <forward2 dir="${ant.project}" target="clean"  />
    <forward2 dir="${main.project}" target="clean"  />
    
  </target>

  <!-- =================================================================== -->
  <!-- ant tasks distribution                                              -->
  <!-- =================================================================== -->

  <target name="tasks" depends="init" description="ant tasks">
    <forward2 dir="${ant.project}" target="dist"  />
  </target>


  <!-- =================================================================== -->
  <!-- components distribution                                            -->
  <!-- =================================================================== -->

  <target name="components" depends="main-dist,tasks" 
    description="components distribution(s)">
    <forward2 dir="${components.project}" target="dist"  />
  </target>

  <!-- =================================================================== -->
  <!-- install components distribution                                     -->
  <!-- =================================================================== -->

  <target name="install" depends="main-dist,tasks" 
	  description="install components distribution(s)">
	  <antcall target="components"/>
    <forward2 dir="${components.project}" target="install"  />
  </target>
  
  <!-- =================================================================== -->
  <!-- m2 installation distribution                                        -->
  <!-- =================================================================== -->

  <target name="m2-install" depends="main-dist,tasks" 
    description="components installation into the m2 cache">
    <forward2 dir="${main.project}" target="m2-install"  />
    <forward2 dir="${ant.project}" target="m2-install"  />
    <forward2 dir="${test.project}" target="m2-install"  />
    <forward2 dir="${components.project}" target="m2-install"  />
  </target>  
  
  <!-- =================================================================== -->
  <!-- main distribution                                                    -->
  <!-- =================================================================== -->

  <target name="dist" depends="main-dist" description="distributables">
  </target>


  <!-- =================================================================== -->
  <!-- test in the ant project                                            -->
  <!-- =================================================================== -->
  <target name="test-ant" depends="init" description="test in main project">
    <forward2 dir="${ant.project}" target="test"  />
  </target>

  <!-- =================================================================== -->
  <!-- test in the main project                                            -->
  <!-- =================================================================== -->
  <target name="test-main" depends="init" description="test in main project">
    <forward2 dir="${main.project}" target="sfParseTest"  />
  </target>


  <!-- =================================================================== -->
  <!-- test in the harness                                                 -->
  <!-- =================================================================== -->
  <target name="test-testharness" depends="init,tasks"
    description="test in test harness; only run system tests">
    <forward2 dir="${test.project}" target="test"  />
  </target>

  <!-- =================================================================== -->
  <!-- test in the harness                                                 -->
  <!-- ===================================18================================ -->
  <target name="test-components" depends="init,tasks"
    description="test in test harness; only run system tests">
    <forward2 dir="${components.project}" target="test"  />
  </target>  
  
  <!-- =================================================================== -->
  <!-- test all                                                            -->
  <!-- =================================================================== -->
  <target name="test" depends="test-main,test-ant,test-testharness"
    description="test everything"/>


  <!-- the following targets are for use in CruiseControl automated builds;
       rather than for normal command line/IDE work. -->


  <!-- =================================================================== -->
  <!-- any cruise control initialisations                                  -->
  <!-- =================================================================== -->
    <target name="cc-init" depends="cc-set-build-priority">
      <property name="cc.artifacts.dir" location="${toplevel.dir}/artifacts" />
      <mkdir dir="${cc.artifacts.dir}"/>
      <property name="cruise.base.dir" location="${toplevel.dir}" />
      <property name="cruise.main.project" location="${cruise.base.dir}/main"/>
      <property name="cruise.lib.dir" location="${cruise.main.project}/lib"/>
      <property name="cruise.dist.dir" location="${cruise.main.project}/dist"/>
      <property name="cruise.config.file" location="cruisecontrol.xml"/>
      <property name="cruise.control.port" value="7999"/>
      <property name="cruise.control.rmiport" value="7998"/>
    </target>

  <!-- =================================================================== -->
  <!-- -sets the priority to 3 unless overridden -this lowers the priority -->
  <!-- of any non-forked code, but does nothing for execed apps            -->
  <!-- =================================================================== -->
    <target name="cc-set-build-priority" depends="init" if="nice.task.present" >
      <property name="cc.nice.value" value="3" />
      <!-- SLO: this is disabled because in ant1.6.2. the nice class is there, but
      not the task definition -->
      <!-- <nice newPriority="${cc.nice.value}" /> -->
    </target>

  <!-- =================================================================== -->
  <!-- update code from SVN. Can overwrite this file too!                  -->
  <!-- =================================================================== -->
    <target name="svnupdate" depends="cc-init"
      description="update SVN; needs SVN on the command line">
      <exec executable="svn" failonerror="false">
        <arg line="update" />
      </exec>
    </target>

  <!-- =================================================================== -->
  <!-- incremental Cruise Control build                                    -->
  <!-- =================================================================== -->
       <target name="cc-incremental"
        depends="svnupdate,published,dist"/>

    <!-- =================================================================== -->
    <!-- Cruise control test suite                                           -->
    <!-- =================================================================== -->
    <target name="cc-test"
        depends="test-main,test-testharness,test-ant"/>

  <!-- =================================================================== -->
  <!-- full clean Cruise Control build                                     -->
  <!-- =================================================================== -->
    <target name="cc-full"
        depends="svnupdate,clean,release,cc-incremental,cc-test, mavenReport" 
        description="cruise control full build, with checkout"/>

  <!-- =================================================================== -->
  <!-- full clean Cruise Control build without Checkout                    -->
  <!-- =================================================================== -->
    <target name="cc"
        depends="clean,published,release,dist,cc-test,mavenReportNoSVNUpdate"
        description="cruise control full build, with NO checkout"/>

  <!-- =================================================================== -->
  <!-- Start cruise control from inside ant  -->
  <!-- Currently we fork and use whichever version of ant is in CC, not -->
  <!-- the version of Ant that is currently running. This is ugly, but -->
  <!-- guarantees equivalence with the command line. -->
  <!-- Override any of the properties to change location of cruise control -->
  <!-- =================================================================== -->
  <target name="cruise" depends="cc-init" description="run cruise control">
    <condition property="cc.found">
      <and>
        <available file="${cruise.lib.dir}" type="dir"/>
        <available file="${cruise.dist.dir}/cruisecontrol.jar" />
      </and>
    </condition>
    <fail unless="cc.found" >
      Cruise Control was not found in ${cruise.main.project}
    </fail>
    <java fork="true" classname="CruiseControl" failonerror="true">
      <classpath>
        <fileset dir="${cruise.lib.dir}">
          <include name="**/*.jar"/>
        </fileset>
        <fileset dir="${cruise.dist.dir}" includes="*.jar"/>
      </classpath>
      <arg value="-configfile"/>
      <arg file="${cruise.config.file}"/>
      <arg value="-port"/>
      <arg value="${cruise.control.port}"/>
      <arg value="-rmiport"/>
      <arg value="${cruise.control.rmiport}"/>
    </java>
   </target>

<!-- =================================================================== -->
<!--  Maven site:generate-->
<!-- =================================================================== -->
  <target name="mavenReport" depends="svnupdate" 
    description="run 'maven site:generate'" if="maven.present">
        <exec executable="maven" dir="${cruise.base.dir}">
            <arg line="site:generate" />
        </exec>
    </target>

  <target name="mavenReportNoSVNUpdate"  
    description="run 'maven site:generate'" if="maven.present">
        <exec executable="maven" dir="${cruise.base.dir}">
            <arg line="site:generate" />
        </exec>
    </target>

  <!-- =================================================================== -->
  <!-- release all sub-projects                                              -->
  <!-- =================================================================== -->
  <target name="release" depends="init" description="release">
    <forward2 dir="${main.project}" target="dist"  />    
    <forward2 dir="${ant.project}" target="dist"  />    
    <forward2 dir="${components.project}" target="release" antfile="createRelease.xml"  /> 
  </target>

  <!-- =================================================================== -->
  <!-- Luntbuild target for distribution -->
  <!-- =================================================================== -->
  <target name="luntbuild-clean" depends="clean,luntbuild-incremental"/>


  <!-- =================================================================== -->
  <!-- incremental build                                    -->
  <!-- =================================================================== -->
  <target name="luntbuild-incremental"
      depends="dist,tasks,components"/>

  <!-- =================================================================== -->
  <!-- luntbuild test suite                                           -->
  <!-- =================================================================== -->
  <target name="luntbuild-test"
      depends="test-main,test-testharness,test-ant"/>

  <!-- =================================================================== -->
  <!-- luntbuild release process-->
  <!-- =================================================================== -->
  <target name="luntbuild-release"
      depends="clean,release" />


  <!-- =================================================================== -->
<!-- Gump target for distribution -->
<!-- =================================================================== -->
  <target name="gump-dist" depends="dist" />

<!-- =================================================================== -->
<!-- Gump best practises say unit tests only -->
<!-- =================================================================== -->
  <target name="gump-test" depends="test" />


  <!-- =================================================================== -->
  <!-- cddlm compile is handed down-->
  <!-- =================================================================== -->
  <target name="cddlm" depends="ivy-cddlm" />

  <!-- =================================================================== -->
  <!-- Create an ordered list of all ivy-enabled projects-->
  <!-- Non-ivy projects are ignored-->
  <!-- we also ignore the deployapi components, as their build is more complex-->
  <!-- =================================================================== -->
  <target name="ivy-init" depends="init"
          xmlns:ivy="antlib:fr.jayasoft.ivy.ant">
      <typedef uri="antlib:fr.jayasoft.ivy.ant" onerror="fail"
          resource="fr/jayasoft/ivy/ant/antlib.xml">
        <classpath>
          <pathelement location="antbuild/ivy/lib/ivy-${ivy.version}.jar"/>
        </classpath>
      </typedef>
    <mkdir dir="external" />
    <ivy:configure file="antbuild/ivy/ivyconf.xml"/>
    <presetdef name="ivy-projects">
      <ivy:buildlist skipbuildwithoutivy="true">
        <fileset dir="." includes="*/build.xml"/>
        <fileset dir="extras" includes="**/build.xml">
          <!--no CDL -->
          <exclude name="cdl/build.xml"/>
          <!--not ready for ivy builds yet-->
          <exclude name="sfgui/build.xml" />
        </fileset>
        <fileset dir="components" includes="**/build.xml" >
          <!--no cddlm here-->
          <exclude name="deployapi/build.xml"/>
          <!--JMX is currently broken-->
          <exclude name="jmx/build.xml"/>
          <!--These need java 1.5 or later-->
          <exclude name="junit/build.xml" unless="java1.5+"/>
          <exclude name="xunit/build.xml" unless="java1.5+"/>
          <exclude name="database/build.xml" unless="java1.5+"/>
          <exclude name="xmpp/build.xml" unless="java1.5+"/>
        </fileset>
        <!--place for symlinks to external projects you want included-->
        <fileset dir="external" includes="**/build.xml"/>
      </ivy:buildlist>
    </presetdef>
    <ivy-projects reference="child.projects" />
    <echo>The order to build the projects is
      ${toString:child.projects}
    </echo>
    <!-- build them-->
    <presetdef name="ivy-delegate" description="Delegate the build">
      <subant verbose="true">
        <buildpath refid="child.projects"/>
        <!--<property file="master.properties"/>-->
      </subant>
    </presetdef>
    <!--  C:\Documents and Settings\slo\.ivy\local -->
    <property name="ivy.user.dir" location="${user.home}/.ivy" />
    <property name="ivy.local.dir" location="${ivy.user.dir}/local" />
    <property name="ivy.cache.dir" location="${ivy.user.dir}/cache" />
  </target>

  <target name="ivy-publish" depends="ivy-init">
    <ivy-delegate target="published" />
  </target>


  <target name="published" depends="ivy-publish"/>

  <target name="ivy-list-order" depends="ivy-init"
    xmlns:ivy="antlib:fr.jayasoft.ivy.ant">
    <echo>java1.5+=${java1.5+}</echo>
    <pathconvert pathsep="&#10;" refid="child.projects"
      property="child.projects.list" />
    <echo>
${child.projects.list}
    </echo>
  </target>


  <target name="ivy-report" depends="ivy-init"
      xmlns:ivy="antlib:fr.jayasoft.ivy.ant">
    <property name="ivy.report.dir" location="build/ivy/reports" />
    <delete dir="${ivy.report.dir}"/>
    <ivy:repreport organisation="org.smartfrog" todir="${ivy.report.dir}"
        graph="true" dot="true"/>
  </target>

  <target name="ivy-graph" depends="ivy-report" >
    <exec executable="dot">
      <arg value="-Tpng" />
      <arg value="-o" />
      <arg file="${ivy.report.dir}/smartfrog.png"/>
      <arg file="${ivy.report.dir}/ivy-repository-report.dot"/>
    </exec>
  </target>

  <target name="ivy-clean" depends="ivy-init"
    description="pass clean down to all the ivy-managed projects">
    <ivy-delegate target="clean" />
  </target>

  <target name="ivy-purge" depends="ivy-purge-published,ivy-purge-cache"
    description="purge all locally published artifacts from the local repository">
  </target>

  <target name="ivy-purge-published" depends="ivy-init"
    description="purge all locally published artifacts from the local repository">
  </target>

  <target name="ivy-purge-cache" depends="ivy-init"
    description="purge all locally published artifacts from the local repository">
  </target>


  <target name="ivy-cddlm" depends="ivy-init">
    <ivy-projects reference="cddlm.projects" root="sf-deployapi">
      <fileset file="components/deployapi/build.xml" />
      <fileset file="extras/cdl/build.xml"/>
    </ivy-projects>
    <subant  target="published" verbose="true">
      <buildpath refid="cddlm.projects"/>
      <!--<property file="master.properties"/>-->
    </subant>
  </target>

  <target name="ivy-www" depends="ivy-init">
    <ivy-projects reference="www.projects" leaf="sf-www"/>
    <subant  target="published" verbose="true">
      <buildpath refid="www.projects"/>
    </subant>
  </target>

  <target name="ivy-test" depends="ivy-init">
    <ivy-projects reference="junit.projects" root="sf-junit"/>
    <subant  target="published" verbose="true">
      <buildpath refid="junit.projects"/>
    </subant>
  </target>

</project>
